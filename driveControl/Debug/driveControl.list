
driveControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000741c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08007530  08007530  00017530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a18  08007a18  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a18  08007a18  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e0  08007c00  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007c00  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1ed  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  0002d3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b13  00000000  00000000  00030d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d676  00000000  00000000  00049823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb8d  00000000  00000000  00056e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000e2a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007514 	.word	0x08007514

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007514 	.word	0x08007514

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_d2lz>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	460c      	mov	r4, r1
 8000fac:	4605      	mov	r5, r0
 8000fae:	4621      	mov	r1, r4
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f7ff fdb5 	bl	8000b24 <__aeabi_dcmplt>
 8000fba:	b928      	cbnz	r0, 8000fc8 <__aeabi_d2lz+0x20>
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc4:	f000 b80a 	b.w	8000fdc <__aeabi_d2ulz>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fce:	f000 f805 	bl	8000fdc <__aeabi_d2ulz>
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd8:	bd38      	pop	{r3, r4, r5, pc}
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2ulz>:
 8000fdc:	b5d0      	push	{r4, r6, r7, lr}
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__aeabi_d2ulz+0x34>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fb2b 	bl	8000640 <__aeabi_dmul>
 8000fea:	f7ff fdc3 	bl	8000b74 <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff faac 	bl	800054c <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <__aeabi_d2ulz+0x38>)
 8000ff8:	f7ff fb22 	bl	8000640 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f964 	bl	80002d0 <__aeabi_dsub>
 8001008:	f7ff fdb4 	bl	8000b74 <__aeabi_d2uiz>
 800100c:	4621      	mov	r1, r4
 800100e:	bdd0      	pop	{r4, r6, r7, pc}
 8001010:	3df00000 	.word	0x3df00000
 8001014:	41f00000 	.word	0x41f00000

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fe2c 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f95c 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fac6 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001028:	f000 f99e 	bl	8001368 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800102c:	f000 fa98 	bl	8001560 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001030:	f000 fa48 	bl	80014c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <main+0x44>)
 8001036:	f001 fe23 	bl	8002c80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <main+0x48>)
 800103c:	f001 fe20 	bl	8002c80 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Right Motor PWM Control
 8001040:	2100      	movs	r1, #0
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <main+0x48>)
 8001044:	f001 fec6 	bl	8002dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Left Motor PWM Control
 8001048:	2104      	movs	r1, #4
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <main+0x48>)
 800104c:	f001 fec2 	bl	8002dd4 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 8001050:	220e      	movs	r2, #14
 8001052:	4904      	ldr	r1, [pc, #16]	; (8001064 <main+0x4c>)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <main+0x50>)
 8001056:	f002 fe51 	bl	8003cfc <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800105a:	e7fe      	b.n	800105a <main+0x42>
 800105c:	20000298 	.word	0x20000298
 8001060:	2000023c 	.word	0x2000023c
 8001064:	200001fc 	.word	0x200001fc
 8001068:	200002e0 	.word	0x200002e0

0800106c <HAL_UART_RxCpltCallback>:
	}
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 8001074:	220e      	movs	r2, #14
 8001076:	4904      	ldr	r1, [pc, #16]	; (8001088 <HAL_UART_RxCpltCallback+0x1c>)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <HAL_UART_RxCpltCallback+0x20>)
 800107a:	f002 fe3f 	bl	8003cfc <HAL_UART_Receive_IT>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001fc 	.word	0x200001fc
 800108c:	200002e0 	.word	0x200002e0

08001090 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/* Every Ts interrupt */
	int pwmToSet = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
	if(htim == &htim2){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f040 80d5 	bne.w	8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>

		//prbs(); //Process identification


		tempJoystickVal = (char *)RxBuffer;
 80010a6:	4b6d      	ldr	r3, [pc, #436]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80010a8:	4a6d      	ldr	r2, [pc, #436]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80010aa:	601a      	str	r2, [r3, #0]
		tempStrToFloat = strtok(tempJoystickVal, ",");
 80010ac:	4b6b      	ldr	r3, [pc, #428]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	496c      	ldr	r1, [pc, #432]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fff0 	bl	8005098 <strtok>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a6b      	ldr	r2, [pc, #428]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010bc:	6013      	str	r3, [r2, #0]
		leftJoystickValue = atof(tempStrToFloat);
 80010be:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 f970 	bl	80043a8 <atof>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd70 	bl	8000bb4 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a65      	ldr	r2, [pc, #404]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80010d8:	6013      	str	r3, [r2, #0]
		tempStrToFloat = strtok(NULL, ",");
 80010da:	4962      	ldr	r1, [pc, #392]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010dc:	2000      	movs	r0, #0
 80010de:	f003 ffdb 	bl	8005098 <strtok>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a60      	ldr	r2, [pc, #384]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010e6:	6013      	str	r3, [r2, #0]
		rightJoystickValue = atof(tempStrToFloat);
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f95b 	bl	80043a8 <atof>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd5b 	bl	8000bb4 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a5b      	ldr	r2, [pc, #364]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001102:	6013      	str	r3, [r2, #0]

		if(rightJoystickValue > 0){
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f04f 0100 	mov.w	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff1b 	bl	8000f48 <__aeabi_fcmpgt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x96>
			setRightMotorDirection(FORWARD);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 fb4d 	bl	80017b8 <setRightMotorDirection>
			setLeftMotorDirection(FORWARD);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 fb1e 	bl	8001760 <setLeftMotorDirection>
 8001124:	e005      	b.n	8001132 <HAL_TIM_PeriodElapsedCallback+0xa2>
		}else{
			setRightMotorDirection(BACKWARD);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fb46 	bl	80017b8 <setRightMotorDirection>
			setLeftMotorDirection(BACKWARD);
 800112c:	2001      	movs	r0, #1
 800112e:	f000 fb17 	bl	8001760 <setLeftMotorDirection>
		}

		setRightMotorPWM((int)(rightJoystickValue*1000));
 8001132:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	494f      	ldr	r1, [pc, #316]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f811 	bl	8000160 <__aeabi_fmul>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff0b 	bl	8000f5c <__aeabi_f2iz>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fac5 	bl	80016d8 <setRightMotorPWM>
		setLeftMotorPWM((int)(leftJoystickValue*1000));
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4948      	ldr	r1, [pc, #288]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f803 	bl	8000160 <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fefd 	bl	8000f5c <__aeabi_f2iz>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 faa3 	bl	80016b0 <setLeftMotorPWM>

		if(leftJoystickValue > 0){
 800116a:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 0100 	mov.w	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fee8 	bl	8000f48 <__aeabi_fcmpgt>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d020      	beq.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x130>
			pwmToSet = getRightMotorPWM();
 800117e:	f000 fad7 	bl	8001730 <getRightMotorPWM>
 8001182:	60f8      	str	r0, [r7, #12]
			pwmToSet -= pwmToSet*leftJoystickValue;
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff fe1f 	bl	8000dc8 <__aeabi_i2f>
 800118a:	4602      	mov	r2, r0
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f7fe ffe4 	bl	8000160 <__aeabi_fmul>
 8001198:	4603      	mov	r3, r0
 800119a:	461c      	mov	r4, r3
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe13 	bl	8000dc8 <__aeabi_i2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4621      	mov	r1, r4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fd58 	bl	8000c5c <__aeabi_fsub>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fed4 	bl	8000f5c <__aeabi_f2iz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
			setRightMotorPWM(pwmToSet);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 fa8d 	bl	80016d8 <setRightMotorPWM>
 80011be:	e029      	b.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x184>
		}else if(leftJoystickValue < 0){
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe9f 	bl	8000f0c <__aeabi_fcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01f      	beq.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x184>
			pwmToSet = getLeftMotorPWM();
 80011d4:	f000 fa94 	bl	8001700 <getLeftMotorPWM>
 80011d8:	60f8      	str	r0, [r7, #12]
			pwmToSet -= pwmToSet*leftJoystickValue;
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f7ff fdf4 	bl	8000dc8 <__aeabi_i2f>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f7fe ffb9 	bl	8000160 <__aeabi_fmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461c      	mov	r4, r3
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff fde8 	bl	8000dc8 <__aeabi_i2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4621      	mov	r1, r4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd2d 	bl	8000c5c <__aeabi_fsub>
 8001202:	4603      	mov	r3, r0
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fea9 	bl	8000f5c <__aeabi_f2iz>
 800120a:	4603      	mov	r3, r0
 800120c:	60fb      	str	r3, [r7, #12]
			setLeftMotorPWM(pwmToSet);
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 fa4e 	bl	80016b0 <setLeftMotorPWM>
		}

		sprintf(TxBuffer, "LM: %d, RM: %d\n", pwmToSet, pwmToSet);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4917      	ldr	r1, [pc, #92]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800121c:	f003 f8fa 	bl	8004414 <siprintf>
		HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	220e      	movs	r2, #14
 8001224:	490e      	ldr	r1, [pc, #56]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001228:	f002 fcd6 	bl	8003bd8 <HAL_UART_Transmit>
		for(n = 0; n < sizeof(TxBuffer); n++){
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e009      	b.n	8001248 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			TxBuffer[n] = 0;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800123a:	2100      	movs	r1, #0
 800123c:	54d1      	strb	r1, [r2, r3]
		for(n = 0; n < sizeof(TxBuffer); n++){
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b13      	cmp	r3, #19
 800124e:	d9f1      	bls.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		/*
		noMsLeft++;
		noMsRight++;
		*/
	}
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	20000298 	.word	0x20000298
 800125c:	20000234 	.word	0x20000234
 8001260:	200001fc 	.word	0x200001fc
 8001264:	08007540 	.word	0x08007540
 8001268:	20000238 	.word	0x20000238
 800126c:	2000020c 	.word	0x2000020c
 8001270:	20000210 	.word	0x20000210
 8001274:	447a0000 	.word	0x447a0000
 8001278:	08007544 	.word	0x08007544
 800127c:	20000284 	.word	0x20000284
 8001280:	200002e0 	.word	0x200002e0
 8001284:	20000224 	.word	0x20000224

08001288 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RightMotorOpto_Pin){
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001298:	d107      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0x22>

		nGapsRight++;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_GPIO_EXTI_Callback+0x44>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_GPIO_EXTI_Callback+0x44>)
 80012a2:	6013      	str	r3, [r2, #0]
		noMsRight = 0;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

	}

	if(GPIO_Pin == LeftMotorOpto_Pin){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b80      	cmp	r3, #128	; 0x80
 80012ae:	d107      	bne.n	80012c0 <HAL_GPIO_EXTI_Callback+0x38>


		nGapsLeft++;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80012b8:	6013      	str	r3, [r2, #0]
		noMsLeft = 0;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
	}
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000218 	.word	0x20000218
 80012d0:	20000220 	.word	0x20000220
 80012d4:	20000214 	.word	0x20000214
 80012d8:	2000021c 	.word	0x2000021c

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	; 0x40
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	2228      	movs	r2, #40	; 0x28
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f88a 	bl	8004404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	4618      	mov	r0, r3
 8001326:	f001 f841 	bl	80023ac <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001330:	f000 f9b8 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f001 faac 	bl	80028ac <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135a:	f000 f9a3 	bl	80016a4 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3740      	adds	r7, #64	; 0x40
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f82f 	bl	8004404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <MX_TIM1_Init+0x154>)
 80013a8:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <MX_TIM1_Init+0x154>)
 80013ae:	2247      	movs	r2, #71	; 0x47
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <MX_TIM1_Init+0x154>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <MX_TIM1_Init+0x154>)
 80013ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <MX_TIM1_Init+0x154>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <MX_TIM1_Init+0x154>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <MX_TIM1_Init+0x154>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d2:	483a      	ldr	r0, [pc, #232]	; (80014bc <MX_TIM1_Init+0x154>)
 80013d4:	f001 fc04 	bl	8002be0 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013de:	f000 f961 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ec:	4619      	mov	r1, r3
 80013ee:	4833      	ldr	r0, [pc, #204]	; (80014bc <MX_TIM1_Init+0x154>)
 80013f0:	f001 ff58 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fa:	f000 f953 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fe:	482f      	ldr	r0, [pc, #188]	; (80014bc <MX_TIM1_Init+0x154>)
 8001400:	f001 fc90 	bl	8002d24 <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800140a:	f000 f94b 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141a:	4619      	mov	r1, r3
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <MX_TIM1_Init+0x154>)
 800141e:	f002 facd 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001428:	f000 f93c 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001430:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	481a      	ldr	r0, [pc, #104]	; (80014bc <MX_TIM1_Init+0x154>)
 8001454:	f001 fe68 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800145e:	f000 f921 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_TIM1_Init+0x154>)
 800146c:	f001 fe5c 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001476:	f000 f915 	bl	80016a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001492:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM1_Init+0x154>)
 800149e:	f002 faeb 	bl	8003a78 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014a8:	f000 f8fc 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM1_Init+0x154>)
 80014ae:	f000 fa21 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3758      	adds	r7, #88	; 0x58
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000023c 	.word	0x2000023c
 80014c0:	40012c00 	.word	0x40012c00

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM2_Init+0x98>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM2_Init+0x98>)
 80014ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80014ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM2_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999; // 0.1 SECOND TS --------------------- //
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM2_Init+0x98>)
 80014f8:	f241 3287 	movw	r2, #4999	; 0x1387
 80014fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_TIM2_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM2_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150a:	4814      	ldr	r0, [pc, #80]	; (800155c <MX_TIM2_Init+0x98>)
 800150c:	f001 fb68 	bl	8002be0 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001516:	f000 f8c5 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM2_Init+0x98>)
 8001528:	f001 febc 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001532:	f000 f8b7 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM2_Init+0x98>)
 8001544:	f002 fa3a 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800154e:	f000 f8a9 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000298 	.word	0x20000298

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f002 fad1 	bl	8003b3e <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f87f 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002e0 	.word	0x200002e0
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a31      	ldr	r2, [pc, #196]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 410c 	mov.w	r1, #35840	; 0x8c00
 8001616:	4820      	ldr	r0, [pc, #128]	; (8001698 <MX_GPIO_Init+0xe4>)
 8001618:	f000 fe98 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	481e      	ldr	r0, [pc, #120]	; (800169c <MX_GPIO_Init+0xe8>)
 8001622:	f000 fe93 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorDriverIN1_Pin MotorDriverIN2_Pin MotorDriverIN3_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin;
 8001626:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <MX_GPIO_Init+0xe4>)
 8001640:	f000 fd00 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorDriverIN4_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN4_Pin;
 8001644:	2308      	movs	r3, #8
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2302      	movs	r3, #2
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MotorDriverIN4_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4810      	ldr	r0, [pc, #64]	; (800169c <MX_GPIO_Init+0xe8>)
 800165c:	f000 fcf2 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftMotorOpto_Pin RightMotorOpto_Pin */
  GPIO_InitStruct.Pin = LeftMotorOpto_Pin|RightMotorOpto_Pin;
 8001660:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <MX_GPIO_Init+0xe8>)
 8001676:	f000 fce5 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2017      	movs	r0, #23
 8001680:	f000 fc33 	bl	8001eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001684:	2017      	movs	r0, #23
 8001686:	f000 fc4c 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	10110000 	.word	0x10110000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <setLeftMotorPWM>:

volatile int leftPWM;
volatile int rightPWM;


void setLeftMotorPWM(int pwmPercentage){
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	TIM1->CCR2 = pwmPercentage * 10;
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <setLeftMotorPWM+0x24>)
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40012c00 	.word	0x40012c00

080016d8 <setRightMotorPWM>:

void setRightMotorPWM(int pwmPercentage){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = pwmPercentage * 10;
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <setRightMotorPWM+0x24>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40012c00 	.word	0x40012c00

08001700 <getLeftMotorPWM>:

int getLeftMotorPWM(){
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	leftPWM = TIM1->CCR2 / 10;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <getLeftMotorPWM+0x24>)
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <getLeftMotorPWM+0x28>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	08db      	lsrs	r3, r3, #3
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <getLeftMotorPWM+0x2c>)
 8001714:	601a      	str	r2, [r3, #0]
	return (leftPWM);
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <getLeftMotorPWM+0x2c>)
 8001718:	681b      	ldr	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40012c00 	.word	0x40012c00
 8001728:	cccccccd 	.word	0xcccccccd
 800172c:	20000320 	.word	0x20000320

08001730 <getRightMotorPWM>:

int getRightMotorPWM(){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	rightPWM = TIM1->CCR1 / 10;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <getRightMotorPWM+0x24>)
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <getRightMotorPWM+0x28>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <getRightMotorPWM+0x2c>)
 8001744:	601a      	str	r2, [r3, #0]
	return (rightPWM);
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <getRightMotorPWM+0x2c>)
 8001748:	681b      	ldr	r3, [r3, #0]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40012c00 	.word	0x40012c00
 8001758:	cccccccd 	.word	0xcccccccd
 800175c:	20000324 	.word	0x20000324

08001760 <setLeftMotorDirection>:

// 0 - forward; 1 - backward
void setLeftMotorDirection(int direction){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <setLeftMotorDirection+0x28>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	480f      	ldr	r0, [pc, #60]	; (80017b4 <setLeftMotorDirection+0x54>)
 8001776:	f000 fde9 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <setLeftMotorDirection+0x54>)
 8001782:	f000 fde3 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
	}else{
		Error_Handler();
	}
}
 8001786:	e011      	b.n	80017ac <setLeftMotorDirection+0x4c>
	}else if(direction == 1){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10c      	bne.n	80017a8 <setLeftMotorDirection+0x48>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <setLeftMotorDirection+0x54>)
 8001796:	f000 fdd9 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <setLeftMotorDirection+0x54>)
 80017a2:	f000 fdd3 	bl	800234c <HAL_GPIO_WritePin>
}
 80017a6:	e001      	b.n	80017ac <setLeftMotorDirection+0x4c>
		Error_Handler();
 80017a8:	f7ff ff7c 	bl	80016a4 <Error_Handler>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40010800 	.word	0x40010800

080017b8 <setRightMotorDirection>:

void setRightMotorDirection(int direction){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10b      	bne.n	80017de <setRightMotorDirection+0x26>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <setRightMotorDirection+0x50>)
 80017ce:	f000 fdbd 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2108      	movs	r1, #8
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <setRightMotorDirection+0x54>)
 80017d8:	f000 fdb8 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
	}else{
		Error_Handler();
	}
}
 80017dc:	e010      	b.n	8001800 <setRightMotorDirection+0x48>
	}else if(direction == 1){
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10b      	bne.n	80017fc <setRightMotorDirection+0x44>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <setRightMotorDirection+0x50>)
 80017ec:	f000 fdae 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2108      	movs	r1, #8
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <setRightMotorDirection+0x54>)
 80017f6:	f000 fda9 	bl	800234c <HAL_GPIO_WritePin>
}
 80017fa:	e001      	b.n	8001800 <setRightMotorDirection+0x48>
		Error_Handler();
 80017fc:	f7ff ff52 	bl	80016a4 <Error_Handler>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00

08001810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_MspInit+0x5c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_MspInit+0x5c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_MspInit+0x60>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_MspInit+0x60>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000

08001874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_TIM_Base_MspInit+0x78>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d114      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 800188c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001890:	6193      	str	r3, [r2, #24]
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2019      	movs	r0, #25
 80018a4:	f000 fb21 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018a8:	2019      	movs	r0, #25
 80018aa:	f000 fb3a 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ae:	e018      	b.n	80018e2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b8:	d113      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_TIM_Base_MspInit+0x7c>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	201c      	movs	r0, #28
 80018d8:	f000 fb07 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018dc:	201c      	movs	r0, #28
 80018de:	f000 fb20 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_TIM_MspPostInit+0x5c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d118      	bne.n	8001946 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_TIM_MspPostInit+0x60>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_TIM_MspPostInit+0x60>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_TIM_MspPostInit+0x60>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RightMotorPWM_Pin|LeftMotorPWM_Pin;
 800192c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_TIM_MspPostInit+0x64>)
 8001942:	f000 fb7f 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012c00 	.word	0x40012c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <HAL_UART_MspInit+0x98>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d137      	bne.n	80019ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_UART_MspInit+0x9c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ac:	2304      	movs	r3, #4
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	480f      	ldr	r0, [pc, #60]	; (80019fc <HAL_UART_MspInit+0xa0>)
 80019c0:	f000 fb40 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c4:	2308      	movs	r3, #8
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_UART_MspInit+0xa0>)
 80019d8:	f000 fb34 	bl	8002044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2026      	movs	r0, #38	; 0x26
 80019e2:	f000 fa82 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e6:	2026      	movs	r0, #38	; 0x26
 80019e8:	f000 fa9b 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40004400 	.word	0x40004400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a46:	f000 f95d 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a52:	2080      	movs	r0, #128	; 0x80
 8001a54:	f000 fc92 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a5c:	f000 fc8e 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM1_UP_IRQHandler+0x10>)
 8001a6a:	f001 fa55 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000023c 	.word	0x2000023c

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM2_IRQHandler+0x10>)
 8001a7e:	f001 fa4b 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000298 	.word	0x20000298

08001a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <USART2_IRQHandler+0x10>)
 8001a92:	f002 f987 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002e0 	.word	0x200002e0

08001aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <_kill>:

int _kill(int pid, int sig)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ab8:	f002 fc7a 	bl	80043b0 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2216      	movs	r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_exit>:

void _exit (int status)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffe7 	bl	8001aae <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ae0:	e7fe      	b.n	8001ae0 <_exit+0x12>

08001ae2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e00a      	b.n	8001b0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af4:	f3af 8000 	nop.w
 8001af8:	4601      	mov	r1, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf0      	blt.n	8001af4 <_read+0x12>
	}

return len;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e009      	b.n	8001b42 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbf1      	blt.n	8001b2e <_write+0x12>
	}
	return len;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_close>:

int _close(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <_isatty>:

int _isatty(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	return 1;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f002 fbe4 	bl	80043b0 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20005000 	.word	0x20005000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000228 	.word	0x20000228
 8001c1c:	20000340 	.word	0x20000340

08001c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c2e:	e003      	b.n	8001c38 <LoopCopyDataInit>

08001c30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c36:	3104      	adds	r1, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c38:	480a      	ldr	r0, [pc, #40]	; (8001c64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c40:	d3f6      	bcc.n	8001c30 <CopyDataInit>
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c44:	e002      	b.n	8001c4c <LoopFillZerobss>

08001c46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c48:	f842 3b04 	str.w	r3, [r2], #4

08001c4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c50:	d3f9      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c52:	f7ff ffe5 	bl	8001c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f002 fbb1 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5a:	f7ff f9dd 	bl	8001018 <main>
  bx lr
 8001c5e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c60:	08007a20 	.word	0x08007a20
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c68:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c6c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c70:	2000033c 	.word	0x2000033c

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x28>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f923 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fdbc 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f93b 	bl	8001f3e <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce0:	f000 f903 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x1c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_IncTick+0x20>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_IncTick+0x20>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000328 	.word	0x20000328

08001d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <HAL_GetTick+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000328 	.word	0x20000328

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <__NVIC_EnableIRQ+0x34>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb4:	f7ff ff90 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff2d 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff42 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff90 	bl	8001e2c <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5f 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff35 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e051      	b.n	800201e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 020e 	bic.w	r2, r2, #14
 8001f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0xd0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d029      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0xa0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_DMA_Abort_IT+0xd4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x9c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0xd8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x96>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_DMA_Abort_IT+0xdc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d012      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x90>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0xe0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00a      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_DMA_Abort_IT+0xe4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Abort_IT+0x84>
 8001fd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fda:	e00e      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe0:	e00b      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	e008      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	e002      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_DMA_Abort_IT+0xe8>)
 8001ffc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
    } 
  }
  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020008 	.word	0x40020008
 800202c:	4002001c 	.word	0x4002001c
 8002030:	40020030 	.word	0x40020030
 8002034:	40020044 	.word	0x40020044
 8002038:	40020058 	.word	0x40020058
 800203c:	4002006c 	.word	0x4002006c
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	; (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	492c      	ldr	r1, [pc, #176]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4922      	ldr	r1, [pc, #136]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4918      	ldr	r1, [pc, #96]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	; 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe ff74 	bl	8001288 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e26c      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
 80023e4:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x12c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e246      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x76>
 8002414:	4b80      	ldr	r3, [pc, #512]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7f      	ldr	r2, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xbc>
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a71      	ldr	r2, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002468:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6a      	ldr	r2, [pc, #424]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a67      	ldr	r2, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fc4e 	bl	8001d28 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc4a 	bl	8001d28 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1fa      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe4>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc3a 	bl	8001d28 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc36 	bl	8001d28 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1e6      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x10c>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f2:	4b49      	ldr	r3, [pc, #292]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1ba      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4939      	ldr	r1, [pc, #228]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x270>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff fbef 	bl	8001d28 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fbeb 	bl	8001d28 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e19b      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4927      	ldr	r1, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_RCC_OscConfig+0x270>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fbce 	bl	8001d28 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff fbca 	bl	8001d28 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e17a      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03a      	beq.n	8002630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_RCC_OscConfig+0x274>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c8:	f7ff fbae 	bl	8001d28 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff fbaa 	bl	8001d28 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e15a      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 fad8 	bl	8002ba4 <RCC_Delay>
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff fb94 	bl	8001d28 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff fb90 	bl	8001d28 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d908      	bls.n	8002624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e140      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	42420000 	.word	0x42420000
 8002620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b9e      	ldr	r3, [pc, #632]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e9      	bne.n	8002604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a6 	beq.w	800278a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b97      	ldr	r3, [pc, #604]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b94      	ldr	r3, [pc, #592]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a93      	ldr	r2, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b8b      	ldr	r3, [pc, #556]	; (80028a4 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a8a      	ldr	r2, [pc, #552]	; (80028a4 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff fb51 	bl	8001d28 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7ff fb4d 	bl	8001d28 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0fd      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x312>
 80026b0:	4b7b      	ldr	r3, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a7a      	ldr	r2, [pc, #488]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x334>
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a72      	ldr	r2, [pc, #456]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x356>
 80026e8:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a6c      	ldr	r2, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff fb01 	bl	8001d28 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fafd 	bl	8001d28 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ab      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x37e>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff faeb 	bl	8001d28 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff fae7 	bl	8001d28 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e095      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a47      	ldr	r2, [pc, #284]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8081 	beq.w	8002896 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d061      	beq.n	8002864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d146      	bne.n	8002836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x4fc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fabb 	bl	8001d28 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fab7 	bl	8001d28 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e067      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	492d      	ldr	r1, [pc, #180]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	430b      	orrs	r3, r1
 8002802:	4927      	ldr	r1, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x4fc>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fa8b 	bl	8001d28 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff fa87 	bl	8001d28 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e037      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x46a>
 8002834:	e02f      	b.n	8002896 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_RCC_OscConfig+0x4fc>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff fa74 	bl	8001d28 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff fa70 	bl	8001d28 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e020      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x498>
 8002862:	e018      	b.n	8002896 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e013      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	429a      	cmp	r2, r3
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42420060 	.word	0x42420060

080028ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0d0      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d910      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	4965      	ldr	r1, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800292a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d040      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e073      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06b      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4936      	ldr	r1, [pc, #216]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7ff f9c4 	bl	8001d28 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7ff f9c0 	bl	8001d28 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e053      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d210      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4922      	ldr	r1, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1cc>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f922 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08007564 	.word	0x08007564
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b490      	push	{r4, r7}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a88:	1d3c      	adds	r4, r7, #4
 8002a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a90:	f240 2301 	movw	r3, #513	; 0x201
 8002a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8002abe:	e02d      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac2:	623b      	str	r3, [r7, #32]
      break;
 8002ac4:	e02d      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ad8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0c5b      	lsrs	r3, r3, #17
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002af2:	4413      	add	r3, r2
 8002af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002af8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	fb02 f203 	mul.w	r2, r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e004      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	623b      	str	r3, [r7, #32]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1e:	623b      	str	r3, [r7, #32]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc90      	pop	{r4, r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08007554 	.word	0x08007554
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	003d0900 	.word	0x003d0900

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b58:	f7ff fff2 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08007574 	.word	0x08007574

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff ffde 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0adb      	lsrs	r3, r3, #11
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08007574 	.word	0x08007574

08002ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <RCC_Delay+0x34>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <RCC_Delay+0x38>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0a5b      	lsrs	r3, r3, #9
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc0:	bf00      	nop
  }
  while (Delay --);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	60fa      	str	r2, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f9      	bne.n	8002bc0 <RCC_Delay+0x1c>
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e041      	b.n	8002c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fe34 	bl	8001874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 fc28 	bl	8003474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e03a      	b.n	8002d0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_Base_Start_IT+0x98>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x58>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x58>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x58>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d111      	bne.n	8002cfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d010      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	e007      	b.n	8002d0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800

08002d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e041      	b.n	8002dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f839 	bl	8002dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fb86 	bl	8003474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x24>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e022      	b.n	8002e3e <HAL_TIM_PWM_Start+0x6a>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d109      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x3e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e015      	b.n	8002e3e <HAL_TIM_PWM_Start+0x6a>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d109      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x58>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <HAL_TIM_PWM_Start+0x6a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e05e      	b.n	8002f04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x82>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e54:	e013      	b.n	8002e7e <HAL_TIM_PWM_Start+0xaa>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x92>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_PWM_Start+0xaa>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0xa2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e74:	e003      	b.n	8002e7e <HAL_TIM_PWM_Start+0xaa>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd74 	bl	8003974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_TIM_PWM_Start+0x138>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d107      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_TIM_PWM_Start+0x138>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIM_PWM_Start+0xfa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d009      	beq.n	8002ece <HAL_TIM_PWM_Start+0xfa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIM_PWM_Start+0x13c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIM_PWM_Start+0xfa>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIM_PWM_Start+0x140>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d010      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	e007      	b.n	8002f02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa6f 	bl	800343e <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa62 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fa71 	bl	8003450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa45 	bl	800343e <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa38 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fa47 	bl	8003450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0208 	mvn.w	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa1b 	bl	800343e <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa0e 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa1d 	bl	8003450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9f1 	bl	800343e <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9e4 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f9f3 	bl	8003450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fffa 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fd32 	bl	8003b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9b7 	bl	8003462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fcfd 	bl	8003b1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e0ac      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f200 809f 	bhi.w	8003290 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800318d 	.word	0x0800318d
 800315c:	08003291 	.word	0x08003291
 8003160:	08003291 	.word	0x08003291
 8003164:	08003291 	.word	0x08003291
 8003168:	080031cd 	.word	0x080031cd
 800316c:	08003291 	.word	0x08003291
 8003170:	08003291 	.word	0x08003291
 8003174:	08003291 	.word	0x08003291
 8003178:	0800320f 	.word	0x0800320f
 800317c:	08003291 	.word	0x08003291
 8003180:	08003291 	.word	0x08003291
 8003184:	08003291 	.word	0x08003291
 8003188:	0800324f 	.word	0x0800324f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f9d0 	bl	8003538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	619a      	str	r2, [r3, #24]
      break;
 80031ca:	e062      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa16 	bl	8003604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
      break;
 800320c:	e041      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fa5f 	bl	80036d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0208 	orr.w	r2, r2, #8
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0204 	bic.w	r2, r2, #4
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
      break;
 800324c:	e021      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 faa9 	bl	80037ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
      break;
 800328e:	e000      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_ConfigClockSource+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0b3      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x180>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d03e      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xd0>
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	f200 8087 	bhi.w	800340c <HAL_TIM_ConfigClockSource+0x168>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	f000 8085 	beq.w	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330a:	d87f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 800330c:	2b70      	cmp	r3, #112	; 0x70
 800330e:	d01a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xa2>
 8003310:	2b70      	cmp	r3, #112	; 0x70
 8003312:	d87b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 8003314:	2b60      	cmp	r3, #96	; 0x60
 8003316:	d050      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x116>
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d877      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d03c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xf6>
 8003320:	2b50      	cmp	r3, #80	; 0x50
 8003322:	d873      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d058      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x136>
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d86f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d064      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x156>
 8003330:	2b30      	cmp	r3, #48	; 0x30
 8003332:	d86b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d060      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x156>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d867      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x168>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x156>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d05a      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003344:	e062      	b.n	800340c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f000 faee 	bl	8003936 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003368:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e04e      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f000 fad7 	bl	8003936 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003396:	609a      	str	r2, [r3, #8]
      break;
 8003398:	e03b      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 fa4e 	bl	8003848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2150      	movs	r1, #80	; 0x50
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 faa5 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 80033b8:	e02b      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fa6c 	bl	80038a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2160      	movs	r1, #96	; 0x60
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa95 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e01b      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fa2e 	bl	8003848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	; 0x40
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa85 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e00b      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f000 fa7c 	bl	8003902 <TIM_ITRx_SetConfig>
        break;
 800340a:	e002      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800340c:	bf00      	nop
 800340e:	e000      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0xb8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00b      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d007      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <TIM_Base_SetConfig+0xbc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <TIM_Base_SetConfig+0xc0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <TIM_Base_SetConfig+0xb8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d007      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <TIM_Base_SetConfig+0xbc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <TIM_Base_SetConfig+0xc0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d108      	bne.n	80034e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <TIM_Base_SetConfig+0xb8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	615a      	str	r2, [r3, #20]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 0302 	bic.w	r3, r3, #2
 8003580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <TIM_OC1_SetConfig+0xc8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10c      	bne.n	80035ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0308 	bic.w	r3, r3, #8
 800359a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <TIM_OC1_SetConfig+0xc8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d111      	bne.n	80035da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40012c00 	.word	0x40012c00

08003604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0320 	bic.w	r3, r3, #32
 800364e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <TIM_OC2_SetConfig+0xd0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10d      	bne.n	8003680 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <TIM_OC2_SetConfig+0xd0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d113      	bne.n	80036b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00

080036d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <TIM_OC3_SetConfig+0xd0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10d      	bne.n	8003752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <TIM_OC3_SetConfig+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00

080037ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	031b      	lsls	r3, r3, #12
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <TIM_OC4_SetConfig+0x98>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d109      	bne.n	8003820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00

08003848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 030a 	bic.w	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0210 	bic.w	r2, r3, #16
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	031b      	lsls	r3, r3, #12
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	f043 0307 	orr.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	021a      	lsls	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	431a      	orrs	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4313      	orrs	r3, r2
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	609a      	str	r2, [r3, #8]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	43db      	mvns	r3, r3
 8003996:	401a      	ands	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e046      	b.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d009      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10c      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800

08003a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e03d      	b.n	8003b10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e03f      	b.n	8003bd0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd fef9 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	; 0x24
 8003b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb82 	bl	800428c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d17c      	bne.n	8003cf2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Transmit+0x2c>
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e075      	b.n	8003cf4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Transmit+0x3e>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e06e      	b.n	8003cf4 <HAL_UART_Transmit+0x11c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2221      	movs	r2, #33	; 0x21
 8003c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c2c:	f7fe f87c 	bl	8001d28 <HAL_GetTick>
 8003c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d108      	bne.n	8003c5a <HAL_UART_Transmit+0x82>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e003      	b.n	8003c62 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c6a:	e02a      	b.n	8003cc2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9a6 	bl	8003fc8 <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e036      	b.n	8003cf4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e007      	b.n	8003cb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1cf      	bne.n	8003c6c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2140      	movs	r1, #64	; 0x40
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f976 	bl	8003fc8 <UART_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e006      	b.n	8003cf4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d140      	bne.n	8003d98 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_Receive_IT+0x26>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e039      	b.n	8003d9a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Receive_IT+0x38>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e032      	b.n	8003d9a <HAL_UART_Receive_IT+0x9e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	; 0x22
 8003d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d72:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0220 	orr.w	r2, r2, #32
 8003d92:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9cc 	bl	800418c <UART_Receive_IT>
      return;
 8003df4:	e0d0      	b.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80b0 	beq.w	8003f5e <HAL_UART_IRQHandler+0x1ba>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_UART_IRQHandler+0x70>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a5 	beq.w	8003f5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_UART_IRQHandler+0xee>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d077      	beq.n	8003f96 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x11c>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f966 	bl	800418c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x144>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d031      	beq.n	8003f4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8b7 	bl	800405c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <HAL_UART_IRQHandler+0x1fc>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f819 	bl	8001f58 <HAL_DMA_Abort_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f36:	4610      	mov	r0, r2
 8003f38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3a:	e00e      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f83a 	bl	8003fb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	e00a      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f836 	bl	8003fb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f832 	bl	8003fb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f58:	e01d      	b.n	8003f96 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5a:	bf00      	nop
    return;
 8003f5c:	e01b      	b.n	8003f96 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1d6>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8a3 	bl	80040be <UART_Transmit_IT>
    return;
 8003f78:	e00e      	b.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8e4 	bl	800415c <UART_EndTransmit_IT>
    return;
 8003f94:	e000      	b.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003f96:	bf00      	nop
  }
}
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08004097 	.word	0x08004097

08003fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd8:	e02c      	b.n	8004034 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe0:	d028      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe8:	f7fd fe9e 	bl	8001d28 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d21d      	bcs.n	8004034 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004006:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e00f      	b.n	8004054 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	429a      	cmp	r2, r3
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	429a      	cmp	r2, r3
 8004050:	d0c3      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004072:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ff80 	bl	8003fb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b21      	cmp	r3, #33	; 0x21
 80040d0:	d13e      	bne.n	8004150 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d114      	bne.n	8004106 <UART_Transmit_IT+0x48>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]
 8004104:	e008      	b.n	8004118 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6211      	str	r1, [r2, #32]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004172:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff11 	bl	8003fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b22      	cmp	r3, #34	; 0x22
 800419e:	d170      	bne.n	8004282 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d117      	bne.n	80041da <UART_Receive_IT+0x4e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d113      	bne.n	80041da <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	e026      	b.n	8004228 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ec:	d007      	beq.n	80041fe <UART_Receive_IT+0x72>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <UART_Receive_IT+0x80>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e008      	b.n	800421e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4619      	mov	r1, r3
 8004236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004238:	2b00      	cmp	r3, #0
 800423a:	d120      	bne.n	800427e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0220 	bic.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fc fef9 	bl	800106c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e002      	b.n	8004284 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042c6:	f023 030c 	bic.w	r3, r3, #12
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <UART_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d103      	bne.n	80042fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe fc42 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	e002      	b.n	8004302 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042fc:	f7fe fc2a 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8004300:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <UART_SetConfig+0x118>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	0119      	lsls	r1, r3, #4
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009a      	lsls	r2, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	fbb2 f2f3 	udiv	r2, r2, r3
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <UART_SetConfig+0x118>)
 800433a:	fba3 0302 	umull	r0, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2064      	movs	r0, #100	; 0x64
 8004342:	fb00 f303 	mul.w	r3, r0, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	3332      	adds	r3, #50	; 0x32
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <UART_SetConfig+0x118>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004358:	4419      	add	r1, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009a      	lsls	r2, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <UART_SetConfig+0x118>)
 8004372:	fba3 0302 	umull	r0, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2064      	movs	r0, #100	; 0x64
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <UART_SetConfig+0x118>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	440a      	add	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40013800 	.word	0x40013800
 80043a4:	51eb851f 	.word	0x51eb851f

080043a8 <atof>:
 80043a8:	2100      	movs	r1, #0
 80043aa:	f000 be69 	b.w	8005080 <strtod>
	...

080043b0 <__errno>:
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <__errno+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	2600      	movs	r6, #0
 80043c0:	4d0c      	ldr	r5, [pc, #48]	; (80043f4 <__libc_init_array+0x38>)
 80043c2:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c4:	1b64      	subs	r4, r4, r5
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	f003 f8a2 	bl	8007514 <_init>
 80043d0:	2600      	movs	r6, #0
 80043d2:	4d0a      	ldr	r5, [pc, #40]	; (80043fc <__libc_init_array+0x40>)
 80043d4:	4c0a      	ldr	r4, [pc, #40]	; (8004400 <__libc_init_array+0x44>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08007a18 	.word	0x08007a18
 80043f8:	08007a18 	.word	0x08007a18
 80043fc:	08007a18 	.word	0x08007a18
 8004400:	08007a1c 	.word	0x08007a1c

08004404 <memset>:
 8004404:	4603      	mov	r3, r0
 8004406:	4402      	add	r2, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	d100      	bne.n	800440e <memset+0xa>
 800440c:	4770      	bx	lr
 800440e:	f803 1b01 	strb.w	r1, [r3], #1
 8004412:	e7f9      	b.n	8004408 <memset+0x4>

08004414 <siprintf>:
 8004414:	b40e      	push	{r1, r2, r3}
 8004416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800441a:	b500      	push	{lr}
 800441c:	b09c      	sub	sp, #112	; 0x70
 800441e:	ab1d      	add	r3, sp, #116	; 0x74
 8004420:	9002      	str	r0, [sp, #8]
 8004422:	9006      	str	r0, [sp, #24]
 8004424:	9107      	str	r1, [sp, #28]
 8004426:	9104      	str	r1, [sp, #16]
 8004428:	4808      	ldr	r0, [pc, #32]	; (800444c <siprintf+0x38>)
 800442a:	4909      	ldr	r1, [pc, #36]	; (8004450 <siprintf+0x3c>)
 800442c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004430:	9105      	str	r1, [sp, #20]
 8004432:	6800      	ldr	r0, [r0, #0]
 8004434:	a902      	add	r1, sp, #8
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	f002 f810 	bl	800645c <_svfiprintf_r>
 800443c:	2200      	movs	r2, #0
 800443e:	9b02      	ldr	r3, [sp, #8]
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	b01c      	add	sp, #112	; 0x70
 8004444:	f85d eb04 	ldr.w	lr, [sp], #4
 8004448:	b003      	add	sp, #12
 800444a:	4770      	bx	lr
 800444c:	2000000c 	.word	0x2000000c
 8004450:	ffff0208 	.word	0xffff0208

08004454 <sulp>:
 8004454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	460f      	mov	r7, r1
 800445a:	4690      	mov	r8, r2
 800445c:	f001 fda6 	bl	8005fac <__ulp>
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
 8004464:	f1b8 0f00 	cmp.w	r8, #0
 8004468:	d011      	beq.n	800448e <sulp+0x3a>
 800446a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800446e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004472:	2b00      	cmp	r3, #0
 8004474:	dd0b      	ble.n	800448e <sulp+0x3a>
 8004476:	2400      	movs	r4, #0
 8004478:	051b      	lsls	r3, r3, #20
 800447a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800447e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004482:	4622      	mov	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	f7fc f8db 	bl	8000640 <__aeabi_dmul>
 800448a:	4604      	mov	r4, r0
 800448c:	460d      	mov	r5, r1
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004498 <_strtod_l>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	469b      	mov	fp, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	b0a1      	sub	sp, #132	; 0x84
 80044a2:	931c      	str	r3, [sp, #112]	; 0x70
 80044a4:	4ba1      	ldr	r3, [pc, #644]	; (800472c <_strtod_l+0x294>)
 80044a6:	4682      	mov	sl, r0
 80044a8:	681f      	ldr	r7, [r3, #0]
 80044aa:	460e      	mov	r6, r1
 80044ac:	4638      	mov	r0, r7
 80044ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80044b0:	f7fb fe4e 	bl	8000150 <strlen>
 80044b4:	f04f 0800 	mov.w	r8, #0
 80044b8:	4604      	mov	r4, r0
 80044ba:	f04f 0900 	mov.w	r9, #0
 80044be:	961b      	str	r6, [sp, #108]	; 0x6c
 80044c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	2a2b      	cmp	r2, #43	; 0x2b
 80044c6:	d04c      	beq.n	8004562 <_strtod_l+0xca>
 80044c8:	d83a      	bhi.n	8004540 <_strtod_l+0xa8>
 80044ca:	2a0d      	cmp	r2, #13
 80044cc:	d833      	bhi.n	8004536 <_strtod_l+0x9e>
 80044ce:	2a08      	cmp	r2, #8
 80044d0:	d833      	bhi.n	800453a <_strtod_l+0xa2>
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	d03d      	beq.n	8004552 <_strtod_l+0xba>
 80044d6:	2300      	movs	r3, #0
 80044d8:	930c      	str	r3, [sp, #48]	; 0x30
 80044da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80044dc:	782b      	ldrb	r3, [r5, #0]
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	f040 80af 	bne.w	8004642 <_strtod_l+0x1aa>
 80044e4:	786b      	ldrb	r3, [r5, #1]
 80044e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80044ea:	2b58      	cmp	r3, #88	; 0x58
 80044ec:	d16c      	bne.n	80045c8 <_strtod_l+0x130>
 80044ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044f0:	4650      	mov	r0, sl
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	ab1c      	add	r3, sp, #112	; 0x70
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4a8d      	ldr	r2, [pc, #564]	; (8004730 <_strtod_l+0x298>)
 80044fa:	f8cd b008 	str.w	fp, [sp, #8]
 80044fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004500:	a91b      	add	r1, sp, #108	; 0x6c
 8004502:	f000 febd 	bl	8005280 <__gethex>
 8004506:	f010 0607 	ands.w	r6, r0, #7
 800450a:	4604      	mov	r4, r0
 800450c:	d005      	beq.n	800451a <_strtod_l+0x82>
 800450e:	2e06      	cmp	r6, #6
 8004510:	d129      	bne.n	8004566 <_strtod_l+0xce>
 8004512:	2300      	movs	r3, #0
 8004514:	3501      	adds	r5, #1
 8004516:	951b      	str	r5, [sp, #108]	; 0x6c
 8004518:	930c      	str	r3, [sp, #48]	; 0x30
 800451a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8596 	bne.w	800504e <_strtod_l+0xbb6>
 8004522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004524:	b1d3      	cbz	r3, 800455c <_strtod_l+0xc4>
 8004526:	4642      	mov	r2, r8
 8004528:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	b021      	add	sp, #132	; 0x84
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	2a20      	cmp	r2, #32
 8004538:	d1cd      	bne.n	80044d6 <_strtod_l+0x3e>
 800453a:	3301      	adds	r3, #1
 800453c:	931b      	str	r3, [sp, #108]	; 0x6c
 800453e:	e7bf      	b.n	80044c0 <_strtod_l+0x28>
 8004540:	2a2d      	cmp	r2, #45	; 0x2d
 8004542:	d1c8      	bne.n	80044d6 <_strtod_l+0x3e>
 8004544:	2201      	movs	r2, #1
 8004546:	920c      	str	r2, [sp, #48]	; 0x30
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	921b      	str	r2, [sp, #108]	; 0x6c
 800454c:	785b      	ldrb	r3, [r3, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1c3      	bne.n	80044da <_strtod_l+0x42>
 8004552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004554:	961b      	str	r6, [sp, #108]	; 0x6c
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 8577 	bne.w	800504a <_strtod_l+0xbb2>
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	e7e4      	b.n	800452c <_strtod_l+0x94>
 8004562:	2200      	movs	r2, #0
 8004564:	e7ef      	b.n	8004546 <_strtod_l+0xae>
 8004566:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004568:	b13a      	cbz	r2, 800457a <_strtod_l+0xe2>
 800456a:	2135      	movs	r1, #53	; 0x35
 800456c:	a81e      	add	r0, sp, #120	; 0x78
 800456e:	f001 fe21 	bl	80061b4 <__copybits>
 8004572:	4650      	mov	r0, sl
 8004574:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004576:	f001 f9e9 	bl	800594c <_Bfree>
 800457a:	3e01      	subs	r6, #1
 800457c:	2e05      	cmp	r6, #5
 800457e:	d807      	bhi.n	8004590 <_strtod_l+0xf8>
 8004580:	e8df f006 	tbb	[pc, r6]
 8004584:	1d180b0e 	.word	0x1d180b0e
 8004588:	030e      	.short	0x030e
 800458a:	f04f 0900 	mov.w	r9, #0
 800458e:	46c8      	mov	r8, r9
 8004590:	0721      	lsls	r1, r4, #28
 8004592:	d5c2      	bpl.n	800451a <_strtod_l+0x82>
 8004594:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004598:	e7bf      	b.n	800451a <_strtod_l+0x82>
 800459a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800459e:	e7f7      	b.n	8004590 <_strtod_l+0xf8>
 80045a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80045a2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80045a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80045aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80045b2:	e7ed      	b.n	8004590 <_strtod_l+0xf8>
 80045b4:	f04f 0800 	mov.w	r8, #0
 80045b8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004734 <_strtod_l+0x29c>
 80045bc:	e7e8      	b.n	8004590 <_strtod_l+0xf8>
 80045be:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80045c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80045c6:	e7e3      	b.n	8004590 <_strtod_l+0xf8>
 80045c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d0f9      	beq.n	80045c8 <_strtod_l+0x130>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0a0      	beq.n	800451a <_strtod_l+0x82>
 80045d8:	2301      	movs	r3, #1
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045de:	220a      	movs	r2, #10
 80045e0:	9308      	str	r3, [sp, #32]
 80045e2:	2300      	movs	r3, #0
 80045e4:	469b      	mov	fp, r3
 80045e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80045ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80045ec:	7805      	ldrb	r5, [r0, #0]
 80045ee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80045f2:	b2d9      	uxtb	r1, r3
 80045f4:	2909      	cmp	r1, #9
 80045f6:	d926      	bls.n	8004646 <_strtod_l+0x1ae>
 80045f8:	4622      	mov	r2, r4
 80045fa:	4639      	mov	r1, r7
 80045fc:	f002 fb32 	bl	8006c64 <strncmp>
 8004600:	2800      	cmp	r0, #0
 8004602:	d032      	beq.n	800466a <_strtod_l+0x1d2>
 8004604:	2000      	movs	r0, #0
 8004606:	462b      	mov	r3, r5
 8004608:	465c      	mov	r4, fp
 800460a:	4602      	mov	r2, r0
 800460c:	9004      	str	r0, [sp, #16]
 800460e:	2b65      	cmp	r3, #101	; 0x65
 8004610:	d001      	beq.n	8004616 <_strtod_l+0x17e>
 8004612:	2b45      	cmp	r3, #69	; 0x45
 8004614:	d113      	bne.n	800463e <_strtod_l+0x1a6>
 8004616:	b91c      	cbnz	r4, 8004620 <_strtod_l+0x188>
 8004618:	9b07      	ldr	r3, [sp, #28]
 800461a:	4303      	orrs	r3, r0
 800461c:	d099      	beq.n	8004552 <_strtod_l+0xba>
 800461e:	2400      	movs	r4, #0
 8004620:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004622:	1c73      	adds	r3, r6, #1
 8004624:	931b      	str	r3, [sp, #108]	; 0x6c
 8004626:	7873      	ldrb	r3, [r6, #1]
 8004628:	2b2b      	cmp	r3, #43	; 0x2b
 800462a:	d078      	beq.n	800471e <_strtod_l+0x286>
 800462c:	2b2d      	cmp	r3, #45	; 0x2d
 800462e:	d07b      	beq.n	8004728 <_strtod_l+0x290>
 8004630:	2700      	movs	r7, #0
 8004632:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004636:	2909      	cmp	r1, #9
 8004638:	f240 8082 	bls.w	8004740 <_strtod_l+0x2a8>
 800463c:	961b      	str	r6, [sp, #108]	; 0x6c
 800463e:	2500      	movs	r5, #0
 8004640:	e09e      	b.n	8004780 <_strtod_l+0x2e8>
 8004642:	2300      	movs	r3, #0
 8004644:	e7c9      	b.n	80045da <_strtod_l+0x142>
 8004646:	f1bb 0f08 	cmp.w	fp, #8
 800464a:	bfd5      	itete	le
 800464c:	9906      	ldrle	r1, [sp, #24]
 800464e:	9905      	ldrgt	r1, [sp, #20]
 8004650:	fb02 3301 	mlale	r3, r2, r1, r3
 8004654:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004658:	f100 0001 	add.w	r0, r0, #1
 800465c:	bfd4      	ite	le
 800465e:	9306      	strle	r3, [sp, #24]
 8004660:	9305      	strgt	r3, [sp, #20]
 8004662:	f10b 0b01 	add.w	fp, fp, #1
 8004666:	901b      	str	r0, [sp, #108]	; 0x6c
 8004668:	e7bf      	b.n	80045ea <_strtod_l+0x152>
 800466a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800466c:	191a      	adds	r2, r3, r4
 800466e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004670:	5d1b      	ldrb	r3, [r3, r4]
 8004672:	f1bb 0f00 	cmp.w	fp, #0
 8004676:	d036      	beq.n	80046e6 <_strtod_l+0x24e>
 8004678:	465c      	mov	r4, fp
 800467a:	9004      	str	r0, [sp, #16]
 800467c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004680:	2a09      	cmp	r2, #9
 8004682:	d912      	bls.n	80046aa <_strtod_l+0x212>
 8004684:	2201      	movs	r2, #1
 8004686:	e7c2      	b.n	800460e <_strtod_l+0x176>
 8004688:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800468a:	3001      	adds	r0, #1
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b30      	cmp	r3, #48	; 0x30
 8004694:	d0f8      	beq.n	8004688 <_strtod_l+0x1f0>
 8004696:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800469a:	2a08      	cmp	r2, #8
 800469c:	f200 84dc 	bhi.w	8005058 <_strtod_l+0xbc0>
 80046a0:	9004      	str	r0, [sp, #16]
 80046a2:	2000      	movs	r0, #0
 80046a4:	4604      	mov	r4, r0
 80046a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80046a8:	9208      	str	r2, [sp, #32]
 80046aa:	3b30      	subs	r3, #48	; 0x30
 80046ac:	f100 0201 	add.w	r2, r0, #1
 80046b0:	d013      	beq.n	80046da <_strtod_l+0x242>
 80046b2:	9904      	ldr	r1, [sp, #16]
 80046b4:	1905      	adds	r5, r0, r4
 80046b6:	4411      	add	r1, r2
 80046b8:	9104      	str	r1, [sp, #16]
 80046ba:	4622      	mov	r2, r4
 80046bc:	210a      	movs	r1, #10
 80046be:	42aa      	cmp	r2, r5
 80046c0:	d113      	bne.n	80046ea <_strtod_l+0x252>
 80046c2:	1822      	adds	r2, r4, r0
 80046c4:	2a08      	cmp	r2, #8
 80046c6:	f104 0401 	add.w	r4, r4, #1
 80046ca:	4404      	add	r4, r0
 80046cc:	dc1b      	bgt.n	8004706 <_strtod_l+0x26e>
 80046ce:	220a      	movs	r2, #10
 80046d0:	9906      	ldr	r1, [sp, #24]
 80046d2:	fb02 3301 	mla	r3, r2, r1, r3
 80046d6:	9306      	str	r3, [sp, #24]
 80046d8:	2200      	movs	r2, #0
 80046da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046dc:	4610      	mov	r0, r2
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	911b      	str	r1, [sp, #108]	; 0x6c
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	e7ca      	b.n	800467c <_strtod_l+0x1e4>
 80046e6:	4658      	mov	r0, fp
 80046e8:	e7d3      	b.n	8004692 <_strtod_l+0x1fa>
 80046ea:	2a08      	cmp	r2, #8
 80046ec:	dc04      	bgt.n	80046f8 <_strtod_l+0x260>
 80046ee:	9f06      	ldr	r7, [sp, #24]
 80046f0:	434f      	muls	r7, r1
 80046f2:	9706      	str	r7, [sp, #24]
 80046f4:	3201      	adds	r2, #1
 80046f6:	e7e2      	b.n	80046be <_strtod_l+0x226>
 80046f8:	1c57      	adds	r7, r2, #1
 80046fa:	2f10      	cmp	r7, #16
 80046fc:	bfde      	ittt	le
 80046fe:	9f05      	ldrle	r7, [sp, #20]
 8004700:	434f      	mulle	r7, r1
 8004702:	9705      	strle	r7, [sp, #20]
 8004704:	e7f6      	b.n	80046f4 <_strtod_l+0x25c>
 8004706:	2c10      	cmp	r4, #16
 8004708:	bfdf      	itttt	le
 800470a:	220a      	movle	r2, #10
 800470c:	9905      	ldrle	r1, [sp, #20]
 800470e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004712:	9305      	strle	r3, [sp, #20]
 8004714:	e7e0      	b.n	80046d8 <_strtod_l+0x240>
 8004716:	2300      	movs	r3, #0
 8004718:	2201      	movs	r2, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	e77c      	b.n	8004618 <_strtod_l+0x180>
 800471e:	2700      	movs	r7, #0
 8004720:	1cb3      	adds	r3, r6, #2
 8004722:	931b      	str	r3, [sp, #108]	; 0x6c
 8004724:	78b3      	ldrb	r3, [r6, #2]
 8004726:	e784      	b.n	8004632 <_strtod_l+0x19a>
 8004728:	2701      	movs	r7, #1
 800472a:	e7f9      	b.n	8004720 <_strtod_l+0x288>
 800472c:	08007710 	.word	0x08007710
 8004730:	0800758c 	.word	0x0800758c
 8004734:	7ff00000 	.word	0x7ff00000
 8004738:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	911b      	str	r1, [sp, #108]	; 0x6c
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d0f9      	beq.n	8004738 <_strtod_l+0x2a0>
 8004744:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004748:	2908      	cmp	r1, #8
 800474a:	f63f af78 	bhi.w	800463e <_strtod_l+0x1a6>
 800474e:	f04f 0e0a 	mov.w	lr, #10
 8004752:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800475c:	1c59      	adds	r1, r3, #1
 800475e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004766:	2d09      	cmp	r5, #9
 8004768:	d935      	bls.n	80047d6 <_strtod_l+0x33e>
 800476a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800476c:	1b49      	subs	r1, r1, r5
 800476e:	2908      	cmp	r1, #8
 8004770:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004774:	dc02      	bgt.n	800477c <_strtod_l+0x2e4>
 8004776:	4565      	cmp	r5, ip
 8004778:	bfa8      	it	ge
 800477a:	4665      	movge	r5, ip
 800477c:	b107      	cbz	r7, 8004780 <_strtod_l+0x2e8>
 800477e:	426d      	negs	r5, r5
 8004780:	2c00      	cmp	r4, #0
 8004782:	d14c      	bne.n	800481e <_strtod_l+0x386>
 8004784:	9907      	ldr	r1, [sp, #28]
 8004786:	4301      	orrs	r1, r0
 8004788:	f47f aec7 	bne.w	800451a <_strtod_l+0x82>
 800478c:	2a00      	cmp	r2, #0
 800478e:	f47f aee0 	bne.w	8004552 <_strtod_l+0xba>
 8004792:	2b69      	cmp	r3, #105	; 0x69
 8004794:	d026      	beq.n	80047e4 <_strtod_l+0x34c>
 8004796:	dc23      	bgt.n	80047e0 <_strtod_l+0x348>
 8004798:	2b49      	cmp	r3, #73	; 0x49
 800479a:	d023      	beq.n	80047e4 <_strtod_l+0x34c>
 800479c:	2b4e      	cmp	r3, #78	; 0x4e
 800479e:	f47f aed8 	bne.w	8004552 <_strtod_l+0xba>
 80047a2:	499c      	ldr	r1, [pc, #624]	; (8004a14 <_strtod_l+0x57c>)
 80047a4:	a81b      	add	r0, sp, #108	; 0x6c
 80047a6:	f000 ffb9 	bl	800571c <__match>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	f43f aed1 	beq.w	8004552 <_strtod_l+0xba>
 80047b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b28      	cmp	r3, #40	; 0x28
 80047b6:	d12c      	bne.n	8004812 <_strtod_l+0x37a>
 80047b8:	4997      	ldr	r1, [pc, #604]	; (8004a18 <_strtod_l+0x580>)
 80047ba:	aa1e      	add	r2, sp, #120	; 0x78
 80047bc:	a81b      	add	r0, sp, #108	; 0x6c
 80047be:	f000 ffc1 	bl	8005744 <__hexnan>
 80047c2:	2805      	cmp	r0, #5
 80047c4:	d125      	bne.n	8004812 <_strtod_l+0x37a>
 80047c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80047cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80047d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80047d4:	e6a1      	b.n	800451a <_strtod_l+0x82>
 80047d6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80047da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80047de:	e7bc      	b.n	800475a <_strtod_l+0x2c2>
 80047e0:	2b6e      	cmp	r3, #110	; 0x6e
 80047e2:	e7dc      	b.n	800479e <_strtod_l+0x306>
 80047e4:	498d      	ldr	r1, [pc, #564]	; (8004a1c <_strtod_l+0x584>)
 80047e6:	a81b      	add	r0, sp, #108	; 0x6c
 80047e8:	f000 ff98 	bl	800571c <__match>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f43f aeb0 	beq.w	8004552 <_strtod_l+0xba>
 80047f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047f4:	498a      	ldr	r1, [pc, #552]	; (8004a20 <_strtod_l+0x588>)
 80047f6:	3b01      	subs	r3, #1
 80047f8:	a81b      	add	r0, sp, #108	; 0x6c
 80047fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80047fc:	f000 ff8e 	bl	800571c <__match>
 8004800:	b910      	cbnz	r0, 8004808 <_strtod_l+0x370>
 8004802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004804:	3301      	adds	r3, #1
 8004806:	931b      	str	r3, [sp, #108]	; 0x6c
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004a30 <_strtod_l+0x598>
 8004810:	e683      	b.n	800451a <_strtod_l+0x82>
 8004812:	4884      	ldr	r0, [pc, #528]	; (8004a24 <_strtod_l+0x58c>)
 8004814:	f002 fa10 	bl	8006c38 <nan>
 8004818:	4680      	mov	r8, r0
 800481a:	4689      	mov	r9, r1
 800481c:	e67d      	b.n	800451a <_strtod_l+0x82>
 800481e:	9b04      	ldr	r3, [sp, #16]
 8004820:	f1bb 0f00 	cmp.w	fp, #0
 8004824:	bf08      	it	eq
 8004826:	46a3      	moveq	fp, r4
 8004828:	1aeb      	subs	r3, r5, r3
 800482a:	2c10      	cmp	r4, #16
 800482c:	9806      	ldr	r0, [sp, #24]
 800482e:	4626      	mov	r6, r4
 8004830:	9307      	str	r3, [sp, #28]
 8004832:	bfa8      	it	ge
 8004834:	2610      	movge	r6, #16
 8004836:	f7fb fe89 	bl	800054c <__aeabi_ui2d>
 800483a:	2c09      	cmp	r4, #9
 800483c:	4680      	mov	r8, r0
 800483e:	4689      	mov	r9, r1
 8004840:	dd13      	ble.n	800486a <_strtod_l+0x3d2>
 8004842:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <_strtod_l+0x590>)
 8004844:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004848:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800484c:	f7fb fef8 	bl	8000640 <__aeabi_dmul>
 8004850:	4680      	mov	r8, r0
 8004852:	9805      	ldr	r0, [sp, #20]
 8004854:	4689      	mov	r9, r1
 8004856:	f7fb fe79 	bl	800054c <__aeabi_ui2d>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f7fb fd37 	bl	80002d4 <__adddf3>
 8004866:	4680      	mov	r8, r0
 8004868:	4689      	mov	r9, r1
 800486a:	2c0f      	cmp	r4, #15
 800486c:	dc36      	bgt.n	80048dc <_strtod_l+0x444>
 800486e:	9b07      	ldr	r3, [sp, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f43f ae52 	beq.w	800451a <_strtod_l+0x82>
 8004876:	dd22      	ble.n	80048be <_strtod_l+0x426>
 8004878:	2b16      	cmp	r3, #22
 800487a:	dc09      	bgt.n	8004890 <_strtod_l+0x3f8>
 800487c:	4c6a      	ldr	r4, [pc, #424]	; (8004a28 <_strtod_l+0x590>)
 800487e:	4642      	mov	r2, r8
 8004880:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004884:	464b      	mov	r3, r9
 8004886:	e9d4 0100 	ldrd	r0, r1, [r4]
 800488a:	f7fb fed9 	bl	8000640 <__aeabi_dmul>
 800488e:	e7c3      	b.n	8004818 <_strtod_l+0x380>
 8004890:	9a07      	ldr	r2, [sp, #28]
 8004892:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004896:	4293      	cmp	r3, r2
 8004898:	db20      	blt.n	80048dc <_strtod_l+0x444>
 800489a:	4d63      	ldr	r5, [pc, #396]	; (8004a28 <_strtod_l+0x590>)
 800489c:	f1c4 040f 	rsb	r4, r4, #15
 80048a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80048a4:	4642      	mov	r2, r8
 80048a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048aa:	464b      	mov	r3, r9
 80048ac:	f7fb fec8 	bl	8000640 <__aeabi_dmul>
 80048b0:	9b07      	ldr	r3, [sp, #28]
 80048b2:	1b1c      	subs	r4, r3, r4
 80048b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80048b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048bc:	e7e5      	b.n	800488a <_strtod_l+0x3f2>
 80048be:	9b07      	ldr	r3, [sp, #28]
 80048c0:	3316      	adds	r3, #22
 80048c2:	db0b      	blt.n	80048dc <_strtod_l+0x444>
 80048c4:	9b04      	ldr	r3, [sp, #16]
 80048c6:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <_strtod_l+0x590>)
 80048c8:	1b5d      	subs	r5, r3, r5
 80048ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80048ce:	4640      	mov	r0, r8
 80048d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048d4:	4649      	mov	r1, r9
 80048d6:	f7fb ffdd 	bl	8000894 <__aeabi_ddiv>
 80048da:	e79d      	b.n	8004818 <_strtod_l+0x380>
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	1ba6      	subs	r6, r4, r6
 80048e0:	441e      	add	r6, r3
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	dd71      	ble.n	80049ca <_strtod_l+0x532>
 80048e6:	f016 030f 	ands.w	r3, r6, #15
 80048ea:	d00a      	beq.n	8004902 <_strtod_l+0x46a>
 80048ec:	494e      	ldr	r1, [pc, #312]	; (8004a28 <_strtod_l+0x590>)
 80048ee:	4642      	mov	r2, r8
 80048f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048f8:	464b      	mov	r3, r9
 80048fa:	f7fb fea1 	bl	8000640 <__aeabi_dmul>
 80048fe:	4680      	mov	r8, r0
 8004900:	4689      	mov	r9, r1
 8004902:	f036 060f 	bics.w	r6, r6, #15
 8004906:	d050      	beq.n	80049aa <_strtod_l+0x512>
 8004908:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800490c:	dd27      	ble.n	800495e <_strtod_l+0x4c6>
 800490e:	f04f 0b00 	mov.w	fp, #0
 8004912:	f8cd b010 	str.w	fp, [sp, #16]
 8004916:	f8cd b020 	str.w	fp, [sp, #32]
 800491a:	f8cd b018 	str.w	fp, [sp, #24]
 800491e:	2322      	movs	r3, #34	; 0x22
 8004920:	f04f 0800 	mov.w	r8, #0
 8004924:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004a30 <_strtod_l+0x598>
 8004928:	f8ca 3000 	str.w	r3, [sl]
 800492c:	9b08      	ldr	r3, [sp, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f43f adf3 	beq.w	800451a <_strtod_l+0x82>
 8004934:	4650      	mov	r0, sl
 8004936:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004938:	f001 f808 	bl	800594c <_Bfree>
 800493c:	4650      	mov	r0, sl
 800493e:	9906      	ldr	r1, [sp, #24]
 8004940:	f001 f804 	bl	800594c <_Bfree>
 8004944:	4650      	mov	r0, sl
 8004946:	9904      	ldr	r1, [sp, #16]
 8004948:	f001 f800 	bl	800594c <_Bfree>
 800494c:	4650      	mov	r0, sl
 800494e:	9908      	ldr	r1, [sp, #32]
 8004950:	f000 fffc 	bl	800594c <_Bfree>
 8004954:	4659      	mov	r1, fp
 8004956:	4650      	mov	r0, sl
 8004958:	f000 fff8 	bl	800594c <_Bfree>
 800495c:	e5dd      	b.n	800451a <_strtod_l+0x82>
 800495e:	2300      	movs	r3, #0
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	461f      	mov	r7, r3
 8004966:	1136      	asrs	r6, r6, #4
 8004968:	2e01      	cmp	r6, #1
 800496a:	dc21      	bgt.n	80049b0 <_strtod_l+0x518>
 800496c:	b10b      	cbz	r3, 8004972 <_strtod_l+0x4da>
 800496e:	4680      	mov	r8, r0
 8004970:	4689      	mov	r9, r1
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <_strtod_l+0x594>)
 8004974:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004978:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800497c:	4642      	mov	r2, r8
 800497e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004982:	464b      	mov	r3, r9
 8004984:	f7fb fe5c 	bl	8000640 <__aeabi_dmul>
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <_strtod_l+0x598>)
 800498a:	460a      	mov	r2, r1
 800498c:	400b      	ands	r3, r1
 800498e:	4929      	ldr	r1, [pc, #164]	; (8004a34 <_strtod_l+0x59c>)
 8004990:	4680      	mov	r8, r0
 8004992:	428b      	cmp	r3, r1
 8004994:	d8bb      	bhi.n	800490e <_strtod_l+0x476>
 8004996:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800499a:	428b      	cmp	r3, r1
 800499c:	bf86      	itte	hi
 800499e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80049a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004a38 <_strtod_l+0x5a0>
 80049a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80049aa:	2300      	movs	r3, #0
 80049ac:	9305      	str	r3, [sp, #20]
 80049ae:	e07e      	b.n	8004aae <_strtod_l+0x616>
 80049b0:	07f2      	lsls	r2, r6, #31
 80049b2:	d507      	bpl.n	80049c4 <_strtod_l+0x52c>
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <_strtod_l+0x594>)
 80049b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fe3f 	bl	8000640 <__aeabi_dmul>
 80049c2:	2301      	movs	r3, #1
 80049c4:	3701      	adds	r7, #1
 80049c6:	1076      	asrs	r6, r6, #1
 80049c8:	e7ce      	b.n	8004968 <_strtod_l+0x4d0>
 80049ca:	d0ee      	beq.n	80049aa <_strtod_l+0x512>
 80049cc:	4276      	negs	r6, r6
 80049ce:	f016 020f 	ands.w	r2, r6, #15
 80049d2:	d00a      	beq.n	80049ea <_strtod_l+0x552>
 80049d4:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <_strtod_l+0x590>)
 80049d6:	4640      	mov	r0, r8
 80049d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049dc:	4649      	mov	r1, r9
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb ff57 	bl	8000894 <__aeabi_ddiv>
 80049e6:	4680      	mov	r8, r0
 80049e8:	4689      	mov	r9, r1
 80049ea:	1136      	asrs	r6, r6, #4
 80049ec:	d0dd      	beq.n	80049aa <_strtod_l+0x512>
 80049ee:	2e1f      	cmp	r6, #31
 80049f0:	dd24      	ble.n	8004a3c <_strtod_l+0x5a4>
 80049f2:	f04f 0b00 	mov.w	fp, #0
 80049f6:	f8cd b010 	str.w	fp, [sp, #16]
 80049fa:	f8cd b020 	str.w	fp, [sp, #32]
 80049fe:	f8cd b018 	str.w	fp, [sp, #24]
 8004a02:	2322      	movs	r3, #34	; 0x22
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	f04f 0900 	mov.w	r9, #0
 8004a0c:	f8ca 3000 	str.w	r3, [sl]
 8004a10:	e78c      	b.n	800492c <_strtod_l+0x494>
 8004a12:	bf00      	nop
 8004a14:	08007589 	.word	0x08007589
 8004a18:	080075a0 	.word	0x080075a0
 8004a1c:	08007580 	.word	0x08007580
 8004a20:	08007583 	.word	0x08007583
 8004a24:	08007693 	.word	0x08007693
 8004a28:	080077b0 	.word	0x080077b0
 8004a2c:	08007788 	.word	0x08007788
 8004a30:	7ff00000 	.word	0x7ff00000
 8004a34:	7ca00000 	.word	0x7ca00000
 8004a38:	7fefffff 	.word	0x7fefffff
 8004a3c:	f016 0310 	ands.w	r3, r6, #16
 8004a40:	bf18      	it	ne
 8004a42:	236a      	movne	r3, #106	; 0x6a
 8004a44:	4640      	mov	r0, r8
 8004a46:	9305      	str	r3, [sp, #20]
 8004a48:	4649      	mov	r1, r9
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4fb2      	ldr	r7, [pc, #712]	; (8004d18 <_strtod_l+0x880>)
 8004a4e:	07f2      	lsls	r2, r6, #31
 8004a50:	d504      	bpl.n	8004a5c <_strtod_l+0x5c4>
 8004a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a56:	f7fb fdf3 	bl	8000640 <__aeabi_dmul>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	1076      	asrs	r6, r6, #1
 8004a5e:	f107 0708 	add.w	r7, r7, #8
 8004a62:	d1f4      	bne.n	8004a4e <_strtod_l+0x5b6>
 8004a64:	b10b      	cbz	r3, 8004a6a <_strtod_l+0x5d2>
 8004a66:	4680      	mov	r8, r0
 8004a68:	4689      	mov	r9, r1
 8004a6a:	9b05      	ldr	r3, [sp, #20]
 8004a6c:	b1bb      	cbz	r3, 8004a9e <_strtod_l+0x606>
 8004a6e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	4649      	mov	r1, r9
 8004a7a:	dd10      	ble.n	8004a9e <_strtod_l+0x606>
 8004a7c:	2b1f      	cmp	r3, #31
 8004a7e:	f340 812b 	ble.w	8004cd8 <_strtod_l+0x840>
 8004a82:	2b34      	cmp	r3, #52	; 0x34
 8004a84:	bfd8      	it	le
 8004a86:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	bfcf      	iteee	gt
 8004a90:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004a94:	3b20      	suble	r3, #32
 8004a96:	fa02 f303 	lslle.w	r3, r2, r3
 8004a9a:	ea03 0901 	andle.w	r9, r3, r1
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	f7fc f833 	bl	8000b10 <__aeabi_dcmpeq>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d1a1      	bne.n	80049f2 <_strtod_l+0x55a>
 8004aae:	9b06      	ldr	r3, [sp, #24]
 8004ab0:	465a      	mov	r2, fp
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	9908      	ldr	r1, [sp, #32]
 8004aba:	f000 ffb3 	bl	8005a24 <__s2b>
 8004abe:	9008      	str	r0, [sp, #32]
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f43f af24 	beq.w	800490e <_strtod_l+0x476>
 8004ac6:	9b04      	ldr	r3, [sp, #16]
 8004ac8:	f04f 0b00 	mov.w	fp, #0
 8004acc:	1b5d      	subs	r5, r3, r5
 8004ace:	9b07      	ldr	r3, [sp, #28]
 8004ad0:	f8cd b010 	str.w	fp, [sp, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfb4      	ite	lt
 8004ad8:	462b      	movlt	r3, r5
 8004ada:	2300      	movge	r3, #0
 8004adc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ade:	9b07      	ldr	r3, [sp, #28]
 8004ae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ae4:	9316      	str	r3, [sp, #88]	; 0x58
 8004ae6:	9b08      	ldr	r3, [sp, #32]
 8004ae8:	4650      	mov	r0, sl
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	f000 feee 	bl	80058cc <_Balloc>
 8004af0:	9006      	str	r0, [sp, #24]
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f43f af13 	beq.w	800491e <_strtod_l+0x486>
 8004af8:	9b08      	ldr	r3, [sp, #32]
 8004afa:	300c      	adds	r0, #12
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	f103 010c 	add.w	r1, r3, #12
 8004b02:	3202      	adds	r2, #2
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	f000 fed3 	bl	80058b0 <memcpy>
 8004b0a:	ab1e      	add	r3, sp, #120	; 0x78
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4642      	mov	r2, r8
 8004b14:	464b      	mov	r3, r9
 8004b16:	4650      	mov	r0, sl
 8004b18:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004b1c:	f001 fac0 	bl	80060a0 <__d2b>
 8004b20:	901c      	str	r0, [sp, #112]	; 0x70
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f43f aefb 	beq.w	800491e <_strtod_l+0x486>
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4650      	mov	r0, sl
 8004b2c:	f001 f812 	bl	8005b54 <__i2b>
 8004b30:	4603      	mov	r3, r0
 8004b32:	9004      	str	r0, [sp, #16]
 8004b34:	2800      	cmp	r0, #0
 8004b36:	f43f aef2 	beq.w	800491e <_strtod_l+0x486>
 8004b3a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004b3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	bfab      	itete	ge
 8004b42:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b44:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b46:	18ee      	addge	r6, r5, r3
 8004b48:	1b5c      	sublt	r4, r3, r5
 8004b4a:	9b05      	ldr	r3, [sp, #20]
 8004b4c:	bfa8      	it	ge
 8004b4e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004b50:	eba5 0503 	sub.w	r5, r5, r3
 8004b54:	4415      	add	r5, r2
 8004b56:	4b71      	ldr	r3, [pc, #452]	; (8004d1c <_strtod_l+0x884>)
 8004b58:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004b5c:	bfb8      	it	lt
 8004b5e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b60:	429d      	cmp	r5, r3
 8004b62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b66:	f280 80c9 	bge.w	8004cfc <_strtod_l+0x864>
 8004b6a:	1b5b      	subs	r3, r3, r5
 8004b6c:	2b1f      	cmp	r3, #31
 8004b6e:	f04f 0701 	mov.w	r7, #1
 8004b72:	eba2 0203 	sub.w	r2, r2, r3
 8004b76:	f300 80b6 	bgt.w	8004ce6 <_strtod_l+0x84e>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	fa07 f303 	lsl.w	r3, r7, r3
 8004b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b82:	18b7      	adds	r7, r6, r2
 8004b84:	9b05      	ldr	r3, [sp, #20]
 8004b86:	42be      	cmp	r6, r7
 8004b88:	4414      	add	r4, r2
 8004b8a:	441c      	add	r4, r3
 8004b8c:	4633      	mov	r3, r6
 8004b8e:	bfa8      	it	ge
 8004b90:	463b      	movge	r3, r7
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	bfa8      	it	ge
 8004b96:	4623      	movge	r3, r4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bfc2      	ittt	gt
 8004b9c:	1aff      	subgt	r7, r7, r3
 8004b9e:	1ae4      	subgt	r4, r4, r3
 8004ba0:	1af6      	subgt	r6, r6, r3
 8004ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dd17      	ble.n	8004bd8 <_strtod_l+0x740>
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4650      	mov	r0, sl
 8004bac:	9904      	ldr	r1, [sp, #16]
 8004bae:	f001 f88b 	bl	8005cc8 <__pow5mult>
 8004bb2:	9004      	str	r0, [sp, #16]
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	f43f aeb2 	beq.w	800491e <_strtod_l+0x486>
 8004bba:	4601      	mov	r1, r0
 8004bbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	f000 ffde 	bl	8005b80 <__multiply>
 8004bc4:	9009      	str	r0, [sp, #36]	; 0x24
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f43f aea9 	beq.w	800491e <_strtod_l+0x486>
 8004bcc:	4650      	mov	r0, sl
 8004bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004bd0:	f000 febc 	bl	800594c <_Bfree>
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	931c      	str	r3, [sp, #112]	; 0x70
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	f300 8093 	bgt.w	8004d04 <_strtod_l+0x86c>
 8004bde:	9b07      	ldr	r3, [sp, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	dd08      	ble.n	8004bf6 <_strtod_l+0x75e>
 8004be4:	4650      	mov	r0, sl
 8004be6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004be8:	9906      	ldr	r1, [sp, #24]
 8004bea:	f001 f86d 	bl	8005cc8 <__pow5mult>
 8004bee:	9006      	str	r0, [sp, #24]
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f43f ae94 	beq.w	800491e <_strtod_l+0x486>
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	dd08      	ble.n	8004c0c <_strtod_l+0x774>
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	9906      	ldr	r1, [sp, #24]
 8004c00:	f001 f8bc 	bl	8005d7c <__lshift>
 8004c04:	9006      	str	r0, [sp, #24]
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f ae89 	beq.w	800491e <_strtod_l+0x486>
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	dd08      	ble.n	8004c22 <_strtod_l+0x78a>
 8004c10:	4632      	mov	r2, r6
 8004c12:	4650      	mov	r0, sl
 8004c14:	9904      	ldr	r1, [sp, #16]
 8004c16:	f001 f8b1 	bl	8005d7c <__lshift>
 8004c1a:	9004      	str	r0, [sp, #16]
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f43f ae7e 	beq.w	800491e <_strtod_l+0x486>
 8004c22:	4650      	mov	r0, sl
 8004c24:	9a06      	ldr	r2, [sp, #24]
 8004c26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c28:	f001 f930 	bl	8005e8c <__mdiff>
 8004c2c:	4683      	mov	fp, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f43f ae75 	beq.w	800491e <_strtod_l+0x486>
 8004c34:	2400      	movs	r4, #0
 8004c36:	68c3      	ldr	r3, [r0, #12]
 8004c38:	9904      	ldr	r1, [sp, #16]
 8004c3a:	60c4      	str	r4, [r0, #12]
 8004c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8004c3e:	f001 f909 	bl	8005e54 <__mcmp>
 8004c42:	42a0      	cmp	r0, r4
 8004c44:	da70      	bge.n	8004d28 <_strtod_l+0x890>
 8004c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c48:	ea53 0308 	orrs.w	r3, r3, r8
 8004c4c:	f040 8096 	bne.w	8004d7c <_strtod_l+0x8e4>
 8004c50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8091 	bne.w	8004d7c <_strtod_l+0x8e4>
 8004c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c5e:	0d1b      	lsrs	r3, r3, #20
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c66:	f240 8089 	bls.w	8004d7c <_strtod_l+0x8e4>
 8004c6a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004c6e:	b923      	cbnz	r3, 8004c7a <_strtod_l+0x7e2>
 8004c70:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f340 8081 	ble.w	8004d7c <_strtod_l+0x8e4>
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4650      	mov	r0, sl
 8004c80:	f001 f87c 	bl	8005d7c <__lshift>
 8004c84:	9904      	ldr	r1, [sp, #16]
 8004c86:	4683      	mov	fp, r0
 8004c88:	f001 f8e4 	bl	8005e54 <__mcmp>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	dd75      	ble.n	8004d7c <_strtod_l+0x8e4>
 8004c90:	9905      	ldr	r1, [sp, #20]
 8004c92:	464b      	mov	r3, r9
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <_strtod_l+0x888>)
 8004c96:	2900      	cmp	r1, #0
 8004c98:	f000 8091 	beq.w	8004dbe <_strtod_l+0x926>
 8004c9c:	ea02 0109 	and.w	r1, r2, r9
 8004ca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ca4:	f300 808b 	bgt.w	8004dbe <_strtod_l+0x926>
 8004ca8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004cac:	f77f aea9 	ble.w	8004a02 <_strtod_l+0x56a>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <_strtod_l+0x88c>)
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004cba:	4649      	mov	r1, r9
 8004cbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004cc0:	f7fb fcbe 	bl	8000640 <__aeabi_dmul>
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4303      	orrs	r3, r0
 8004cc8:	bf08      	it	eq
 8004cca:	2322      	moveq	r3, #34	; 0x22
 8004ccc:	4680      	mov	r8, r0
 8004cce:	4689      	mov	r9, r1
 8004cd0:	bf08      	it	eq
 8004cd2:	f8ca 3000 	streq.w	r3, [sl]
 8004cd6:	e62d      	b.n	8004934 <_strtod_l+0x49c>
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	ea03 0808 	and.w	r8, r3, r8
 8004ce4:	e6db      	b.n	8004a9e <_strtod_l+0x606>
 8004ce6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004cea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004cee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004cf2:	35e2      	adds	r5, #226	; 0xe2
 8004cf4:	fa07 f505 	lsl.w	r5, r7, r5
 8004cf8:	970f      	str	r7, [sp, #60]	; 0x3c
 8004cfa:	e742      	b.n	8004b82 <_strtod_l+0x6ea>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	2500      	movs	r5, #0
 8004d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d02:	e73e      	b.n	8004b82 <_strtod_l+0x6ea>
 8004d04:	463a      	mov	r2, r7
 8004d06:	4650      	mov	r0, sl
 8004d08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d0a:	f001 f837 	bl	8005d7c <__lshift>
 8004d0e:	901c      	str	r0, [sp, #112]	; 0x70
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f47f af64 	bne.w	8004bde <_strtod_l+0x746>
 8004d16:	e602      	b.n	800491e <_strtod_l+0x486>
 8004d18:	080075b8 	.word	0x080075b8
 8004d1c:	fffffc02 	.word	0xfffffc02
 8004d20:	7ff00000 	.word	0x7ff00000
 8004d24:	39500000 	.word	0x39500000
 8004d28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d2c:	d166      	bne.n	8004dfc <_strtod_l+0x964>
 8004d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d34:	b35a      	cbz	r2, 8004d8e <_strtod_l+0x8f6>
 8004d36:	4a9c      	ldr	r2, [pc, #624]	; (8004fa8 <_strtod_l+0xb10>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d12c      	bne.n	8004d96 <_strtod_l+0x8fe>
 8004d3c:	9b05      	ldr	r3, [sp, #20]
 8004d3e:	4640      	mov	r0, r8
 8004d40:	b303      	cbz	r3, 8004d84 <_strtod_l+0x8ec>
 8004d42:	464b      	mov	r3, r9
 8004d44:	4a99      	ldr	r2, [pc, #612]	; (8004fac <_strtod_l+0xb14>)
 8004d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004d50:	d81b      	bhi.n	8004d8a <_strtod_l+0x8f2>
 8004d52:	0d12      	lsrs	r2, r2, #20
 8004d54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	d11a      	bne.n	8004d96 <_strtod_l+0x8fe>
 8004d60:	4b93      	ldr	r3, [pc, #588]	; (8004fb0 <_strtod_l+0xb18>)
 8004d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d102      	bne.n	8004d6e <_strtod_l+0x8d6>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f add8 	beq.w	800491e <_strtod_l+0x486>
 8004d6e:	f04f 0800 	mov.w	r8, #0
 8004d72:	4b8e      	ldr	r3, [pc, #568]	; (8004fac <_strtod_l+0xb14>)
 8004d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d76:	401a      	ands	r2, r3
 8004d78:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004d7c:	9b05      	ldr	r3, [sp, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d196      	bne.n	8004cb0 <_strtod_l+0x818>
 8004d82:	e5d7      	b.n	8004934 <_strtod_l+0x49c>
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d88:	e7e8      	b.n	8004d5c <_strtod_l+0x8c4>
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	e7e6      	b.n	8004d5c <_strtod_l+0x8c4>
 8004d8e:	ea53 0308 	orrs.w	r3, r3, r8
 8004d92:	f43f af7d 	beq.w	8004c90 <_strtod_l+0x7f8>
 8004d96:	b1e5      	cbz	r5, 8004dd2 <_strtod_l+0x93a>
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	421d      	tst	r5, r3
 8004d9c:	d0ee      	beq.n	8004d7c <_strtod_l+0x8e4>
 8004d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	9a05      	ldr	r2, [sp, #20]
 8004da6:	b1c3      	cbz	r3, 8004dda <_strtod_l+0x942>
 8004da8:	f7ff fb54 	bl	8004454 <sulp>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db4:	f7fb fa8e 	bl	80002d4 <__adddf3>
 8004db8:	4680      	mov	r8, r0
 8004dba:	4689      	mov	r9, r1
 8004dbc:	e7de      	b.n	8004d7c <_strtod_l+0x8e4>
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004dc4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004dc8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004dcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004dd0:	e7d4      	b.n	8004d7c <_strtod_l+0x8e4>
 8004dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dd4:	ea13 0f08 	tst.w	r3, r8
 8004dd8:	e7e0      	b.n	8004d9c <_strtod_l+0x904>
 8004dda:	f7ff fb3b 	bl	8004454 <sulp>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004de6:	f7fb fa73 	bl	80002d0 <__aeabi_dsub>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4680      	mov	r8, r0
 8004df0:	4689      	mov	r9, r1
 8004df2:	f7fb fe8d 	bl	8000b10 <__aeabi_dcmpeq>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0c0      	beq.n	8004d7c <_strtod_l+0x8e4>
 8004dfa:	e602      	b.n	8004a02 <_strtod_l+0x56a>
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	9904      	ldr	r1, [sp, #16]
 8004e00:	f001 f9aa 	bl	8006158 <__ratio>
 8004e04:	2200      	movs	r2, #0
 8004e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460f      	mov	r7, r1
 8004e0e:	f7fb fe93 	bl	8000b38 <__aeabi_dcmple>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d075      	beq.n	8004f02 <_strtod_l+0xa6a>
 8004e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d047      	beq.n	8004eac <_strtod_l+0xa14>
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	4f65      	ldr	r7, [pc, #404]	; (8004fb4 <_strtod_l+0xb1c>)
 8004e20:	4d64      	ldr	r5, [pc, #400]	; (8004fb4 <_strtod_l+0xb1c>)
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e28:	0d1b      	lsrs	r3, r3, #20
 8004e2a:	051b      	lsls	r3, r3, #20
 8004e2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e30:	4b61      	ldr	r3, [pc, #388]	; (8004fb8 <_strtod_l+0xb20>)
 8004e32:	429a      	cmp	r2, r3
 8004e34:	f040 80c8 	bne.w	8004fc8 <_strtod_l+0xb30>
 8004e38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e42:	4640      	mov	r0, r8
 8004e44:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004e48:	4649      	mov	r1, r9
 8004e4a:	f001 f8af 	bl	8005fac <__ulp>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7fb fbf3 	bl	8000640 <__aeabi_dmul>
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	f7fb fa39 	bl	80002d4 <__adddf3>
 8004e62:	460b      	mov	r3, r1
 8004e64:	4951      	ldr	r1, [pc, #324]	; (8004fac <_strtod_l+0xb14>)
 8004e66:	4a55      	ldr	r2, [pc, #340]	; (8004fbc <_strtod_l+0xb24>)
 8004e68:	4019      	ands	r1, r3
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	d95e      	bls.n	8004f2e <_strtod_l+0xa96>
 8004e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d103      	bne.n	8004e82 <_strtod_l+0x9ea>
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f43f ad4e 	beq.w	800491e <_strtod_l+0x486>
 8004e82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004e86:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004fb0 <_strtod_l+0xb18>
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e8e:	f000 fd5d 	bl	800594c <_Bfree>
 8004e92:	4650      	mov	r0, sl
 8004e94:	9906      	ldr	r1, [sp, #24]
 8004e96:	f000 fd59 	bl	800594c <_Bfree>
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	9904      	ldr	r1, [sp, #16]
 8004e9e:	f000 fd55 	bl	800594c <_Bfree>
 8004ea2:	4659      	mov	r1, fp
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f000 fd51 	bl	800594c <_Bfree>
 8004eaa:	e61c      	b.n	8004ae6 <_strtod_l+0x64e>
 8004eac:	f1b8 0f00 	cmp.w	r8, #0
 8004eb0:	d119      	bne.n	8004ee6 <_strtod_l+0xa4e>
 8004eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb8:	b9e3      	cbnz	r3, 8004ef4 <_strtod_l+0xa5c>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	4b3c      	ldr	r3, [pc, #240]	; (8004fb4 <_strtod_l+0xb1c>)
 8004ec2:	f7fb fe2f 	bl	8000b24 <__aeabi_dcmplt>
 8004ec6:	b9c8      	cbnz	r0, 8004efc <_strtod_l+0xa64>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4b3c      	ldr	r3, [pc, #240]	; (8004fc0 <_strtod_l+0xb28>)
 8004ed0:	f7fb fbb6 	bl	8000640 <__aeabi_dmul>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004edc:	9418      	str	r4, [sp, #96]	; 0x60
 8004ede:	9319      	str	r3, [sp, #100]	; 0x64
 8004ee0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004ee4:	e79d      	b.n	8004e22 <_strtod_l+0x98a>
 8004ee6:	f1b8 0f01 	cmp.w	r8, #1
 8004eea:	d103      	bne.n	8004ef4 <_strtod_l+0xa5c>
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f43f ad87 	beq.w	8004a02 <_strtod_l+0x56a>
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	2400      	movs	r4, #0
 8004ef8:	4f32      	ldr	r7, [pc, #200]	; (8004fc4 <_strtod_l+0xb2c>)
 8004efa:	e791      	b.n	8004e20 <_strtod_l+0x988>
 8004efc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004efe:	4d30      	ldr	r5, [pc, #192]	; (8004fc0 <_strtod_l+0xb28>)
 8004f00:	e7ea      	b.n	8004ed8 <_strtod_l+0xa40>
 8004f02:	4b2f      	ldr	r3, [pc, #188]	; (8004fc0 <_strtod_l+0xb28>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb fb99 	bl	8000640 <__aeabi_dmul>
 8004f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f10:	4604      	mov	r4, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	b933      	cbnz	r3, 8004f24 <_strtod_l+0xa8c>
 8004f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f1a:	9010      	str	r0, [sp, #64]	; 0x40
 8004f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8004f1e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f22:	e77e      	b.n	8004e22 <_strtod_l+0x98a>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004f2c:	e7f7      	b.n	8004f1e <_strtod_l+0xa86>
 8004f2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1a8      	bne.n	8004e8a <_strtod_l+0x9f2>
 8004f38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f3e:	0d1b      	lsrs	r3, r3, #20
 8004f40:	051b      	lsls	r3, r3, #20
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d1a1      	bne.n	8004e8a <_strtod_l+0x9f2>
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fc f82d 	bl	8000fa8 <__aeabi_d2lz>
 8004f4e:	f7fb fb49 	bl	80005e4 <__aeabi_l2d>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb f9b9 	bl	80002d0 <__aeabi_dsub>
 8004f5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f64:	ea43 0308 	orr.w	r3, r3, r8
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	d066      	beq.n	800503e <_strtod_l+0xba6>
 8004f70:	a309      	add	r3, pc, #36	; (adr r3, 8004f98 <_strtod_l+0xb00>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fdd5 	bl	8000b24 <__aeabi_dcmplt>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f47f acda 	bne.w	8004934 <_strtod_l+0x49c>
 8004f80:	a307      	add	r3, pc, #28	; (adr r3, 8004fa0 <_strtod_l+0xb08>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7fb fde9 	bl	8000b60 <__aeabi_dcmpgt>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f43f af7b 	beq.w	8004e8a <_strtod_l+0x9f2>
 8004f94:	e4ce      	b.n	8004934 <_strtod_l+0x49c>
 8004f96:	bf00      	nop
 8004f98:	94a03595 	.word	0x94a03595
 8004f9c:	3fdfffff 	.word	0x3fdfffff
 8004fa0:	35afe535 	.word	0x35afe535
 8004fa4:	3fe00000 	.word	0x3fe00000
 8004fa8:	000fffff 	.word	0x000fffff
 8004fac:	7ff00000 	.word	0x7ff00000
 8004fb0:	7fefffff 	.word	0x7fefffff
 8004fb4:	3ff00000 	.word	0x3ff00000
 8004fb8:	7fe00000 	.word	0x7fe00000
 8004fbc:	7c9fffff 	.word	0x7c9fffff
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	bff00000 	.word	0xbff00000
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	b313      	cbz	r3, 8005012 <_strtod_l+0xb7a>
 8004fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fd2:	d81e      	bhi.n	8005012 <_strtod_l+0xb7a>
 8004fd4:	a326      	add	r3, pc, #152	; (adr r3, 8005070 <_strtod_l+0xbd8>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	4620      	mov	r0, r4
 8004fdc:	4629      	mov	r1, r5
 8004fde:	f7fb fdab 	bl	8000b38 <__aeabi_dcmple>
 8004fe2:	b190      	cbz	r0, 800500a <_strtod_l+0xb72>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7fb fdc4 	bl	8000b74 <__aeabi_d2uiz>
 8004fec:	2801      	cmp	r0, #1
 8004fee:	bf38      	it	cc
 8004ff0:	2001      	movcc	r0, #1
 8004ff2:	f7fb faab 	bl	800054c <__aeabi_ui2d>
 8004ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	b9d3      	cbnz	r3, 8005034 <_strtod_l+0xb9c>
 8004ffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005002:	9012      	str	r0, [sp, #72]	; 0x48
 8005004:	9313      	str	r3, [sp, #76]	; 0x4c
 8005006:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800500a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800500c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005010:	1a9f      	subs	r7, r3, r2
 8005012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005016:	f000 ffc9 	bl	8005fac <__ulp>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4630      	mov	r0, r6
 8005020:	4639      	mov	r1, r7
 8005022:	f7fb fb0d 	bl	8000640 <__aeabi_dmul>
 8005026:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800502a:	f7fb f953 	bl	80002d4 <__adddf3>
 800502e:	4680      	mov	r8, r0
 8005030:	4689      	mov	r9, r1
 8005032:	e77e      	b.n	8004f32 <_strtod_l+0xa9a>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800503c:	e7e3      	b.n	8005006 <_strtod_l+0xb6e>
 800503e:	a30e      	add	r3, pc, #56	; (adr r3, 8005078 <_strtod_l+0xbe0>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fd6e 	bl	8000b24 <__aeabi_dcmplt>
 8005048:	e7a1      	b.n	8004f8e <_strtod_l+0xaf6>
 800504a:	2300      	movs	r3, #0
 800504c:	930c      	str	r3, [sp, #48]	; 0x30
 800504e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005050:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	f7ff ba65 	b.w	8004522 <_strtod_l+0x8a>
 8005058:	2b65      	cmp	r3, #101	; 0x65
 800505a:	f43f ab5c 	beq.w	8004716 <_strtod_l+0x27e>
 800505e:	2b45      	cmp	r3, #69	; 0x45
 8005060:	f43f ab59 	beq.w	8004716 <_strtod_l+0x27e>
 8005064:	2201      	movs	r2, #1
 8005066:	f7ff bb8d 	b.w	8004784 <_strtod_l+0x2ec>
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
 8005070:	ffc00000 	.word	0xffc00000
 8005074:	41dfffff 	.word	0x41dfffff
 8005078:	94a03595 	.word	0x94a03595
 800507c:	3fcfffff 	.word	0x3fcfffff

08005080 <strtod>:
 8005080:	460a      	mov	r2, r1
 8005082:	4601      	mov	r1, r0
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <strtod+0x10>)
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <strtod+0x14>)
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f7ff ba05 	b.w	8004498 <_strtod_l>
 800508e:	bf00      	nop
 8005090:	2000000c 	.word	0x2000000c
 8005094:	20000074 	.word	0x20000074

08005098 <strtok>:
 8005098:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <strtok+0x5c>)
 800509a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509e:	681f      	ldr	r7, [r3, #0]
 80050a0:	4605      	mov	r5, r0
 80050a2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80050a4:	460e      	mov	r6, r1
 80050a6:	b9ec      	cbnz	r4, 80050e4 <strtok+0x4c>
 80050a8:	2050      	movs	r0, #80	; 0x50
 80050aa:	f000 fbe7 	bl	800587c <malloc>
 80050ae:	4602      	mov	r2, r0
 80050b0:	65b8      	str	r0, [r7, #88]	; 0x58
 80050b2:	b920      	cbnz	r0, 80050be <strtok+0x26>
 80050b4:	2157      	movs	r1, #87	; 0x57
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <strtok+0x60>)
 80050b8:	4810      	ldr	r0, [pc, #64]	; (80050fc <strtok+0x64>)
 80050ba:	f000 f849 	bl	8005150 <__assert_func>
 80050be:	e9c0 4400 	strd	r4, r4, [r0]
 80050c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80050c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80050ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80050ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80050d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80050d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80050da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80050de:	6184      	str	r4, [r0, #24]
 80050e0:	7704      	strb	r4, [r0, #28]
 80050e2:	6244      	str	r4, [r0, #36]	; 0x24
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ea:	2301      	movs	r3, #1
 80050ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050f0:	f000 b806 	b.w	8005100 <__strtok_r>
 80050f4:	2000000c 	.word	0x2000000c
 80050f8:	080075e0 	.word	0x080075e0
 80050fc:	080075f7 	.word	0x080075f7

08005100 <__strtok_r>:
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	b908      	cbnz	r0, 8005108 <__strtok_r+0x8>
 8005104:	6810      	ldr	r0, [r2, #0]
 8005106:	b188      	cbz	r0, 800512c <__strtok_r+0x2c>
 8005108:	4604      	mov	r4, r0
 800510a:	460f      	mov	r7, r1
 800510c:	4620      	mov	r0, r4
 800510e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005112:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005116:	b91e      	cbnz	r6, 8005120 <__strtok_r+0x20>
 8005118:	b965      	cbnz	r5, 8005134 <__strtok_r+0x34>
 800511a:	4628      	mov	r0, r5
 800511c:	6015      	str	r5, [r2, #0]
 800511e:	e005      	b.n	800512c <__strtok_r+0x2c>
 8005120:	42b5      	cmp	r5, r6
 8005122:	d1f6      	bne.n	8005112 <__strtok_r+0x12>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <__strtok_r+0xa>
 8005128:	6014      	str	r4, [r2, #0]
 800512a:	7003      	strb	r3, [r0, #0]
 800512c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800512e:	461c      	mov	r4, r3
 8005130:	e00c      	b.n	800514c <__strtok_r+0x4c>
 8005132:	b915      	cbnz	r5, 800513a <__strtok_r+0x3a>
 8005134:	460e      	mov	r6, r1
 8005136:	f814 3b01 	ldrb.w	r3, [r4], #1
 800513a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800513e:	42ab      	cmp	r3, r5
 8005140:	d1f7      	bne.n	8005132 <__strtok_r+0x32>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f3      	beq.n	800512e <__strtok_r+0x2e>
 8005146:	2300      	movs	r3, #0
 8005148:	f804 3c01 	strb.w	r3, [r4, #-1]
 800514c:	6014      	str	r4, [r2, #0]
 800514e:	e7ed      	b.n	800512c <__strtok_r+0x2c>

08005150 <__assert_func>:
 8005150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005152:	4614      	mov	r4, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <__assert_func+0x2c>)
 8005158:	4605      	mov	r5, r0
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68d8      	ldr	r0, [r3, #12]
 800515e:	b14c      	cbz	r4, 8005174 <__assert_func+0x24>
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <__assert_func+0x30>)
 8005162:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005166:	9100      	str	r1, [sp, #0]
 8005168:	462b      	mov	r3, r5
 800516a:	4906      	ldr	r1, [pc, #24]	; (8005184 <__assert_func+0x34>)
 800516c:	f000 f80e 	bl	800518c <fiprintf>
 8005170:	f001 fe58 	bl	8006e24 <abort>
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <__assert_func+0x38>)
 8005176:	461c      	mov	r4, r3
 8005178:	e7f3      	b.n	8005162 <__assert_func+0x12>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	08007658 	.word	0x08007658
 8005184:	08007665 	.word	0x08007665
 8005188:	08007693 	.word	0x08007693

0800518c <fiprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b503      	push	{r0, r1, lr}
 8005190:	4601      	mov	r1, r0
 8005192:	ab03      	add	r3, sp, #12
 8005194:	4805      	ldr	r0, [pc, #20]	; (80051ac <fiprintf+0x20>)
 8005196:	f853 2b04 	ldr.w	r2, [r3], #4
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	f001 fa85 	bl	80066ac <_vfiprintf_r>
 80051a2:	b002      	add	sp, #8
 80051a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a8:	b003      	add	sp, #12
 80051aa:	4770      	bx	lr
 80051ac:	2000000c 	.word	0x2000000c

080051b0 <rshift>:
 80051b0:	6903      	ldr	r3, [r0, #16]
 80051b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80051ba:	f100 0414 	add.w	r4, r0, #20
 80051be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80051c2:	dd46      	ble.n	8005252 <rshift+0xa2>
 80051c4:	f011 011f 	ands.w	r1, r1, #31
 80051c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80051cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80051d0:	d10c      	bne.n	80051ec <rshift+0x3c>
 80051d2:	4629      	mov	r1, r5
 80051d4:	f100 0710 	add.w	r7, r0, #16
 80051d8:	42b1      	cmp	r1, r6
 80051da:	d335      	bcc.n	8005248 <rshift+0x98>
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	1eea      	subs	r2, r5, #3
 80051e2:	4296      	cmp	r6, r2
 80051e4:	bf38      	it	cc
 80051e6:	2300      	movcc	r3, #0
 80051e8:	4423      	add	r3, r4
 80051ea:	e015      	b.n	8005218 <rshift+0x68>
 80051ec:	46a1      	mov	r9, r4
 80051ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80051f2:	f1c1 0820 	rsb	r8, r1, #32
 80051f6:	40cf      	lsrs	r7, r1
 80051f8:	f105 0e04 	add.w	lr, r5, #4
 80051fc:	4576      	cmp	r6, lr
 80051fe:	46f4      	mov	ip, lr
 8005200:	d816      	bhi.n	8005230 <rshift+0x80>
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009a      	lsls	r2, r3, #2
 8005206:	3a04      	subs	r2, #4
 8005208:	3501      	adds	r5, #1
 800520a:	42ae      	cmp	r6, r5
 800520c:	bf38      	it	cc
 800520e:	2200      	movcc	r2, #0
 8005210:	18a3      	adds	r3, r4, r2
 8005212:	50a7      	str	r7, [r4, r2]
 8005214:	b107      	cbz	r7, 8005218 <rshift+0x68>
 8005216:	3304      	adds	r3, #4
 8005218:	42a3      	cmp	r3, r4
 800521a:	eba3 0204 	sub.w	r2, r3, r4
 800521e:	bf08      	it	eq
 8005220:	2300      	moveq	r3, #0
 8005222:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005226:	6102      	str	r2, [r0, #16]
 8005228:	bf08      	it	eq
 800522a:	6143      	streq	r3, [r0, #20]
 800522c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005230:	f8dc c000 	ldr.w	ip, [ip]
 8005234:	fa0c fc08 	lsl.w	ip, ip, r8
 8005238:	ea4c 0707 	orr.w	r7, ip, r7
 800523c:	f849 7b04 	str.w	r7, [r9], #4
 8005240:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005244:	40cf      	lsrs	r7, r1
 8005246:	e7d9      	b.n	80051fc <rshift+0x4c>
 8005248:	f851 cb04 	ldr.w	ip, [r1], #4
 800524c:	f847 cf04 	str.w	ip, [r7, #4]!
 8005250:	e7c2      	b.n	80051d8 <rshift+0x28>
 8005252:	4623      	mov	r3, r4
 8005254:	e7e0      	b.n	8005218 <rshift+0x68>

08005256 <__hexdig_fun>:
 8005256:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800525a:	2b09      	cmp	r3, #9
 800525c:	d802      	bhi.n	8005264 <__hexdig_fun+0xe>
 800525e:	3820      	subs	r0, #32
 8005260:	b2c0      	uxtb	r0, r0
 8005262:	4770      	bx	lr
 8005264:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005268:	2b05      	cmp	r3, #5
 800526a:	d801      	bhi.n	8005270 <__hexdig_fun+0x1a>
 800526c:	3847      	subs	r0, #71	; 0x47
 800526e:	e7f7      	b.n	8005260 <__hexdig_fun+0xa>
 8005270:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005274:	2b05      	cmp	r3, #5
 8005276:	d801      	bhi.n	800527c <__hexdig_fun+0x26>
 8005278:	3827      	subs	r0, #39	; 0x27
 800527a:	e7f1      	b.n	8005260 <__hexdig_fun+0xa>
 800527c:	2000      	movs	r0, #0
 800527e:	4770      	bx	lr

08005280 <__gethex>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	b08b      	sub	sp, #44	; 0x2c
 8005286:	9306      	str	r3, [sp, #24]
 8005288:	4bb9      	ldr	r3, [pc, #740]	; (8005570 <__gethex+0x2f0>)
 800528a:	9002      	str	r0, [sp, #8]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	468b      	mov	fp, r1
 8005290:	4618      	mov	r0, r3
 8005292:	4690      	mov	r8, r2
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	f7fa ff5b 	bl	8000150 <strlen>
 800529a:	4682      	mov	sl, r0
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	f8db 2000 	ldr.w	r2, [fp]
 80052a2:	4403      	add	r3, r0
 80052a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80052a8:	9307      	str	r3, [sp, #28]
 80052aa:	1c93      	adds	r3, r2, #2
 80052ac:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80052b0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80052b4:	32fe      	adds	r2, #254	; 0xfe
 80052b6:	18d1      	adds	r1, r2, r3
 80052b8:	461f      	mov	r7, r3
 80052ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052be:	9101      	str	r1, [sp, #4]
 80052c0:	2830      	cmp	r0, #48	; 0x30
 80052c2:	d0f8      	beq.n	80052b6 <__gethex+0x36>
 80052c4:	f7ff ffc7 	bl	8005256 <__hexdig_fun>
 80052c8:	4604      	mov	r4, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d13a      	bne.n	8005344 <__gethex+0xc4>
 80052ce:	4652      	mov	r2, sl
 80052d0:	4638      	mov	r0, r7
 80052d2:	9903      	ldr	r1, [sp, #12]
 80052d4:	f001 fcc6 	bl	8006c64 <strncmp>
 80052d8:	4605      	mov	r5, r0
 80052da:	2800      	cmp	r0, #0
 80052dc:	d166      	bne.n	80053ac <__gethex+0x12c>
 80052de:	f817 000a 	ldrb.w	r0, [r7, sl]
 80052e2:	eb07 060a 	add.w	r6, r7, sl
 80052e6:	f7ff ffb6 	bl	8005256 <__hexdig_fun>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d060      	beq.n	80053b0 <__gethex+0x130>
 80052ee:	4633      	mov	r3, r6
 80052f0:	7818      	ldrb	r0, [r3, #0]
 80052f2:	461f      	mov	r7, r3
 80052f4:	2830      	cmp	r0, #48	; 0x30
 80052f6:	f103 0301 	add.w	r3, r3, #1
 80052fa:	d0f9      	beq.n	80052f0 <__gethex+0x70>
 80052fc:	f7ff ffab 	bl	8005256 <__hexdig_fun>
 8005300:	2301      	movs	r3, #1
 8005302:	fab0 f480 	clz	r4, r0
 8005306:	4635      	mov	r5, r6
 8005308:	0964      	lsrs	r4, r4, #5
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	463a      	mov	r2, r7
 800530e:	4616      	mov	r6, r2
 8005310:	7830      	ldrb	r0, [r6, #0]
 8005312:	3201      	adds	r2, #1
 8005314:	f7ff ff9f 	bl	8005256 <__hexdig_fun>
 8005318:	2800      	cmp	r0, #0
 800531a:	d1f8      	bne.n	800530e <__gethex+0x8e>
 800531c:	4652      	mov	r2, sl
 800531e:	4630      	mov	r0, r6
 8005320:	9903      	ldr	r1, [sp, #12]
 8005322:	f001 fc9f 	bl	8006c64 <strncmp>
 8005326:	b980      	cbnz	r0, 800534a <__gethex+0xca>
 8005328:	b94d      	cbnz	r5, 800533e <__gethex+0xbe>
 800532a:	eb06 050a 	add.w	r5, r6, sl
 800532e:	462a      	mov	r2, r5
 8005330:	4616      	mov	r6, r2
 8005332:	7830      	ldrb	r0, [r6, #0]
 8005334:	3201      	adds	r2, #1
 8005336:	f7ff ff8e 	bl	8005256 <__hexdig_fun>
 800533a:	2800      	cmp	r0, #0
 800533c:	d1f8      	bne.n	8005330 <__gethex+0xb0>
 800533e:	1bad      	subs	r5, r5, r6
 8005340:	00ad      	lsls	r5, r5, #2
 8005342:	e004      	b.n	800534e <__gethex+0xce>
 8005344:	2400      	movs	r4, #0
 8005346:	4625      	mov	r5, r4
 8005348:	e7e0      	b.n	800530c <__gethex+0x8c>
 800534a:	2d00      	cmp	r5, #0
 800534c:	d1f7      	bne.n	800533e <__gethex+0xbe>
 800534e:	7833      	ldrb	r3, [r6, #0]
 8005350:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005354:	2b50      	cmp	r3, #80	; 0x50
 8005356:	d139      	bne.n	80053cc <__gethex+0x14c>
 8005358:	7873      	ldrb	r3, [r6, #1]
 800535a:	2b2b      	cmp	r3, #43	; 0x2b
 800535c:	d02a      	beq.n	80053b4 <__gethex+0x134>
 800535e:	2b2d      	cmp	r3, #45	; 0x2d
 8005360:	d02c      	beq.n	80053bc <__gethex+0x13c>
 8005362:	f04f 0900 	mov.w	r9, #0
 8005366:	1c71      	adds	r1, r6, #1
 8005368:	7808      	ldrb	r0, [r1, #0]
 800536a:	f7ff ff74 	bl	8005256 <__hexdig_fun>
 800536e:	1e43      	subs	r3, r0, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b18      	cmp	r3, #24
 8005374:	d82a      	bhi.n	80053cc <__gethex+0x14c>
 8005376:	f1a0 0210 	sub.w	r2, r0, #16
 800537a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800537e:	f7ff ff6a 	bl	8005256 <__hexdig_fun>
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b18      	cmp	r3, #24
 8005388:	d91b      	bls.n	80053c2 <__gethex+0x142>
 800538a:	f1b9 0f00 	cmp.w	r9, #0
 800538e:	d000      	beq.n	8005392 <__gethex+0x112>
 8005390:	4252      	negs	r2, r2
 8005392:	4415      	add	r5, r2
 8005394:	f8cb 1000 	str.w	r1, [fp]
 8005398:	b1d4      	cbz	r4, 80053d0 <__gethex+0x150>
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2700      	movne	r7, #0
 80053a2:	2706      	moveq	r7, #6
 80053a4:	4638      	mov	r0, r7
 80053a6:	b00b      	add	sp, #44	; 0x2c
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	463e      	mov	r6, r7
 80053ae:	4625      	mov	r5, r4
 80053b0:	2401      	movs	r4, #1
 80053b2:	e7cc      	b.n	800534e <__gethex+0xce>
 80053b4:	f04f 0900 	mov.w	r9, #0
 80053b8:	1cb1      	adds	r1, r6, #2
 80053ba:	e7d5      	b.n	8005368 <__gethex+0xe8>
 80053bc:	f04f 0901 	mov.w	r9, #1
 80053c0:	e7fa      	b.n	80053b8 <__gethex+0x138>
 80053c2:	230a      	movs	r3, #10
 80053c4:	fb03 0202 	mla	r2, r3, r2, r0
 80053c8:	3a10      	subs	r2, #16
 80053ca:	e7d6      	b.n	800537a <__gethex+0xfa>
 80053cc:	4631      	mov	r1, r6
 80053ce:	e7e1      	b.n	8005394 <__gethex+0x114>
 80053d0:	4621      	mov	r1, r4
 80053d2:	1bf3      	subs	r3, r6, r7
 80053d4:	3b01      	subs	r3, #1
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	dc0a      	bgt.n	80053f0 <__gethex+0x170>
 80053da:	9802      	ldr	r0, [sp, #8]
 80053dc:	f000 fa76 	bl	80058cc <_Balloc>
 80053e0:	4604      	mov	r4, r0
 80053e2:	b940      	cbnz	r0, 80053f6 <__gethex+0x176>
 80053e4:	4602      	mov	r2, r0
 80053e6:	21de      	movs	r1, #222	; 0xde
 80053e8:	4b62      	ldr	r3, [pc, #392]	; (8005574 <__gethex+0x2f4>)
 80053ea:	4863      	ldr	r0, [pc, #396]	; (8005578 <__gethex+0x2f8>)
 80053ec:	f7ff feb0 	bl	8005150 <__assert_func>
 80053f0:	3101      	adds	r1, #1
 80053f2:	105b      	asrs	r3, r3, #1
 80053f4:	e7ef      	b.n	80053d6 <__gethex+0x156>
 80053f6:	f04f 0b00 	mov.w	fp, #0
 80053fa:	f100 0914 	add.w	r9, r0, #20
 80053fe:	f1ca 0301 	rsb	r3, sl, #1
 8005402:	f8cd 9010 	str.w	r9, [sp, #16]
 8005406:	f8cd b004 	str.w	fp, [sp, #4]
 800540a:	9308      	str	r3, [sp, #32]
 800540c:	42b7      	cmp	r7, r6
 800540e:	d33f      	bcc.n	8005490 <__gethex+0x210>
 8005410:	9f04      	ldr	r7, [sp, #16]
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	f847 3b04 	str.w	r3, [r7], #4
 8005418:	eba7 0709 	sub.w	r7, r7, r9
 800541c:	10bf      	asrs	r7, r7, #2
 800541e:	6127      	str	r7, [r4, #16]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fb49 	bl	8005ab8 <__hi0bits>
 8005426:	017f      	lsls	r7, r7, #5
 8005428:	f8d8 6000 	ldr.w	r6, [r8]
 800542c:	1a3f      	subs	r7, r7, r0
 800542e:	42b7      	cmp	r7, r6
 8005430:	dd62      	ble.n	80054f8 <__gethex+0x278>
 8005432:	1bbf      	subs	r7, r7, r6
 8005434:	4639      	mov	r1, r7
 8005436:	4620      	mov	r0, r4
 8005438:	f000 fedf 	bl	80061fa <__any_on>
 800543c:	4682      	mov	sl, r0
 800543e:	b1a8      	cbz	r0, 800546c <__gethex+0x1ec>
 8005440:	f04f 0a01 	mov.w	sl, #1
 8005444:	1e7b      	subs	r3, r7, #1
 8005446:	1159      	asrs	r1, r3, #5
 8005448:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	fa0a f202 	lsl.w	r2, sl, r2
 8005454:	420a      	tst	r2, r1
 8005456:	d009      	beq.n	800546c <__gethex+0x1ec>
 8005458:	4553      	cmp	r3, sl
 800545a:	dd05      	ble.n	8005468 <__gethex+0x1e8>
 800545c:	4620      	mov	r0, r4
 800545e:	1eb9      	subs	r1, r7, #2
 8005460:	f000 fecb 	bl	80061fa <__any_on>
 8005464:	2800      	cmp	r0, #0
 8005466:	d144      	bne.n	80054f2 <__gethex+0x272>
 8005468:	f04f 0a02 	mov.w	sl, #2
 800546c:	4639      	mov	r1, r7
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff fe9e 	bl	80051b0 <rshift>
 8005474:	443d      	add	r5, r7
 8005476:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800547a:	42ab      	cmp	r3, r5
 800547c:	da4a      	bge.n	8005514 <__gethex+0x294>
 800547e:	4621      	mov	r1, r4
 8005480:	9802      	ldr	r0, [sp, #8]
 8005482:	f000 fa63 	bl	800594c <_Bfree>
 8005486:	2300      	movs	r3, #0
 8005488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800548a:	27a3      	movs	r7, #163	; 0xa3
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e789      	b.n	80053a4 <__gethex+0x124>
 8005490:	1e73      	subs	r3, r6, #1
 8005492:	9a07      	ldr	r2, [sp, #28]
 8005494:	9305      	str	r3, [sp, #20]
 8005496:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800549a:	4293      	cmp	r3, r2
 800549c:	d019      	beq.n	80054d2 <__gethex+0x252>
 800549e:	f1bb 0f20 	cmp.w	fp, #32
 80054a2:	d107      	bne.n	80054b4 <__gethex+0x234>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	9a01      	ldr	r2, [sp, #4]
 80054a8:	f843 2b04 	str.w	r2, [r3], #4
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	469b      	mov	fp, r3
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80054b8:	f7ff fecd 	bl	8005256 <__hexdig_fun>
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	f000 000f 	and.w	r0, r0, #15
 80054c2:	fa00 f00b 	lsl.w	r0, r0, fp
 80054c6:	4303      	orrs	r3, r0
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	f10b 0b04 	add.w	fp, fp, #4
 80054ce:	9b05      	ldr	r3, [sp, #20]
 80054d0:	e00d      	b.n	80054ee <__gethex+0x26e>
 80054d2:	9b05      	ldr	r3, [sp, #20]
 80054d4:	9a08      	ldr	r2, [sp, #32]
 80054d6:	4413      	add	r3, r2
 80054d8:	42bb      	cmp	r3, r7
 80054da:	d3e0      	bcc.n	800549e <__gethex+0x21e>
 80054dc:	4618      	mov	r0, r3
 80054de:	4652      	mov	r2, sl
 80054e0:	9903      	ldr	r1, [sp, #12]
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	f001 fbbe 	bl	8006c64 <strncmp>
 80054e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d1d7      	bne.n	800549e <__gethex+0x21e>
 80054ee:	461e      	mov	r6, r3
 80054f0:	e78c      	b.n	800540c <__gethex+0x18c>
 80054f2:	f04f 0a03 	mov.w	sl, #3
 80054f6:	e7b9      	b.n	800546c <__gethex+0x1ec>
 80054f8:	da09      	bge.n	800550e <__gethex+0x28e>
 80054fa:	1bf7      	subs	r7, r6, r7
 80054fc:	4621      	mov	r1, r4
 80054fe:	463a      	mov	r2, r7
 8005500:	9802      	ldr	r0, [sp, #8]
 8005502:	f000 fc3b 	bl	8005d7c <__lshift>
 8005506:	4604      	mov	r4, r0
 8005508:	1bed      	subs	r5, r5, r7
 800550a:	f100 0914 	add.w	r9, r0, #20
 800550e:	f04f 0a00 	mov.w	sl, #0
 8005512:	e7b0      	b.n	8005476 <__gethex+0x1f6>
 8005514:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005518:	42a8      	cmp	r0, r5
 800551a:	dd71      	ble.n	8005600 <__gethex+0x380>
 800551c:	1b45      	subs	r5, r0, r5
 800551e:	42ae      	cmp	r6, r5
 8005520:	dc34      	bgt.n	800558c <__gethex+0x30c>
 8005522:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d028      	beq.n	800557c <__gethex+0x2fc>
 800552a:	2b03      	cmp	r3, #3
 800552c:	d02a      	beq.n	8005584 <__gethex+0x304>
 800552e:	2b01      	cmp	r3, #1
 8005530:	d115      	bne.n	800555e <__gethex+0x2de>
 8005532:	42ae      	cmp	r6, r5
 8005534:	d113      	bne.n	800555e <__gethex+0x2de>
 8005536:	2e01      	cmp	r6, #1
 8005538:	d10b      	bne.n	8005552 <__gethex+0x2d2>
 800553a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800553e:	9a06      	ldr	r2, [sp, #24]
 8005540:	2762      	movs	r7, #98	; 0x62
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	2301      	movs	r3, #1
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	f8c9 3000 	str.w	r3, [r9]
 800554c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800554e:	601c      	str	r4, [r3, #0]
 8005550:	e728      	b.n	80053a4 <__gethex+0x124>
 8005552:	4620      	mov	r0, r4
 8005554:	1e71      	subs	r1, r6, #1
 8005556:	f000 fe50 	bl	80061fa <__any_on>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1ed      	bne.n	800553a <__gethex+0x2ba>
 800555e:	4621      	mov	r1, r4
 8005560:	9802      	ldr	r0, [sp, #8]
 8005562:	f000 f9f3 	bl	800594c <_Bfree>
 8005566:	2300      	movs	r3, #0
 8005568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800556a:	2750      	movs	r7, #80	; 0x50
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e719      	b.n	80053a4 <__gethex+0x124>
 8005570:	08007710 	.word	0x08007710
 8005574:	08007694 	.word	0x08007694
 8005578:	080076a5 	.word	0x080076a5
 800557c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ed      	bne.n	800555e <__gethex+0x2de>
 8005582:	e7da      	b.n	800553a <__gethex+0x2ba>
 8005584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d7      	bne.n	800553a <__gethex+0x2ba>
 800558a:	e7e8      	b.n	800555e <__gethex+0x2de>
 800558c:	1e6f      	subs	r7, r5, #1
 800558e:	f1ba 0f00 	cmp.w	sl, #0
 8005592:	d132      	bne.n	80055fa <__gethex+0x37a>
 8005594:	b127      	cbz	r7, 80055a0 <__gethex+0x320>
 8005596:	4639      	mov	r1, r7
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fe2e 	bl	80061fa <__any_on>
 800559e:	4682      	mov	sl, r0
 80055a0:	2101      	movs	r1, #1
 80055a2:	117b      	asrs	r3, r7, #5
 80055a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80055a8:	f007 071f 	and.w	r7, r7, #31
 80055ac:	fa01 f707 	lsl.w	r7, r1, r7
 80055b0:	421f      	tst	r7, r3
 80055b2:	f04f 0702 	mov.w	r7, #2
 80055b6:	4629      	mov	r1, r5
 80055b8:	4620      	mov	r0, r4
 80055ba:	bf18      	it	ne
 80055bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80055c0:	1b76      	subs	r6, r6, r5
 80055c2:	f7ff fdf5 	bl	80051b0 <rshift>
 80055c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80055ca:	f1ba 0f00 	cmp.w	sl, #0
 80055ce:	d048      	beq.n	8005662 <__gethex+0x3e2>
 80055d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d015      	beq.n	8005604 <__gethex+0x384>
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d017      	beq.n	800560c <__gethex+0x38c>
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d109      	bne.n	80055f4 <__gethex+0x374>
 80055e0:	f01a 0f02 	tst.w	sl, #2
 80055e4:	d006      	beq.n	80055f4 <__gethex+0x374>
 80055e6:	f8d9 0000 	ldr.w	r0, [r9]
 80055ea:	ea4a 0a00 	orr.w	sl, sl, r0
 80055ee:	f01a 0f01 	tst.w	sl, #1
 80055f2:	d10e      	bne.n	8005612 <__gethex+0x392>
 80055f4:	f047 0710 	orr.w	r7, r7, #16
 80055f8:	e033      	b.n	8005662 <__gethex+0x3e2>
 80055fa:	f04f 0a01 	mov.w	sl, #1
 80055fe:	e7cf      	b.n	80055a0 <__gethex+0x320>
 8005600:	2701      	movs	r7, #1
 8005602:	e7e2      	b.n	80055ca <__gethex+0x34a>
 8005604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005606:	f1c3 0301 	rsb	r3, r3, #1
 800560a:	9315      	str	r3, [sp, #84]	; 0x54
 800560c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <__gethex+0x374>
 8005612:	f04f 0c00 	mov.w	ip, #0
 8005616:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800561a:	f104 0314 	add.w	r3, r4, #20
 800561e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005622:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005626:	4618      	mov	r0, r3
 8005628:	f853 2b04 	ldr.w	r2, [r3], #4
 800562c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005630:	d01c      	beq.n	800566c <__gethex+0x3ec>
 8005632:	3201      	adds	r2, #1
 8005634:	6002      	str	r2, [r0, #0]
 8005636:	2f02      	cmp	r7, #2
 8005638:	f104 0314 	add.w	r3, r4, #20
 800563c:	d13d      	bne.n	80056ba <__gethex+0x43a>
 800563e:	f8d8 2000 	ldr.w	r2, [r8]
 8005642:	3a01      	subs	r2, #1
 8005644:	42b2      	cmp	r2, r6
 8005646:	d10a      	bne.n	800565e <__gethex+0x3de>
 8005648:	2201      	movs	r2, #1
 800564a:	1171      	asrs	r1, r6, #5
 800564c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005650:	f006 061f 	and.w	r6, r6, #31
 8005654:	fa02 f606 	lsl.w	r6, r2, r6
 8005658:	421e      	tst	r6, r3
 800565a:	bf18      	it	ne
 800565c:	4617      	movne	r7, r2
 800565e:	f047 0720 	orr.w	r7, r7, #32
 8005662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005664:	601c      	str	r4, [r3, #0]
 8005666:	9b06      	ldr	r3, [sp, #24]
 8005668:	601d      	str	r5, [r3, #0]
 800566a:	e69b      	b.n	80053a4 <__gethex+0x124>
 800566c:	4299      	cmp	r1, r3
 800566e:	f843 cc04 	str.w	ip, [r3, #-4]
 8005672:	d8d8      	bhi.n	8005626 <__gethex+0x3a6>
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	459b      	cmp	fp, r3
 8005678:	db17      	blt.n	80056aa <__gethex+0x42a>
 800567a:	6861      	ldr	r1, [r4, #4]
 800567c:	9802      	ldr	r0, [sp, #8]
 800567e:	3101      	adds	r1, #1
 8005680:	f000 f924 	bl	80058cc <_Balloc>
 8005684:	4681      	mov	r9, r0
 8005686:	b918      	cbnz	r0, 8005690 <__gethex+0x410>
 8005688:	4602      	mov	r2, r0
 800568a:	2184      	movs	r1, #132	; 0x84
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <__gethex+0x474>)
 800568e:	e6ac      	b.n	80053ea <__gethex+0x16a>
 8005690:	6922      	ldr	r2, [r4, #16]
 8005692:	f104 010c 	add.w	r1, r4, #12
 8005696:	3202      	adds	r2, #2
 8005698:	0092      	lsls	r2, r2, #2
 800569a:	300c      	adds	r0, #12
 800569c:	f000 f908 	bl	80058b0 <memcpy>
 80056a0:	4621      	mov	r1, r4
 80056a2:	9802      	ldr	r0, [sp, #8]
 80056a4:	f000 f952 	bl	800594c <_Bfree>
 80056a8:	464c      	mov	r4, r9
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	6122      	str	r2, [r4, #16]
 80056b0:	2201      	movs	r2, #1
 80056b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056b6:	615a      	str	r2, [r3, #20]
 80056b8:	e7bd      	b.n	8005636 <__gethex+0x3b6>
 80056ba:	6922      	ldr	r2, [r4, #16]
 80056bc:	455a      	cmp	r2, fp
 80056be:	dd0b      	ble.n	80056d8 <__gethex+0x458>
 80056c0:	2101      	movs	r1, #1
 80056c2:	4620      	mov	r0, r4
 80056c4:	f7ff fd74 	bl	80051b0 <rshift>
 80056c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056cc:	3501      	adds	r5, #1
 80056ce:	42ab      	cmp	r3, r5
 80056d0:	f6ff aed5 	blt.w	800547e <__gethex+0x1fe>
 80056d4:	2701      	movs	r7, #1
 80056d6:	e7c2      	b.n	800565e <__gethex+0x3de>
 80056d8:	f016 061f 	ands.w	r6, r6, #31
 80056dc:	d0fa      	beq.n	80056d4 <__gethex+0x454>
 80056de:	449a      	add	sl, r3
 80056e0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80056e4:	f000 f9e8 	bl	8005ab8 <__hi0bits>
 80056e8:	f1c6 0620 	rsb	r6, r6, #32
 80056ec:	42b0      	cmp	r0, r6
 80056ee:	dbe7      	blt.n	80056c0 <__gethex+0x440>
 80056f0:	e7f0      	b.n	80056d4 <__gethex+0x454>
 80056f2:	bf00      	nop
 80056f4:	08007694 	.word	0x08007694

080056f8 <L_shift>:
 80056f8:	f1c2 0208 	rsb	r2, r2, #8
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	b570      	push	{r4, r5, r6, lr}
 8005700:	f1c2 0620 	rsb	r6, r2, #32
 8005704:	6843      	ldr	r3, [r0, #4]
 8005706:	6804      	ldr	r4, [r0, #0]
 8005708:	fa03 f506 	lsl.w	r5, r3, r6
 800570c:	432c      	orrs	r4, r5
 800570e:	40d3      	lsrs	r3, r2
 8005710:	6004      	str	r4, [r0, #0]
 8005712:	f840 3f04 	str.w	r3, [r0, #4]!
 8005716:	4288      	cmp	r0, r1
 8005718:	d3f4      	bcc.n	8005704 <L_shift+0xc>
 800571a:	bd70      	pop	{r4, r5, r6, pc}

0800571c <__match>:
 800571c:	b530      	push	{r4, r5, lr}
 800571e:	6803      	ldr	r3, [r0, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005726:	b914      	cbnz	r4, 800572e <__match+0x12>
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	2001      	movs	r0, #1
 800572c:	bd30      	pop	{r4, r5, pc}
 800572e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005732:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005736:	2d19      	cmp	r5, #25
 8005738:	bf98      	it	ls
 800573a:	3220      	addls	r2, #32
 800573c:	42a2      	cmp	r2, r4
 800573e:	d0f0      	beq.n	8005722 <__match+0x6>
 8005740:	2000      	movs	r0, #0
 8005742:	e7f3      	b.n	800572c <__match+0x10>

08005744 <__hexnan>:
 8005744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005748:	2500      	movs	r5, #0
 800574a:	680b      	ldr	r3, [r1, #0]
 800574c:	4682      	mov	sl, r0
 800574e:	115e      	asrs	r6, r3, #5
 8005750:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005754:	f013 031f 	ands.w	r3, r3, #31
 8005758:	bf18      	it	ne
 800575a:	3604      	addne	r6, #4
 800575c:	1f37      	subs	r7, r6, #4
 800575e:	4690      	mov	r8, r2
 8005760:	46b9      	mov	r9, r7
 8005762:	463c      	mov	r4, r7
 8005764:	46ab      	mov	fp, r5
 8005766:	b087      	sub	sp, #28
 8005768:	6801      	ldr	r1, [r0, #0]
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	f846 5c04 	str.w	r5, [r6, #-4]
 8005770:	9502      	str	r5, [sp, #8]
 8005772:	784a      	ldrb	r2, [r1, #1]
 8005774:	1c4b      	adds	r3, r1, #1
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	b342      	cbz	r2, 80057cc <__hexnan+0x88>
 800577a:	4610      	mov	r0, r2
 800577c:	9105      	str	r1, [sp, #20]
 800577e:	9204      	str	r2, [sp, #16]
 8005780:	f7ff fd69 	bl	8005256 <__hexdig_fun>
 8005784:	2800      	cmp	r0, #0
 8005786:	d14f      	bne.n	8005828 <__hexnan+0xe4>
 8005788:	9a04      	ldr	r2, [sp, #16]
 800578a:	9905      	ldr	r1, [sp, #20]
 800578c:	2a20      	cmp	r2, #32
 800578e:	d818      	bhi.n	80057c2 <__hexnan+0x7e>
 8005790:	9b02      	ldr	r3, [sp, #8]
 8005792:	459b      	cmp	fp, r3
 8005794:	dd13      	ble.n	80057be <__hexnan+0x7a>
 8005796:	454c      	cmp	r4, r9
 8005798:	d206      	bcs.n	80057a8 <__hexnan+0x64>
 800579a:	2d07      	cmp	r5, #7
 800579c:	dc04      	bgt.n	80057a8 <__hexnan+0x64>
 800579e:	462a      	mov	r2, r5
 80057a0:	4649      	mov	r1, r9
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ffa8 	bl	80056f8 <L_shift>
 80057a8:	4544      	cmp	r4, r8
 80057aa:	d950      	bls.n	800584e <__hexnan+0x10a>
 80057ac:	2300      	movs	r3, #0
 80057ae:	f1a4 0904 	sub.w	r9, r4, #4
 80057b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80057b6:	461d      	mov	r5, r3
 80057b8:	464c      	mov	r4, r9
 80057ba:	f8cd b008 	str.w	fp, [sp, #8]
 80057be:	9903      	ldr	r1, [sp, #12]
 80057c0:	e7d7      	b.n	8005772 <__hexnan+0x2e>
 80057c2:	2a29      	cmp	r2, #41	; 0x29
 80057c4:	d156      	bne.n	8005874 <__hexnan+0x130>
 80057c6:	3102      	adds	r1, #2
 80057c8:	f8ca 1000 	str.w	r1, [sl]
 80057cc:	f1bb 0f00 	cmp.w	fp, #0
 80057d0:	d050      	beq.n	8005874 <__hexnan+0x130>
 80057d2:	454c      	cmp	r4, r9
 80057d4:	d206      	bcs.n	80057e4 <__hexnan+0xa0>
 80057d6:	2d07      	cmp	r5, #7
 80057d8:	dc04      	bgt.n	80057e4 <__hexnan+0xa0>
 80057da:	462a      	mov	r2, r5
 80057dc:	4649      	mov	r1, r9
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff ff8a 	bl	80056f8 <L_shift>
 80057e4:	4544      	cmp	r4, r8
 80057e6:	d934      	bls.n	8005852 <__hexnan+0x10e>
 80057e8:	4623      	mov	r3, r4
 80057ea:	f1a8 0204 	sub.w	r2, r8, #4
 80057ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80057f2:	429f      	cmp	r7, r3
 80057f4:	f842 1f04 	str.w	r1, [r2, #4]!
 80057f8:	d2f9      	bcs.n	80057ee <__hexnan+0xaa>
 80057fa:	1b3b      	subs	r3, r7, r4
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	3304      	adds	r3, #4
 8005802:	3401      	adds	r4, #1
 8005804:	3e03      	subs	r6, #3
 8005806:	42b4      	cmp	r4, r6
 8005808:	bf88      	it	hi
 800580a:	2304      	movhi	r3, #4
 800580c:	2200      	movs	r2, #0
 800580e:	4443      	add	r3, r8
 8005810:	f843 2b04 	str.w	r2, [r3], #4
 8005814:	429f      	cmp	r7, r3
 8005816:	d2fb      	bcs.n	8005810 <__hexnan+0xcc>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b91b      	cbnz	r3, 8005824 <__hexnan+0xe0>
 800581c:	4547      	cmp	r7, r8
 800581e:	d127      	bne.n	8005870 <__hexnan+0x12c>
 8005820:	2301      	movs	r3, #1
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	2005      	movs	r0, #5
 8005826:	e026      	b.n	8005876 <__hexnan+0x132>
 8005828:	3501      	adds	r5, #1
 800582a:	2d08      	cmp	r5, #8
 800582c:	f10b 0b01 	add.w	fp, fp, #1
 8005830:	dd06      	ble.n	8005840 <__hexnan+0xfc>
 8005832:	4544      	cmp	r4, r8
 8005834:	d9c3      	bls.n	80057be <__hexnan+0x7a>
 8005836:	2300      	movs	r3, #0
 8005838:	2501      	movs	r5, #1
 800583a:	f844 3c04 	str.w	r3, [r4, #-4]
 800583e:	3c04      	subs	r4, #4
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	f000 000f 	and.w	r0, r0, #15
 8005846:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	e7b7      	b.n	80057be <__hexnan+0x7a>
 800584e:	2508      	movs	r5, #8
 8005850:	e7b5      	b.n	80057be <__hexnan+0x7a>
 8005852:	9b01      	ldr	r3, [sp, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0df      	beq.n	8005818 <__hexnan+0xd4>
 8005858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800585c:	f1c3 0320 	rsb	r3, r3, #32
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005868:	401a      	ands	r2, r3
 800586a:	f846 2c04 	str.w	r2, [r6, #-4]
 800586e:	e7d3      	b.n	8005818 <__hexnan+0xd4>
 8005870:	3f04      	subs	r7, #4
 8005872:	e7d1      	b.n	8005818 <__hexnan+0xd4>
 8005874:	2004      	movs	r0, #4
 8005876:	b007      	add	sp, #28
 8005878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800587c <malloc>:
 800587c:	4b02      	ldr	r3, [pc, #8]	; (8005888 <malloc+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f000 bd35 	b.w	80062f0 <_malloc_r>
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c

0800588c <__ascii_mbtowc>:
 800588c:	b082      	sub	sp, #8
 800588e:	b901      	cbnz	r1, 8005892 <__ascii_mbtowc+0x6>
 8005890:	a901      	add	r1, sp, #4
 8005892:	b142      	cbz	r2, 80058a6 <__ascii_mbtowc+0x1a>
 8005894:	b14b      	cbz	r3, 80058aa <__ascii_mbtowc+0x1e>
 8005896:	7813      	ldrb	r3, [r2, #0]
 8005898:	600b      	str	r3, [r1, #0]
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	1e10      	subs	r0, r2, #0
 800589e:	bf18      	it	ne
 80058a0:	2001      	movne	r0, #1
 80058a2:	b002      	add	sp, #8
 80058a4:	4770      	bx	lr
 80058a6:	4610      	mov	r0, r2
 80058a8:	e7fb      	b.n	80058a2 <__ascii_mbtowc+0x16>
 80058aa:	f06f 0001 	mvn.w	r0, #1
 80058ae:	e7f8      	b.n	80058a2 <__ascii_mbtowc+0x16>

080058b0 <memcpy>:
 80058b0:	440a      	add	r2, r1
 80058b2:	4291      	cmp	r1, r2
 80058b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058b8:	d100      	bne.n	80058bc <memcpy+0xc>
 80058ba:	4770      	bx	lr
 80058bc:	b510      	push	{r4, lr}
 80058be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058c8:	d1f9      	bne.n	80058be <memcpy+0xe>
 80058ca:	bd10      	pop	{r4, pc}

080058cc <_Balloc>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058d0:	4604      	mov	r4, r0
 80058d2:	460d      	mov	r5, r1
 80058d4:	b976      	cbnz	r6, 80058f4 <_Balloc+0x28>
 80058d6:	2010      	movs	r0, #16
 80058d8:	f7ff ffd0 	bl	800587c <malloc>
 80058dc:	4602      	mov	r2, r0
 80058de:	6260      	str	r0, [r4, #36]	; 0x24
 80058e0:	b920      	cbnz	r0, 80058ec <_Balloc+0x20>
 80058e2:	2166      	movs	r1, #102	; 0x66
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <_Balloc+0x78>)
 80058e6:	4818      	ldr	r0, [pc, #96]	; (8005948 <_Balloc+0x7c>)
 80058e8:	f7ff fc32 	bl	8005150 <__assert_func>
 80058ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058f0:	6006      	str	r6, [r0, #0]
 80058f2:	60c6      	str	r6, [r0, #12]
 80058f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058f6:	68f3      	ldr	r3, [r6, #12]
 80058f8:	b183      	cbz	r3, 800591c <_Balloc+0x50>
 80058fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005902:	b9b8      	cbnz	r0, 8005934 <_Balloc+0x68>
 8005904:	2101      	movs	r1, #1
 8005906:	fa01 f605 	lsl.w	r6, r1, r5
 800590a:	1d72      	adds	r2, r6, #5
 800590c:	4620      	mov	r0, r4
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	f000 fc94 	bl	800623c <_calloc_r>
 8005914:	b160      	cbz	r0, 8005930 <_Balloc+0x64>
 8005916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800591a:	e00e      	b.n	800593a <_Balloc+0x6e>
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	2104      	movs	r1, #4
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fc8b 	bl	800623c <_calloc_r>
 8005926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005928:	60f0      	str	r0, [r6, #12]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e4      	bne.n	80058fa <_Balloc+0x2e>
 8005930:	2000      	movs	r0, #0
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	6802      	ldr	r2, [r0, #0]
 8005936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800593a:	2300      	movs	r3, #0
 800593c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005940:	e7f7      	b.n	8005932 <_Balloc+0x66>
 8005942:	bf00      	nop
 8005944:	080075e0 	.word	0x080075e0
 8005948:	08007724 	.word	0x08007724

0800594c <_Bfree>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b976      	cbnz	r6, 8005974 <_Bfree+0x28>
 8005956:	2010      	movs	r0, #16
 8005958:	f7ff ff90 	bl	800587c <malloc>
 800595c:	4602      	mov	r2, r0
 800595e:	6268      	str	r0, [r5, #36]	; 0x24
 8005960:	b920      	cbnz	r0, 800596c <_Bfree+0x20>
 8005962:	218a      	movs	r1, #138	; 0x8a
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <_Bfree+0x3c>)
 8005966:	4809      	ldr	r0, [pc, #36]	; (800598c <_Bfree+0x40>)
 8005968:	f7ff fbf2 	bl	8005150 <__assert_func>
 800596c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005970:	6006      	str	r6, [r0, #0]
 8005972:	60c6      	str	r6, [r0, #12]
 8005974:	b13c      	cbz	r4, 8005986 <_Bfree+0x3a>
 8005976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005978:	6862      	ldr	r2, [r4, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005980:	6021      	str	r1, [r4, #0]
 8005982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	080075e0 	.word	0x080075e0
 800598c:	08007724 	.word	0x08007724

08005990 <__multadd>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	4698      	mov	r8, r3
 8005996:	460c      	mov	r4, r1
 8005998:	2300      	movs	r3, #0
 800599a:	690e      	ldr	r6, [r1, #16]
 800599c:	4607      	mov	r7, r0
 800599e:	f101 0014 	add.w	r0, r1, #20
 80059a2:	6805      	ldr	r5, [r0, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2a9      	uxth	r1, r5
 80059a8:	fb02 8101 	mla	r1, r2, r1, r8
 80059ac:	0c2d      	lsrs	r5, r5, #16
 80059ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80059b2:	fb02 c505 	mla	r5, r2, r5, ip
 80059b6:	b289      	uxth	r1, r1
 80059b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80059bc:	429e      	cmp	r6, r3
 80059be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80059c2:	f840 1b04 	str.w	r1, [r0], #4
 80059c6:	dcec      	bgt.n	80059a2 <__multadd+0x12>
 80059c8:	f1b8 0f00 	cmp.w	r8, #0
 80059cc:	d022      	beq.n	8005a14 <__multadd+0x84>
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	42b3      	cmp	r3, r6
 80059d2:	dc19      	bgt.n	8005a08 <__multadd+0x78>
 80059d4:	6861      	ldr	r1, [r4, #4]
 80059d6:	4638      	mov	r0, r7
 80059d8:	3101      	adds	r1, #1
 80059da:	f7ff ff77 	bl	80058cc <_Balloc>
 80059de:	4605      	mov	r5, r0
 80059e0:	b928      	cbnz	r0, 80059ee <__multadd+0x5e>
 80059e2:	4602      	mov	r2, r0
 80059e4:	21b5      	movs	r1, #181	; 0xb5
 80059e6:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <__multadd+0x8c>)
 80059e8:	480d      	ldr	r0, [pc, #52]	; (8005a20 <__multadd+0x90>)
 80059ea:	f7ff fbb1 	bl	8005150 <__assert_func>
 80059ee:	6922      	ldr	r2, [r4, #16]
 80059f0:	f104 010c 	add.w	r1, r4, #12
 80059f4:	3202      	adds	r2, #2
 80059f6:	0092      	lsls	r2, r2, #2
 80059f8:	300c      	adds	r0, #12
 80059fa:	f7ff ff59 	bl	80058b0 <memcpy>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ffa3 	bl	800594c <_Bfree>
 8005a06:	462c      	mov	r4, r5
 8005a08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a12:	6126      	str	r6, [r4, #16]
 8005a14:	4620      	mov	r0, r4
 8005a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08007694 	.word	0x08007694
 8005a20:	08007724 	.word	0x08007724

08005a24 <__s2b>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4615      	mov	r5, r2
 8005a2a:	2209      	movs	r2, #9
 8005a2c:	461f      	mov	r7, r3
 8005a2e:	3308      	adds	r3, #8
 8005a30:	460c      	mov	r4, r1
 8005a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a36:	4606      	mov	r6, r0
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	db09      	blt.n	8005a54 <__s2b+0x30>
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff ff43 	bl	80058cc <_Balloc>
 8005a46:	b940      	cbnz	r0, 8005a5a <__s2b+0x36>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	21ce      	movs	r1, #206	; 0xce
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <__s2b+0x8c>)
 8005a4e:	4819      	ldr	r0, [pc, #100]	; (8005ab4 <__s2b+0x90>)
 8005a50:	f7ff fb7e 	bl	8005150 <__assert_func>
 8005a54:	0052      	lsls	r2, r2, #1
 8005a56:	3101      	adds	r1, #1
 8005a58:	e7f0      	b.n	8005a3c <__s2b+0x18>
 8005a5a:	9b08      	ldr	r3, [sp, #32]
 8005a5c:	2d09      	cmp	r5, #9
 8005a5e:	6143      	str	r3, [r0, #20]
 8005a60:	f04f 0301 	mov.w	r3, #1
 8005a64:	6103      	str	r3, [r0, #16]
 8005a66:	dd16      	ble.n	8005a96 <__s2b+0x72>
 8005a68:	f104 0909 	add.w	r9, r4, #9
 8005a6c:	46c8      	mov	r8, r9
 8005a6e:	442c      	add	r4, r5
 8005a70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005a74:	4601      	mov	r1, r0
 8005a76:	220a      	movs	r2, #10
 8005a78:	4630      	mov	r0, r6
 8005a7a:	3b30      	subs	r3, #48	; 0x30
 8005a7c:	f7ff ff88 	bl	8005990 <__multadd>
 8005a80:	45a0      	cmp	r8, r4
 8005a82:	d1f5      	bne.n	8005a70 <__s2b+0x4c>
 8005a84:	f1a5 0408 	sub.w	r4, r5, #8
 8005a88:	444c      	add	r4, r9
 8005a8a:	1b2d      	subs	r5, r5, r4
 8005a8c:	1963      	adds	r3, r4, r5
 8005a8e:	42bb      	cmp	r3, r7
 8005a90:	db04      	blt.n	8005a9c <__s2b+0x78>
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a96:	2509      	movs	r5, #9
 8005a98:	340a      	adds	r4, #10
 8005a9a:	e7f6      	b.n	8005a8a <__s2b+0x66>
 8005a9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	220a      	movs	r2, #10
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	3b30      	subs	r3, #48	; 0x30
 8005aa8:	f7ff ff72 	bl	8005990 <__multadd>
 8005aac:	e7ee      	b.n	8005a8c <__s2b+0x68>
 8005aae:	bf00      	nop
 8005ab0:	08007694 	.word	0x08007694
 8005ab4:	08007724 	.word	0x08007724

08005ab8 <__hi0bits>:
 8005ab8:	0c02      	lsrs	r2, r0, #16
 8005aba:	0412      	lsls	r2, r2, #16
 8005abc:	4603      	mov	r3, r0
 8005abe:	b9ca      	cbnz	r2, 8005af4 <__hi0bits+0x3c>
 8005ac0:	0403      	lsls	r3, r0, #16
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ac8:	bf04      	itt	eq
 8005aca:	021b      	lsleq	r3, r3, #8
 8005acc:	3008      	addeq	r0, #8
 8005ace:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ad2:	bf04      	itt	eq
 8005ad4:	011b      	lsleq	r3, r3, #4
 8005ad6:	3004      	addeq	r0, #4
 8005ad8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005adc:	bf04      	itt	eq
 8005ade:	009b      	lsleq	r3, r3, #2
 8005ae0:	3002      	addeq	r0, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db05      	blt.n	8005af2 <__hi0bits+0x3a>
 8005ae6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005aea:	f100 0001 	add.w	r0, r0, #1
 8005aee:	bf08      	it	eq
 8005af0:	2020      	moveq	r0, #32
 8005af2:	4770      	bx	lr
 8005af4:	2000      	movs	r0, #0
 8005af6:	e7e5      	b.n	8005ac4 <__hi0bits+0xc>

08005af8 <__lo0bits>:
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	4602      	mov	r2, r0
 8005afc:	f013 0007 	ands.w	r0, r3, #7
 8005b00:	d00b      	beq.n	8005b1a <__lo0bits+0x22>
 8005b02:	07d9      	lsls	r1, r3, #31
 8005b04:	d422      	bmi.n	8005b4c <__lo0bits+0x54>
 8005b06:	0798      	lsls	r0, r3, #30
 8005b08:	bf49      	itett	mi
 8005b0a:	085b      	lsrmi	r3, r3, #1
 8005b0c:	089b      	lsrpl	r3, r3, #2
 8005b0e:	2001      	movmi	r0, #1
 8005b10:	6013      	strmi	r3, [r2, #0]
 8005b12:	bf5c      	itt	pl
 8005b14:	2002      	movpl	r0, #2
 8005b16:	6013      	strpl	r3, [r2, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	b299      	uxth	r1, r3
 8005b1c:	b909      	cbnz	r1, 8005b22 <__lo0bits+0x2a>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b26:	bf04      	itt	eq
 8005b28:	0a1b      	lsreq	r3, r3, #8
 8005b2a:	3008      	addeq	r0, #8
 8005b2c:	0719      	lsls	r1, r3, #28
 8005b2e:	bf04      	itt	eq
 8005b30:	091b      	lsreq	r3, r3, #4
 8005b32:	3004      	addeq	r0, #4
 8005b34:	0799      	lsls	r1, r3, #30
 8005b36:	bf04      	itt	eq
 8005b38:	089b      	lsreq	r3, r3, #2
 8005b3a:	3002      	addeq	r0, #2
 8005b3c:	07d9      	lsls	r1, r3, #31
 8005b3e:	d403      	bmi.n	8005b48 <__lo0bits+0x50>
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	f100 0001 	add.w	r0, r0, #1
 8005b46:	d003      	beq.n	8005b50 <__lo0bits+0x58>
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	4770      	bx	lr
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	4770      	bx	lr
 8005b50:	2020      	movs	r0, #32
 8005b52:	4770      	bx	lr

08005b54 <__i2b>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	460c      	mov	r4, r1
 8005b58:	2101      	movs	r1, #1
 8005b5a:	f7ff feb7 	bl	80058cc <_Balloc>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	b928      	cbnz	r0, 8005b6e <__i2b+0x1a>
 8005b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b66:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <__i2b+0x24>)
 8005b68:	4804      	ldr	r0, [pc, #16]	; (8005b7c <__i2b+0x28>)
 8005b6a:	f7ff faf1 	bl	8005150 <__assert_func>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	6144      	str	r4, [r0, #20]
 8005b72:	6103      	str	r3, [r0, #16]
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	08007694 	.word	0x08007694
 8005b7c:	08007724 	.word	0x08007724

08005b80 <__multiply>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	4614      	mov	r4, r2
 8005b86:	690a      	ldr	r2, [r1, #16]
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	bfbe      	ittt	lt
 8005b90:	460b      	movlt	r3, r1
 8005b92:	4625      	movlt	r5, r4
 8005b94:	461c      	movlt	r4, r3
 8005b96:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b9a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b9e:	68ab      	ldr	r3, [r5, #8]
 8005ba0:	6869      	ldr	r1, [r5, #4]
 8005ba2:	eb0a 0709 	add.w	r7, sl, r9
 8005ba6:	42bb      	cmp	r3, r7
 8005ba8:	b085      	sub	sp, #20
 8005baa:	bfb8      	it	lt
 8005bac:	3101      	addlt	r1, #1
 8005bae:	f7ff fe8d 	bl	80058cc <_Balloc>
 8005bb2:	b930      	cbnz	r0, 8005bc2 <__multiply+0x42>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f240 115d 	movw	r1, #349	; 0x15d
 8005bba:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <__multiply+0x140>)
 8005bbc:	4841      	ldr	r0, [pc, #260]	; (8005cc4 <__multiply+0x144>)
 8005bbe:	f7ff fac7 	bl	8005150 <__assert_func>
 8005bc2:	f100 0614 	add.w	r6, r0, #20
 8005bc6:	4633      	mov	r3, r6
 8005bc8:	2200      	movs	r2, #0
 8005bca:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005bce:	4543      	cmp	r3, r8
 8005bd0:	d31e      	bcc.n	8005c10 <__multiply+0x90>
 8005bd2:	f105 0c14 	add.w	ip, r5, #20
 8005bd6:	f104 0314 	add.w	r3, r4, #20
 8005bda:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005bde:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005be2:	9202      	str	r2, [sp, #8]
 8005be4:	ebac 0205 	sub.w	r2, ip, r5
 8005be8:	3a15      	subs	r2, #21
 8005bea:	f022 0203 	bic.w	r2, r2, #3
 8005bee:	3204      	adds	r2, #4
 8005bf0:	f105 0115 	add.w	r1, r5, #21
 8005bf4:	458c      	cmp	ip, r1
 8005bf6:	bf38      	it	cc
 8005bf8:	2204      	movcc	r2, #4
 8005bfa:	9201      	str	r2, [sp, #4]
 8005bfc:	9a02      	ldr	r2, [sp, #8]
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d808      	bhi.n	8005c16 <__multiply+0x96>
 8005c04:	2f00      	cmp	r7, #0
 8005c06:	dc55      	bgt.n	8005cb4 <__multiply+0x134>
 8005c08:	6107      	str	r7, [r0, #16]
 8005c0a:	b005      	add	sp, #20
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	f843 2b04 	str.w	r2, [r3], #4
 8005c14:	e7db      	b.n	8005bce <__multiply+0x4e>
 8005c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c1a:	f1ba 0f00 	cmp.w	sl, #0
 8005c1e:	d020      	beq.n	8005c62 <__multiply+0xe2>
 8005c20:	46b1      	mov	r9, r6
 8005c22:	2200      	movs	r2, #0
 8005c24:	f105 0e14 	add.w	lr, r5, #20
 8005c28:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c2c:	f8d9 b000 	ldr.w	fp, [r9]
 8005c30:	b2a1      	uxth	r1, r4
 8005c32:	fa1f fb8b 	uxth.w	fp, fp
 8005c36:	fb0a b101 	mla	r1, sl, r1, fp
 8005c3a:	4411      	add	r1, r2
 8005c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c40:	0c24      	lsrs	r4, r4, #16
 8005c42:	0c12      	lsrs	r2, r2, #16
 8005c44:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c48:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c4c:	b289      	uxth	r1, r1
 8005c4e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c52:	45f4      	cmp	ip, lr
 8005c54:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c58:	f849 1b04 	str.w	r1, [r9], #4
 8005c5c:	d8e4      	bhi.n	8005c28 <__multiply+0xa8>
 8005c5e:	9901      	ldr	r1, [sp, #4]
 8005c60:	5072      	str	r2, [r6, r1]
 8005c62:	9a03      	ldr	r2, [sp, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c6a:	f1b9 0f00 	cmp.w	r9, #0
 8005c6e:	d01f      	beq.n	8005cb0 <__multiply+0x130>
 8005c70:	46b6      	mov	lr, r6
 8005c72:	f04f 0a00 	mov.w	sl, #0
 8005c76:	6834      	ldr	r4, [r6, #0]
 8005c78:	f105 0114 	add.w	r1, r5, #20
 8005c7c:	880a      	ldrh	r2, [r1, #0]
 8005c7e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c82:	b2a4      	uxth	r4, r4
 8005c84:	fb09 b202 	mla	r2, r9, r2, fp
 8005c88:	4492      	add	sl, r2
 8005c8a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c8e:	f84e 4b04 	str.w	r4, [lr], #4
 8005c92:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c96:	f8be 2000 	ldrh.w	r2, [lr]
 8005c9a:	0c24      	lsrs	r4, r4, #16
 8005c9c:	fb09 2404 	mla	r4, r9, r4, r2
 8005ca0:	458c      	cmp	ip, r1
 8005ca2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005ca6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005caa:	d8e7      	bhi.n	8005c7c <__multiply+0xfc>
 8005cac:	9a01      	ldr	r2, [sp, #4]
 8005cae:	50b4      	str	r4, [r6, r2]
 8005cb0:	3604      	adds	r6, #4
 8005cb2:	e7a3      	b.n	8005bfc <__multiply+0x7c>
 8005cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1a5      	bne.n	8005c08 <__multiply+0x88>
 8005cbc:	3f01      	subs	r7, #1
 8005cbe:	e7a1      	b.n	8005c04 <__multiply+0x84>
 8005cc0:	08007694 	.word	0x08007694
 8005cc4:	08007724 	.word	0x08007724

08005cc8 <__pow5mult>:
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	4615      	mov	r5, r2
 8005cce:	f012 0203 	ands.w	r2, r2, #3
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	d007      	beq.n	8005ce8 <__pow5mult+0x20>
 8005cd8:	4c25      	ldr	r4, [pc, #148]	; (8005d70 <__pow5mult+0xa8>)
 8005cda:	3a01      	subs	r2, #1
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ce2:	f7ff fe55 	bl	8005990 <__multadd>
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	10ad      	asrs	r5, r5, #2
 8005cea:	d03d      	beq.n	8005d68 <__pow5mult+0xa0>
 8005cec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cee:	b97c      	cbnz	r4, 8005d10 <__pow5mult+0x48>
 8005cf0:	2010      	movs	r0, #16
 8005cf2:	f7ff fdc3 	bl	800587c <malloc>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6270      	str	r0, [r6, #36]	; 0x24
 8005cfa:	b928      	cbnz	r0, 8005d08 <__pow5mult+0x40>
 8005cfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <__pow5mult+0xac>)
 8005d02:	481d      	ldr	r0, [pc, #116]	; (8005d78 <__pow5mult+0xb0>)
 8005d04:	f7ff fa24 	bl	8005150 <__assert_func>
 8005d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d0c:	6004      	str	r4, [r0, #0]
 8005d0e:	60c4      	str	r4, [r0, #12]
 8005d10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d18:	b94c      	cbnz	r4, 8005d2e <__pow5mult+0x66>
 8005d1a:	f240 2171 	movw	r1, #625	; 0x271
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7ff ff18 	bl	8005b54 <__i2b>
 8005d24:	2300      	movs	r3, #0
 8005d26:	4604      	mov	r4, r0
 8005d28:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d2c:	6003      	str	r3, [r0, #0]
 8005d2e:	f04f 0900 	mov.w	r9, #0
 8005d32:	07eb      	lsls	r3, r5, #31
 8005d34:	d50a      	bpl.n	8005d4c <__pow5mult+0x84>
 8005d36:	4639      	mov	r1, r7
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff ff20 	bl	8005b80 <__multiply>
 8005d40:	4680      	mov	r8, r0
 8005d42:	4639      	mov	r1, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff fe01 	bl	800594c <_Bfree>
 8005d4a:	4647      	mov	r7, r8
 8005d4c:	106d      	asrs	r5, r5, #1
 8005d4e:	d00b      	beq.n	8005d68 <__pow5mult+0xa0>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	b938      	cbnz	r0, 8005d64 <__pow5mult+0x9c>
 8005d54:	4622      	mov	r2, r4
 8005d56:	4621      	mov	r1, r4
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff ff11 	bl	8005b80 <__multiply>
 8005d5e:	6020      	str	r0, [r4, #0]
 8005d60:	f8c0 9000 	str.w	r9, [r0]
 8005d64:	4604      	mov	r4, r0
 8005d66:	e7e4      	b.n	8005d32 <__pow5mult+0x6a>
 8005d68:	4638      	mov	r0, r7
 8005d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	bf00      	nop
 8005d70:	08007878 	.word	0x08007878
 8005d74:	080075e0 	.word	0x080075e0
 8005d78:	08007724 	.word	0x08007724

08005d7c <__lshift>:
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	460c      	mov	r4, r1
 8005d82:	4607      	mov	r7, r0
 8005d84:	4691      	mov	r9, r2
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	6849      	ldr	r1, [r1, #4]
 8005d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d94:	f108 0601 	add.w	r6, r8, #1
 8005d98:	42b3      	cmp	r3, r6
 8005d9a:	db0b      	blt.n	8005db4 <__lshift+0x38>
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff fd95 	bl	80058cc <_Balloc>
 8005da2:	4605      	mov	r5, r0
 8005da4:	b948      	cbnz	r0, 8005dba <__lshift+0x3e>
 8005da6:	4602      	mov	r2, r0
 8005da8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005dac:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <__lshift+0xd0>)
 8005dae:	4828      	ldr	r0, [pc, #160]	; (8005e50 <__lshift+0xd4>)
 8005db0:	f7ff f9ce 	bl	8005150 <__assert_func>
 8005db4:	3101      	adds	r1, #1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	e7ee      	b.n	8005d98 <__lshift+0x1c>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f100 0114 	add.w	r1, r0, #20
 8005dc0:	f100 0210 	add.w	r2, r0, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4553      	cmp	r3, sl
 8005dc8:	db33      	blt.n	8005e32 <__lshift+0xb6>
 8005dca:	6920      	ldr	r0, [r4, #16]
 8005dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dd0:	f104 0314 	add.w	r3, r4, #20
 8005dd4:	f019 091f 	ands.w	r9, r9, #31
 8005dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005de0:	d02b      	beq.n	8005e3a <__lshift+0xbe>
 8005de2:	468a      	mov	sl, r1
 8005de4:	2200      	movs	r2, #0
 8005de6:	f1c9 0e20 	rsb	lr, r9, #32
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	fa00 f009 	lsl.w	r0, r0, r9
 8005df0:	4302      	orrs	r2, r0
 8005df2:	f84a 2b04 	str.w	r2, [sl], #4
 8005df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dfa:	459c      	cmp	ip, r3
 8005dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e00:	d8f3      	bhi.n	8005dea <__lshift+0x6e>
 8005e02:	ebac 0304 	sub.w	r3, ip, r4
 8005e06:	3b15      	subs	r3, #21
 8005e08:	f023 0303 	bic.w	r3, r3, #3
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	f104 0015 	add.w	r0, r4, #21
 8005e12:	4584      	cmp	ip, r0
 8005e14:	bf38      	it	cc
 8005e16:	2304      	movcc	r3, #4
 8005e18:	50ca      	str	r2, [r1, r3]
 8005e1a:	b10a      	cbz	r2, 8005e20 <__lshift+0xa4>
 8005e1c:	f108 0602 	add.w	r6, r8, #2
 8005e20:	3e01      	subs	r6, #1
 8005e22:	4638      	mov	r0, r7
 8005e24:	4621      	mov	r1, r4
 8005e26:	612e      	str	r6, [r5, #16]
 8005e28:	f7ff fd90 	bl	800594c <_Bfree>
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e36:	3301      	adds	r3, #1
 8005e38:	e7c5      	b.n	8005dc6 <__lshift+0x4a>
 8005e3a:	3904      	subs	r1, #4
 8005e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e40:	459c      	cmp	ip, r3
 8005e42:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e46:	d8f9      	bhi.n	8005e3c <__lshift+0xc0>
 8005e48:	e7ea      	b.n	8005e20 <__lshift+0xa4>
 8005e4a:	bf00      	nop
 8005e4c:	08007694 	.word	0x08007694
 8005e50:	08007724 	.word	0x08007724

08005e54 <__mcmp>:
 8005e54:	4603      	mov	r3, r0
 8005e56:	690a      	ldr	r2, [r1, #16]
 8005e58:	6900      	ldr	r0, [r0, #16]
 8005e5a:	b530      	push	{r4, r5, lr}
 8005e5c:	1a80      	subs	r0, r0, r2
 8005e5e:	d10d      	bne.n	8005e7c <__mcmp+0x28>
 8005e60:	3314      	adds	r3, #20
 8005e62:	3114      	adds	r1, #20
 8005e64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e74:	4295      	cmp	r5, r2
 8005e76:	d002      	beq.n	8005e7e <__mcmp+0x2a>
 8005e78:	d304      	bcc.n	8005e84 <__mcmp+0x30>
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	bd30      	pop	{r4, r5, pc}
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	d3f4      	bcc.n	8005e6c <__mcmp+0x18>
 8005e82:	e7fb      	b.n	8005e7c <__mcmp+0x28>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e88:	e7f8      	b.n	8005e7c <__mcmp+0x28>
	...

08005e8c <__mdiff>:
 8005e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	460c      	mov	r4, r1
 8005e92:	4606      	mov	r6, r0
 8005e94:	4611      	mov	r1, r2
 8005e96:	4620      	mov	r0, r4
 8005e98:	4692      	mov	sl, r2
 8005e9a:	f7ff ffdb 	bl	8005e54 <__mcmp>
 8005e9e:	1e05      	subs	r5, r0, #0
 8005ea0:	d111      	bne.n	8005ec6 <__mdiff+0x3a>
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff fd11 	bl	80058cc <_Balloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	b928      	cbnz	r0, 8005eba <__mdiff+0x2e>
 8005eae:	f240 2132 	movw	r1, #562	; 0x232
 8005eb2:	4b3c      	ldr	r3, [pc, #240]	; (8005fa4 <__mdiff+0x118>)
 8005eb4:	483c      	ldr	r0, [pc, #240]	; (8005fa8 <__mdiff+0x11c>)
 8005eb6:	f7ff f94b 	bl	8005150 <__assert_func>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec6:	bfa4      	itt	ge
 8005ec8:	4653      	movge	r3, sl
 8005eca:	46a2      	movge	sl, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005ed2:	bfa6      	itte	ge
 8005ed4:	461c      	movge	r4, r3
 8005ed6:	2500      	movge	r5, #0
 8005ed8:	2501      	movlt	r5, #1
 8005eda:	f7ff fcf7 	bl	80058cc <_Balloc>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	b918      	cbnz	r0, 8005eea <__mdiff+0x5e>
 8005ee2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <__mdiff+0x118>)
 8005ee8:	e7e4      	b.n	8005eb4 <__mdiff+0x28>
 8005eea:	f100 0814 	add.w	r8, r0, #20
 8005eee:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005ef2:	60c5      	str	r5, [r0, #12]
 8005ef4:	f04f 0c00 	mov.w	ip, #0
 8005ef8:	f10a 0514 	add.w	r5, sl, #20
 8005efc:	f10a 0010 	add.w	r0, sl, #16
 8005f00:	46c2      	mov	sl, r8
 8005f02:	6926      	ldr	r6, [r4, #16]
 8005f04:	f104 0914 	add.w	r9, r4, #20
 8005f08:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005f0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f10:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f18:	fa1f f18b 	uxth.w	r1, fp
 8005f1c:	4461      	add	r1, ip
 8005f1e:	fa1f fc83 	uxth.w	ip, r3
 8005f22:	0c1b      	lsrs	r3, r3, #16
 8005f24:	eba1 010c 	sub.w	r1, r1, ip
 8005f28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f2c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f30:	b289      	uxth	r1, r1
 8005f32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f36:	454e      	cmp	r6, r9
 8005f38:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f3c:	f84a 3b04 	str.w	r3, [sl], #4
 8005f40:	d8e6      	bhi.n	8005f10 <__mdiff+0x84>
 8005f42:	1b33      	subs	r3, r6, r4
 8005f44:	3b15      	subs	r3, #21
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	3415      	adds	r4, #21
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	42a6      	cmp	r6, r4
 8005f50:	bf38      	it	cc
 8005f52:	2304      	movcc	r3, #4
 8005f54:	441d      	add	r5, r3
 8005f56:	4443      	add	r3, r8
 8005f58:	461e      	mov	r6, r3
 8005f5a:	462c      	mov	r4, r5
 8005f5c:	4574      	cmp	r4, lr
 8005f5e:	d30e      	bcc.n	8005f7e <__mdiff+0xf2>
 8005f60:	f10e 0103 	add.w	r1, lr, #3
 8005f64:	1b49      	subs	r1, r1, r5
 8005f66:	f021 0103 	bic.w	r1, r1, #3
 8005f6a:	3d03      	subs	r5, #3
 8005f6c:	45ae      	cmp	lr, r5
 8005f6e:	bf38      	it	cc
 8005f70:	2100      	movcc	r1, #0
 8005f72:	4419      	add	r1, r3
 8005f74:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f78:	b18b      	cbz	r3, 8005f9e <__mdiff+0x112>
 8005f7a:	6117      	str	r7, [r2, #16]
 8005f7c:	e7a0      	b.n	8005ec0 <__mdiff+0x34>
 8005f7e:	f854 8b04 	ldr.w	r8, [r4], #4
 8005f82:	fa1f f188 	uxth.w	r1, r8
 8005f86:	4461      	add	r1, ip
 8005f88:	1408      	asrs	r0, r1, #16
 8005f8a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005f8e:	b289      	uxth	r1, r1
 8005f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f98:	f846 1b04 	str.w	r1, [r6], #4
 8005f9c:	e7de      	b.n	8005f5c <__mdiff+0xd0>
 8005f9e:	3f01      	subs	r7, #1
 8005fa0:	e7e8      	b.n	8005f74 <__mdiff+0xe8>
 8005fa2:	bf00      	nop
 8005fa4:	08007694 	.word	0x08007694
 8005fa8:	08007724 	.word	0x08007724

08005fac <__ulp>:
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <__ulp+0x48>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd02      	ble.n	8005fbe <__ulp+0x12>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4770      	bx	lr
 8005fbe:	425b      	negs	r3, r3
 8005fc0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005fd0:	da04      	bge.n	8005fdc <__ulp+0x30>
 8005fd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005fd6:	fa43 f102 	asr.w	r1, r3, r2
 8005fda:	4770      	bx	lr
 8005fdc:	f1a2 0314 	sub.w	r3, r2, #20
 8005fe0:	2b1e      	cmp	r3, #30
 8005fe2:	bfd6      	itet	le
 8005fe4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005fe8:	2301      	movgt	r3, #1
 8005fea:	fa22 f303 	lsrle.w	r3, r2, r3
 8005fee:	4618      	mov	r0, r3
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	7ff00000 	.word	0x7ff00000

08005ff8 <__b2d>:
 8005ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	6907      	ldr	r7, [r0, #16]
 8005ffe:	f100 0914 	add.w	r9, r0, #20
 8006002:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006006:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800600a:	f1a7 0804 	sub.w	r8, r7, #4
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff fd52 	bl	8005ab8 <__hi0bits>
 8006014:	f1c0 0320 	rsb	r3, r0, #32
 8006018:	280a      	cmp	r0, #10
 800601a:	600b      	str	r3, [r1, #0]
 800601c:	491f      	ldr	r1, [pc, #124]	; (800609c <__b2d+0xa4>)
 800601e:	dc17      	bgt.n	8006050 <__b2d+0x58>
 8006020:	45c1      	cmp	r9, r8
 8006022:	bf28      	it	cs
 8006024:	2200      	movcs	r2, #0
 8006026:	f1c0 0c0b 	rsb	ip, r0, #11
 800602a:	fa26 f30c 	lsr.w	r3, r6, ip
 800602e:	bf38      	it	cc
 8006030:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006034:	ea43 0501 	orr.w	r5, r3, r1
 8006038:	f100 0315 	add.w	r3, r0, #21
 800603c:	fa06 f303 	lsl.w	r3, r6, r3
 8006040:	fa22 f20c 	lsr.w	r2, r2, ip
 8006044:	ea43 0402 	orr.w	r4, r3, r2
 8006048:	4620      	mov	r0, r4
 800604a:	4629      	mov	r1, r5
 800604c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006050:	45c1      	cmp	r9, r8
 8006052:	bf2e      	itee	cs
 8006054:	2200      	movcs	r2, #0
 8006056:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800605a:	f1a7 0808 	subcc.w	r8, r7, #8
 800605e:	f1b0 030b 	subs.w	r3, r0, #11
 8006062:	d016      	beq.n	8006092 <__b2d+0x9a>
 8006064:	f1c3 0720 	rsb	r7, r3, #32
 8006068:	fa22 f107 	lsr.w	r1, r2, r7
 800606c:	45c8      	cmp	r8, r9
 800606e:	fa06 f603 	lsl.w	r6, r6, r3
 8006072:	ea46 0601 	orr.w	r6, r6, r1
 8006076:	bf94      	ite	ls
 8006078:	2100      	movls	r1, #0
 800607a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800607e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006082:	fa02 f003 	lsl.w	r0, r2, r3
 8006086:	40f9      	lsrs	r1, r7
 8006088:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800608c:	ea40 0401 	orr.w	r4, r0, r1
 8006090:	e7da      	b.n	8006048 <__b2d+0x50>
 8006092:	4614      	mov	r4, r2
 8006094:	ea46 0501 	orr.w	r5, r6, r1
 8006098:	e7d6      	b.n	8006048 <__b2d+0x50>
 800609a:	bf00      	nop
 800609c:	3ff00000 	.word	0x3ff00000

080060a0 <__d2b>:
 80060a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060a4:	2101      	movs	r1, #1
 80060a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060aa:	4690      	mov	r8, r2
 80060ac:	461d      	mov	r5, r3
 80060ae:	f7ff fc0d 	bl	80058cc <_Balloc>
 80060b2:	4604      	mov	r4, r0
 80060b4:	b930      	cbnz	r0, 80060c4 <__d2b+0x24>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f240 310a 	movw	r1, #778	; 0x30a
 80060bc:	4b24      	ldr	r3, [pc, #144]	; (8006150 <__d2b+0xb0>)
 80060be:	4825      	ldr	r0, [pc, #148]	; (8006154 <__d2b+0xb4>)
 80060c0:	f7ff f846 	bl	8005150 <__assert_func>
 80060c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80060cc:	bb2d      	cbnz	r5, 800611a <__d2b+0x7a>
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	f1b8 0300 	subs.w	r3, r8, #0
 80060d4:	d026      	beq.n	8006124 <__d2b+0x84>
 80060d6:	4668      	mov	r0, sp
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	f7ff fd0d 	bl	8005af8 <__lo0bits>
 80060de:	9900      	ldr	r1, [sp, #0]
 80060e0:	b1f0      	cbz	r0, 8006120 <__d2b+0x80>
 80060e2:	9a01      	ldr	r2, [sp, #4]
 80060e4:	f1c0 0320 	rsb	r3, r0, #32
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	430b      	orrs	r3, r1
 80060ee:	40c2      	lsrs	r2, r0
 80060f0:	6163      	str	r3, [r4, #20]
 80060f2:	9201      	str	r2, [sp, #4]
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2102      	movne	r1, #2
 80060fc:	2101      	moveq	r1, #1
 80060fe:	61a3      	str	r3, [r4, #24]
 8006100:	6121      	str	r1, [r4, #16]
 8006102:	b1c5      	cbz	r5, 8006136 <__d2b+0x96>
 8006104:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006108:	4405      	add	r5, r0
 800610a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800610e:	603d      	str	r5, [r7, #0]
 8006110:	6030      	str	r0, [r6, #0]
 8006112:	4620      	mov	r0, r4
 8006114:	b002      	add	sp, #8
 8006116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611e:	e7d6      	b.n	80060ce <__d2b+0x2e>
 8006120:	6161      	str	r1, [r4, #20]
 8006122:	e7e7      	b.n	80060f4 <__d2b+0x54>
 8006124:	a801      	add	r0, sp, #4
 8006126:	f7ff fce7 	bl	8005af8 <__lo0bits>
 800612a:	2101      	movs	r1, #1
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	6121      	str	r1, [r4, #16]
 8006130:	6163      	str	r3, [r4, #20]
 8006132:	3020      	adds	r0, #32
 8006134:	e7e5      	b.n	8006102 <__d2b+0x62>
 8006136:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800613a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800613e:	6038      	str	r0, [r7, #0]
 8006140:	6918      	ldr	r0, [r3, #16]
 8006142:	f7ff fcb9 	bl	8005ab8 <__hi0bits>
 8006146:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800614a:	6031      	str	r1, [r6, #0]
 800614c:	e7e1      	b.n	8006112 <__d2b+0x72>
 800614e:	bf00      	nop
 8006150:	08007694 	.word	0x08007694
 8006154:	08007724 	.word	0x08007724

08006158 <__ratio>:
 8006158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	4688      	mov	r8, r1
 800615e:	4669      	mov	r1, sp
 8006160:	4681      	mov	r9, r0
 8006162:	f7ff ff49 	bl	8005ff8 <__b2d>
 8006166:	460f      	mov	r7, r1
 8006168:	4604      	mov	r4, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4640      	mov	r0, r8
 800616e:	a901      	add	r1, sp, #4
 8006170:	f7ff ff42 	bl	8005ff8 <__b2d>
 8006174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006178:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800617c:	468b      	mov	fp, r1
 800617e:	eba3 0c02 	sub.w	ip, r3, r2
 8006182:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfd5      	itete	le
 8006190:	460a      	movle	r2, r1
 8006192:	462a      	movgt	r2, r5
 8006194:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006198:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800619c:	bfd8      	it	le
 800619e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80061a2:	465b      	mov	r3, fp
 80061a4:	4602      	mov	r2, r0
 80061a6:	4639      	mov	r1, r7
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7fa fb73 	bl	8000894 <__aeabi_ddiv>
 80061ae:	b003      	add	sp, #12
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061b4 <__copybits>:
 80061b4:	3901      	subs	r1, #1
 80061b6:	b570      	push	{r4, r5, r6, lr}
 80061b8:	1149      	asrs	r1, r1, #5
 80061ba:	6914      	ldr	r4, [r2, #16]
 80061bc:	3101      	adds	r1, #1
 80061be:	f102 0314 	add.w	r3, r2, #20
 80061c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061ca:	1f05      	subs	r5, r0, #4
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d30c      	bcc.n	80061ea <__copybits+0x36>
 80061d0:	1aa3      	subs	r3, r4, r2
 80061d2:	3b11      	subs	r3, #17
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	3211      	adds	r2, #17
 80061da:	42a2      	cmp	r2, r4
 80061dc:	bf88      	it	hi
 80061de:	2300      	movhi	r3, #0
 80061e0:	4418      	add	r0, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	4288      	cmp	r0, r1
 80061e6:	d305      	bcc.n	80061f4 <__copybits+0x40>
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80061ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80061f2:	e7eb      	b.n	80061cc <__copybits+0x18>
 80061f4:	f840 3b04 	str.w	r3, [r0], #4
 80061f8:	e7f4      	b.n	80061e4 <__copybits+0x30>

080061fa <__any_on>:
 80061fa:	f100 0214 	add.w	r2, r0, #20
 80061fe:	6900      	ldr	r0, [r0, #16]
 8006200:	114b      	asrs	r3, r1, #5
 8006202:	4298      	cmp	r0, r3
 8006204:	b510      	push	{r4, lr}
 8006206:	db11      	blt.n	800622c <__any_on+0x32>
 8006208:	dd0a      	ble.n	8006220 <__any_on+0x26>
 800620a:	f011 011f 	ands.w	r1, r1, #31
 800620e:	d007      	beq.n	8006220 <__any_on+0x26>
 8006210:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006214:	fa24 f001 	lsr.w	r0, r4, r1
 8006218:	fa00 f101 	lsl.w	r1, r0, r1
 800621c:	428c      	cmp	r4, r1
 800621e:	d10b      	bne.n	8006238 <__any_on+0x3e>
 8006220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006224:	4293      	cmp	r3, r2
 8006226:	d803      	bhi.n	8006230 <__any_on+0x36>
 8006228:	2000      	movs	r0, #0
 800622a:	bd10      	pop	{r4, pc}
 800622c:	4603      	mov	r3, r0
 800622e:	e7f7      	b.n	8006220 <__any_on+0x26>
 8006230:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006234:	2900      	cmp	r1, #0
 8006236:	d0f5      	beq.n	8006224 <__any_on+0x2a>
 8006238:	2001      	movs	r0, #1
 800623a:	e7f6      	b.n	800622a <__any_on+0x30>

0800623c <_calloc_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	fb02 f501 	mul.w	r5, r2, r1
 8006242:	4629      	mov	r1, r5
 8006244:	f000 f854 	bl	80062f0 <_malloc_r>
 8006248:	4604      	mov	r4, r0
 800624a:	b118      	cbz	r0, 8006254 <_calloc_r+0x18>
 800624c:	462a      	mov	r2, r5
 800624e:	2100      	movs	r1, #0
 8006250:	f7fe f8d8 	bl	8004404 <memset>
 8006254:	4620      	mov	r0, r4
 8006256:	bd38      	pop	{r3, r4, r5, pc}

08006258 <_free_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	d043      	beq.n	80062e8 <_free_r+0x90>
 8006260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	18e4      	addlt	r4, r4, r3
 800626c:	f001 f828 	bl	80072c0 <__malloc_lock>
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <_free_r+0x94>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	4610      	mov	r0, r2
 8006276:	b933      	cbnz	r3, 8006286 <_free_r+0x2e>
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	6014      	str	r4, [r2, #0]
 800627c:	4628      	mov	r0, r5
 800627e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006282:	f001 b823 	b.w	80072cc <__malloc_unlock>
 8006286:	42a3      	cmp	r3, r4
 8006288:	d90a      	bls.n	80062a0 <_free_r+0x48>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	1862      	adds	r2, r4, r1
 800628e:	4293      	cmp	r3, r2
 8006290:	bf01      	itttt	eq
 8006292:	681a      	ldreq	r2, [r3, #0]
 8006294:	685b      	ldreq	r3, [r3, #4]
 8006296:	1852      	addeq	r2, r2, r1
 8006298:	6022      	streq	r2, [r4, #0]
 800629a:	6063      	str	r3, [r4, #4]
 800629c:	6004      	str	r4, [r0, #0]
 800629e:	e7ed      	b.n	800627c <_free_r+0x24>
 80062a0:	461a      	mov	r2, r3
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	b10b      	cbz	r3, 80062aa <_free_r+0x52>
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	d9fa      	bls.n	80062a0 <_free_r+0x48>
 80062aa:	6811      	ldr	r1, [r2, #0]
 80062ac:	1850      	adds	r0, r2, r1
 80062ae:	42a0      	cmp	r0, r4
 80062b0:	d10b      	bne.n	80062ca <_free_r+0x72>
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	4401      	add	r1, r0
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	4283      	cmp	r3, r0
 80062ba:	6011      	str	r1, [r2, #0]
 80062bc:	d1de      	bne.n	800627c <_free_r+0x24>
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4401      	add	r1, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	6053      	str	r3, [r2, #4]
 80062c8:	e7d8      	b.n	800627c <_free_r+0x24>
 80062ca:	d902      	bls.n	80062d2 <_free_r+0x7a>
 80062cc:	230c      	movs	r3, #12
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	e7d4      	b.n	800627c <_free_r+0x24>
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	1821      	adds	r1, r4, r0
 80062d6:	428b      	cmp	r3, r1
 80062d8:	bf01      	itttt	eq
 80062da:	6819      	ldreq	r1, [r3, #0]
 80062dc:	685b      	ldreq	r3, [r3, #4]
 80062de:	1809      	addeq	r1, r1, r0
 80062e0:	6021      	streq	r1, [r4, #0]
 80062e2:	6063      	str	r3, [r4, #4]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7c9      	b.n	800627c <_free_r+0x24>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	2000022c 	.word	0x2000022c

080062f0 <_malloc_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	1ccd      	adds	r5, r1, #3
 80062f4:	f025 0503 	bic.w	r5, r5, #3
 80062f8:	3508      	adds	r5, #8
 80062fa:	2d0c      	cmp	r5, #12
 80062fc:	bf38      	it	cc
 80062fe:	250c      	movcc	r5, #12
 8006300:	2d00      	cmp	r5, #0
 8006302:	4606      	mov	r6, r0
 8006304:	db01      	blt.n	800630a <_malloc_r+0x1a>
 8006306:	42a9      	cmp	r1, r5
 8006308:	d903      	bls.n	8006312 <_malloc_r+0x22>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	f000 ffd5 	bl	80072c0 <__malloc_lock>
 8006316:	4921      	ldr	r1, [pc, #132]	; (800639c <_malloc_r+0xac>)
 8006318:	680a      	ldr	r2, [r1, #0]
 800631a:	4614      	mov	r4, r2
 800631c:	b99c      	cbnz	r4, 8006346 <_malloc_r+0x56>
 800631e:	4f20      	ldr	r7, [pc, #128]	; (80063a0 <_malloc_r+0xb0>)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	b923      	cbnz	r3, 800632e <_malloc_r+0x3e>
 8006324:	4621      	mov	r1, r4
 8006326:	4630      	mov	r0, r6
 8006328:	f000 fc8c 	bl	8006c44 <_sbrk_r>
 800632c:	6038      	str	r0, [r7, #0]
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f000 fc87 	bl	8006c44 <_sbrk_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d123      	bne.n	8006382 <_malloc_r+0x92>
 800633a:	230c      	movs	r3, #12
 800633c:	4630      	mov	r0, r6
 800633e:	6033      	str	r3, [r6, #0]
 8006340:	f000 ffc4 	bl	80072cc <__malloc_unlock>
 8006344:	e7e3      	b.n	800630e <_malloc_r+0x1e>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	1b5b      	subs	r3, r3, r5
 800634a:	d417      	bmi.n	800637c <_malloc_r+0x8c>
 800634c:	2b0b      	cmp	r3, #11
 800634e:	d903      	bls.n	8006358 <_malloc_r+0x68>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	441c      	add	r4, r3
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	e004      	b.n	8006362 <_malloc_r+0x72>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	42a2      	cmp	r2, r4
 800635c:	bf0c      	ite	eq
 800635e:	600b      	streq	r3, [r1, #0]
 8006360:	6053      	strne	r3, [r2, #4]
 8006362:	4630      	mov	r0, r6
 8006364:	f000 ffb2 	bl	80072cc <__malloc_unlock>
 8006368:	f104 000b 	add.w	r0, r4, #11
 800636c:	1d23      	adds	r3, r4, #4
 800636e:	f020 0007 	bic.w	r0, r0, #7
 8006372:	1ac2      	subs	r2, r0, r3
 8006374:	d0cc      	beq.n	8006310 <_malloc_r+0x20>
 8006376:	1a1b      	subs	r3, r3, r0
 8006378:	50a3      	str	r3, [r4, r2]
 800637a:	e7c9      	b.n	8006310 <_malloc_r+0x20>
 800637c:	4622      	mov	r2, r4
 800637e:	6864      	ldr	r4, [r4, #4]
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x2c>
 8006382:	1cc4      	adds	r4, r0, #3
 8006384:	f024 0403 	bic.w	r4, r4, #3
 8006388:	42a0      	cmp	r0, r4
 800638a:	d0e3      	beq.n	8006354 <_malloc_r+0x64>
 800638c:	1a21      	subs	r1, r4, r0
 800638e:	4630      	mov	r0, r6
 8006390:	f000 fc58 	bl	8006c44 <_sbrk_r>
 8006394:	3001      	adds	r0, #1
 8006396:	d1dd      	bne.n	8006354 <_malloc_r+0x64>
 8006398:	e7cf      	b.n	800633a <_malloc_r+0x4a>
 800639a:	bf00      	nop
 800639c:	2000022c 	.word	0x2000022c
 80063a0:	20000230 	.word	0x20000230

080063a4 <__ssputs_r>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	688e      	ldr	r6, [r1, #8]
 80063aa:	4682      	mov	sl, r0
 80063ac:	429e      	cmp	r6, r3
 80063ae:	460c      	mov	r4, r1
 80063b0:	4690      	mov	r8, r2
 80063b2:	461f      	mov	r7, r3
 80063b4:	d838      	bhi.n	8006428 <__ssputs_r+0x84>
 80063b6:	898a      	ldrh	r2, [r1, #12]
 80063b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063bc:	d032      	beq.n	8006424 <__ssputs_r+0x80>
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	6909      	ldr	r1, [r1, #16]
 80063c2:	3301      	adds	r3, #1
 80063c4:	eba5 0901 	sub.w	r9, r5, r1
 80063c8:	6965      	ldr	r5, [r4, #20]
 80063ca:	444b      	add	r3, r9
 80063cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063d4:	106d      	asrs	r5, r5, #1
 80063d6:	429d      	cmp	r5, r3
 80063d8:	bf38      	it	cc
 80063da:	461d      	movcc	r5, r3
 80063dc:	0553      	lsls	r3, r2, #21
 80063de:	d531      	bpl.n	8006444 <__ssputs_r+0xa0>
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7ff ff85 	bl	80062f0 <_malloc_r>
 80063e6:	4606      	mov	r6, r0
 80063e8:	b950      	cbnz	r0, 8006400 <__ssputs_r+0x5c>
 80063ea:	230c      	movs	r3, #12
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	f8ca 3000 	str.w	r3, [sl]
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	464a      	mov	r2, r9
 8006402:	6921      	ldr	r1, [r4, #16]
 8006404:	f7ff fa54 	bl	80058b0 <memcpy>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800640e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	6126      	str	r6, [r4, #16]
 8006416:	444e      	add	r6, r9
 8006418:	6026      	str	r6, [r4, #0]
 800641a:	463e      	mov	r6, r7
 800641c:	6165      	str	r5, [r4, #20]
 800641e:	eba5 0509 	sub.w	r5, r5, r9
 8006422:	60a5      	str	r5, [r4, #8]
 8006424:	42be      	cmp	r6, r7
 8006426:	d900      	bls.n	800642a <__ssputs_r+0x86>
 8006428:	463e      	mov	r6, r7
 800642a:	4632      	mov	r2, r6
 800642c:	4641      	mov	r1, r8
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	f000 ff2c 	bl	800728c <memmove>
 8006434:	68a3      	ldr	r3, [r4, #8]
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	1b9b      	subs	r3, r3, r6
 800643a:	4432      	add	r2, r6
 800643c:	2000      	movs	r0, #0
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	e7db      	b.n	80063fc <__ssputs_r+0x58>
 8006444:	462a      	mov	r2, r5
 8006446:	f000 ff47 	bl	80072d8 <_realloc_r>
 800644a:	4606      	mov	r6, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	d1e1      	bne.n	8006414 <__ssputs_r+0x70>
 8006450:	4650      	mov	r0, sl
 8006452:	6921      	ldr	r1, [r4, #16]
 8006454:	f7ff ff00 	bl	8006258 <_free_r>
 8006458:	e7c7      	b.n	80063ea <__ssputs_r+0x46>
	...

0800645c <_svfiprintf_r>:
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	4698      	mov	r8, r3
 8006462:	898b      	ldrh	r3, [r1, #12]
 8006464:	4607      	mov	r7, r0
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	460d      	mov	r5, r1
 800646a:	4614      	mov	r4, r2
 800646c:	b09d      	sub	sp, #116	; 0x74
 800646e:	d50e      	bpl.n	800648e <_svfiprintf_r+0x32>
 8006470:	690b      	ldr	r3, [r1, #16]
 8006472:	b963      	cbnz	r3, 800648e <_svfiprintf_r+0x32>
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	f7ff ff3b 	bl	80062f0 <_malloc_r>
 800647a:	6028      	str	r0, [r5, #0]
 800647c:	6128      	str	r0, [r5, #16]
 800647e:	b920      	cbnz	r0, 800648a <_svfiprintf_r+0x2e>
 8006480:	230c      	movs	r3, #12
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006488:	e0d1      	b.n	800662e <_svfiprintf_r+0x1d2>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	616b      	str	r3, [r5, #20]
 800648e:	2300      	movs	r3, #0
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	2320      	movs	r3, #32
 8006494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	f04f 0901 	mov.w	r9, #1
 800649e:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006648 <_svfiprintf_r+0x1ec>
 80064a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064aa:	4623      	mov	r3, r4
 80064ac:	469a      	mov	sl, r3
 80064ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b2:	b10a      	cbz	r2, 80064b8 <_svfiprintf_r+0x5c>
 80064b4:	2a25      	cmp	r2, #37	; 0x25
 80064b6:	d1f9      	bne.n	80064ac <_svfiprintf_r+0x50>
 80064b8:	ebba 0b04 	subs.w	fp, sl, r4
 80064bc:	d00b      	beq.n	80064d6 <_svfiprintf_r+0x7a>
 80064be:	465b      	mov	r3, fp
 80064c0:	4622      	mov	r2, r4
 80064c2:	4629      	mov	r1, r5
 80064c4:	4638      	mov	r0, r7
 80064c6:	f7ff ff6d 	bl	80063a4 <__ssputs_r>
 80064ca:	3001      	adds	r0, #1
 80064cc:	f000 80aa 	beq.w	8006624 <_svfiprintf_r+0x1c8>
 80064d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d2:	445a      	add	r2, fp
 80064d4:	9209      	str	r2, [sp, #36]	; 0x24
 80064d6:	f89a 3000 	ldrb.w	r3, [sl]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a2 	beq.w	8006624 <_svfiprintf_r+0x1c8>
 80064e0:	2300      	movs	r3, #0
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ea:	f10a 0a01 	add.w	sl, sl, #1
 80064ee:	9304      	str	r3, [sp, #16]
 80064f0:	9307      	str	r3, [sp, #28]
 80064f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f6:	931a      	str	r3, [sp, #104]	; 0x68
 80064f8:	4654      	mov	r4, sl
 80064fa:	2205      	movs	r2, #5
 80064fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006500:	4851      	ldr	r0, [pc, #324]	; (8006648 <_svfiprintf_r+0x1ec>)
 8006502:	f000 feb5 	bl	8007270 <memchr>
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	b9d8      	cbnz	r0, 8006542 <_svfiprintf_r+0xe6>
 800650a:	06d0      	lsls	r0, r2, #27
 800650c:	bf44      	itt	mi
 800650e:	2320      	movmi	r3, #32
 8006510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006514:	0711      	lsls	r1, r2, #28
 8006516:	bf44      	itt	mi
 8006518:	232b      	movmi	r3, #43	; 0x2b
 800651a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651e:	f89a 3000 	ldrb.w	r3, [sl]
 8006522:	2b2a      	cmp	r3, #42	; 0x2a
 8006524:	d015      	beq.n	8006552 <_svfiprintf_r+0xf6>
 8006526:	4654      	mov	r4, sl
 8006528:	2000      	movs	r0, #0
 800652a:	f04f 0c0a 	mov.w	ip, #10
 800652e:	9a07      	ldr	r2, [sp, #28]
 8006530:	4621      	mov	r1, r4
 8006532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006536:	3b30      	subs	r3, #48	; 0x30
 8006538:	2b09      	cmp	r3, #9
 800653a:	d94e      	bls.n	80065da <_svfiprintf_r+0x17e>
 800653c:	b1b0      	cbz	r0, 800656c <_svfiprintf_r+0x110>
 800653e:	9207      	str	r2, [sp, #28]
 8006540:	e014      	b.n	800656c <_svfiprintf_r+0x110>
 8006542:	eba0 0308 	sub.w	r3, r0, r8
 8006546:	fa09 f303 	lsl.w	r3, r9, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	46a2      	mov	sl, r4
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	e7d2      	b.n	80064f8 <_svfiprintf_r+0x9c>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfbb      	ittet	lt
 800655e:	425b      	neglt	r3, r3
 8006560:	f042 0202 	orrlt.w	r2, r2, #2
 8006564:	9307      	strge	r3, [sp, #28]
 8006566:	9307      	strlt	r3, [sp, #28]
 8006568:	bfb8      	it	lt
 800656a:	9204      	strlt	r2, [sp, #16]
 800656c:	7823      	ldrb	r3, [r4, #0]
 800656e:	2b2e      	cmp	r3, #46	; 0x2e
 8006570:	d10c      	bne.n	800658c <_svfiprintf_r+0x130>
 8006572:	7863      	ldrb	r3, [r4, #1]
 8006574:	2b2a      	cmp	r3, #42	; 0x2a
 8006576:	d135      	bne.n	80065e4 <_svfiprintf_r+0x188>
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	3402      	adds	r4, #2
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb8      	it	lt
 8006586:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006658 <_svfiprintf_r+0x1fc>
 8006590:	2203      	movs	r2, #3
 8006592:	4650      	mov	r0, sl
 8006594:	7821      	ldrb	r1, [r4, #0]
 8006596:	f000 fe6b 	bl	8007270 <memchr>
 800659a:	b140      	cbz	r0, 80065ae <_svfiprintf_r+0x152>
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	eba0 000a 	sub.w	r0, r0, sl
 80065a2:	fa03 f000 	lsl.w	r0, r3, r0
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	3401      	adds	r4, #1
 80065aa:	4303      	orrs	r3, r0
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b2:	2206      	movs	r2, #6
 80065b4:	4825      	ldr	r0, [pc, #148]	; (800664c <_svfiprintf_r+0x1f0>)
 80065b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ba:	f000 fe59 	bl	8007270 <memchr>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d038      	beq.n	8006634 <_svfiprintf_r+0x1d8>
 80065c2:	4b23      	ldr	r3, [pc, #140]	; (8006650 <_svfiprintf_r+0x1f4>)
 80065c4:	bb1b      	cbnz	r3, 800660e <_svfiprintf_r+0x1b2>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	3307      	adds	r3, #7
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	3308      	adds	r3, #8
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	4433      	add	r3, r6
 80065d6:	9309      	str	r3, [sp, #36]	; 0x24
 80065d8:	e767      	b.n	80064aa <_svfiprintf_r+0x4e>
 80065da:	460c      	mov	r4, r1
 80065dc:	2001      	movs	r0, #1
 80065de:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e2:	e7a5      	b.n	8006530 <_svfiprintf_r+0xd4>
 80065e4:	2300      	movs	r3, #0
 80065e6:	f04f 0c0a 	mov.w	ip, #10
 80065ea:	4619      	mov	r1, r3
 80065ec:	3401      	adds	r4, #1
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f6:	3a30      	subs	r2, #48	; 0x30
 80065f8:	2a09      	cmp	r2, #9
 80065fa:	d903      	bls.n	8006604 <_svfiprintf_r+0x1a8>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0c5      	beq.n	800658c <_svfiprintf_r+0x130>
 8006600:	9105      	str	r1, [sp, #20]
 8006602:	e7c3      	b.n	800658c <_svfiprintf_r+0x130>
 8006604:	4604      	mov	r4, r0
 8006606:	2301      	movs	r3, #1
 8006608:	fb0c 2101 	mla	r1, ip, r1, r2
 800660c:	e7f0      	b.n	80065f0 <_svfiprintf_r+0x194>
 800660e:	ab03      	add	r3, sp, #12
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	462a      	mov	r2, r5
 8006614:	4638      	mov	r0, r7
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <_svfiprintf_r+0x1f8>)
 8006618:	a904      	add	r1, sp, #16
 800661a:	f3af 8000 	nop.w
 800661e:	1c42      	adds	r2, r0, #1
 8006620:	4606      	mov	r6, r0
 8006622:	d1d6      	bne.n	80065d2 <_svfiprintf_r+0x176>
 8006624:	89ab      	ldrh	r3, [r5, #12]
 8006626:	065b      	lsls	r3, r3, #25
 8006628:	f53f af2c 	bmi.w	8006484 <_svfiprintf_r+0x28>
 800662c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662e:	b01d      	add	sp, #116	; 0x74
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	ab03      	add	r3, sp, #12
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	462a      	mov	r2, r5
 800663a:	4638      	mov	r0, r7
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <_svfiprintf_r+0x1f8>)
 800663e:	a904      	add	r1, sp, #16
 8006640:	f000 f9d4 	bl	80069ec <_printf_i>
 8006644:	e7eb      	b.n	800661e <_svfiprintf_r+0x1c2>
 8006646:	bf00      	nop
 8006648:	08007884 	.word	0x08007884
 800664c:	0800788e 	.word	0x0800788e
 8006650:	00000000 	.word	0x00000000
 8006654:	080063a5 	.word	0x080063a5
 8006658:	0800788a 	.word	0x0800788a

0800665c <__sfputc_r>:
 800665c:	6893      	ldr	r3, [r2, #8]
 800665e:	b410      	push	{r4}
 8006660:	3b01      	subs	r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	6093      	str	r3, [r2, #8]
 8006666:	da07      	bge.n	8006678 <__sfputc_r+0x1c>
 8006668:	6994      	ldr	r4, [r2, #24]
 800666a:	42a3      	cmp	r3, r4
 800666c:	db01      	blt.n	8006672 <__sfputc_r+0x16>
 800666e:	290a      	cmp	r1, #10
 8006670:	d102      	bne.n	8006678 <__sfputc_r+0x1c>
 8006672:	bc10      	pop	{r4}
 8006674:	f000 bb08 	b.w	8006c88 <__swbuf_r>
 8006678:	6813      	ldr	r3, [r2, #0]
 800667a:	1c58      	adds	r0, r3, #1
 800667c:	6010      	str	r0, [r2, #0]
 800667e:	7019      	strb	r1, [r3, #0]
 8006680:	4608      	mov	r0, r1
 8006682:	bc10      	pop	{r4}
 8006684:	4770      	bx	lr

08006686 <__sfputs_r>:
 8006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	4614      	mov	r4, r2
 800668e:	18d5      	adds	r5, r2, r3
 8006690:	42ac      	cmp	r4, r5
 8006692:	d101      	bne.n	8006698 <__sfputs_r+0x12>
 8006694:	2000      	movs	r0, #0
 8006696:	e007      	b.n	80066a8 <__sfputs_r+0x22>
 8006698:	463a      	mov	r2, r7
 800669a:	4630      	mov	r0, r6
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	f7ff ffdc 	bl	800665c <__sfputc_r>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d1f3      	bne.n	8006690 <__sfputs_r+0xa>
 80066a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066ac <_vfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	460d      	mov	r5, r1
 80066b2:	4614      	mov	r4, r2
 80066b4:	4698      	mov	r8, r3
 80066b6:	4606      	mov	r6, r0
 80066b8:	b09d      	sub	sp, #116	; 0x74
 80066ba:	b118      	cbz	r0, 80066c4 <_vfiprintf_r+0x18>
 80066bc:	6983      	ldr	r3, [r0, #24]
 80066be:	b90b      	cbnz	r3, 80066c4 <_vfiprintf_r+0x18>
 80066c0:	f000 fcd2 	bl	8007068 <__sinit>
 80066c4:	4b89      	ldr	r3, [pc, #548]	; (80068ec <_vfiprintf_r+0x240>)
 80066c6:	429d      	cmp	r5, r3
 80066c8:	d11b      	bne.n	8006702 <_vfiprintf_r+0x56>
 80066ca:	6875      	ldr	r5, [r6, #4]
 80066cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	d405      	bmi.n	80066de <_vfiprintf_r+0x32>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	059a      	lsls	r2, r3, #22
 80066d6:	d402      	bmi.n	80066de <_vfiprintf_r+0x32>
 80066d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066da:	f000 fd63 	bl	80071a4 <__retarget_lock_acquire_recursive>
 80066de:	89ab      	ldrh	r3, [r5, #12]
 80066e0:	071b      	lsls	r3, r3, #28
 80066e2:	d501      	bpl.n	80066e8 <_vfiprintf_r+0x3c>
 80066e4:	692b      	ldr	r3, [r5, #16]
 80066e6:	b9eb      	cbnz	r3, 8006724 <_vfiprintf_r+0x78>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 fb2c 	bl	8006d48 <__swsetup_r>
 80066f0:	b1c0      	cbz	r0, 8006724 <_vfiprintf_r+0x78>
 80066f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066f4:	07dc      	lsls	r4, r3, #31
 80066f6:	d50e      	bpl.n	8006716 <_vfiprintf_r+0x6a>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066fc:	b01d      	add	sp, #116	; 0x74
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	4b7b      	ldr	r3, [pc, #492]	; (80068f0 <_vfiprintf_r+0x244>)
 8006704:	429d      	cmp	r5, r3
 8006706:	d101      	bne.n	800670c <_vfiprintf_r+0x60>
 8006708:	68b5      	ldr	r5, [r6, #8]
 800670a:	e7df      	b.n	80066cc <_vfiprintf_r+0x20>
 800670c:	4b79      	ldr	r3, [pc, #484]	; (80068f4 <_vfiprintf_r+0x248>)
 800670e:	429d      	cmp	r5, r3
 8006710:	bf08      	it	eq
 8006712:	68f5      	ldreq	r5, [r6, #12]
 8006714:	e7da      	b.n	80066cc <_vfiprintf_r+0x20>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	0598      	lsls	r0, r3, #22
 800671a:	d4ed      	bmi.n	80066f8 <_vfiprintf_r+0x4c>
 800671c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800671e:	f000 fd42 	bl	80071a6 <__retarget_lock_release_recursive>
 8006722:	e7e9      	b.n	80066f8 <_vfiprintf_r+0x4c>
 8006724:	2300      	movs	r3, #0
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	2320      	movs	r3, #32
 800672a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800672e:	2330      	movs	r3, #48	; 0x30
 8006730:	f04f 0901 	mov.w	r9, #1
 8006734:	f8cd 800c 	str.w	r8, [sp, #12]
 8006738:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068f8 <_vfiprintf_r+0x24c>
 800673c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006740:	4623      	mov	r3, r4
 8006742:	469a      	mov	sl, r3
 8006744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006748:	b10a      	cbz	r2, 800674e <_vfiprintf_r+0xa2>
 800674a:	2a25      	cmp	r2, #37	; 0x25
 800674c:	d1f9      	bne.n	8006742 <_vfiprintf_r+0x96>
 800674e:	ebba 0b04 	subs.w	fp, sl, r4
 8006752:	d00b      	beq.n	800676c <_vfiprintf_r+0xc0>
 8006754:	465b      	mov	r3, fp
 8006756:	4622      	mov	r2, r4
 8006758:	4629      	mov	r1, r5
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ff93 	bl	8006686 <__sfputs_r>
 8006760:	3001      	adds	r0, #1
 8006762:	f000 80aa 	beq.w	80068ba <_vfiprintf_r+0x20e>
 8006766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006768:	445a      	add	r2, fp
 800676a:	9209      	str	r2, [sp, #36]	; 0x24
 800676c:	f89a 3000 	ldrb.w	r3, [sl]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80a2 	beq.w	80068ba <_vfiprintf_r+0x20e>
 8006776:	2300      	movs	r3, #0
 8006778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800677c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006780:	f10a 0a01 	add.w	sl, sl, #1
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800678c:	931a      	str	r3, [sp, #104]	; 0x68
 800678e:	4654      	mov	r4, sl
 8006790:	2205      	movs	r2, #5
 8006792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006796:	4858      	ldr	r0, [pc, #352]	; (80068f8 <_vfiprintf_r+0x24c>)
 8006798:	f000 fd6a 	bl	8007270 <memchr>
 800679c:	9a04      	ldr	r2, [sp, #16]
 800679e:	b9d8      	cbnz	r0, 80067d8 <_vfiprintf_r+0x12c>
 80067a0:	06d1      	lsls	r1, r2, #27
 80067a2:	bf44      	itt	mi
 80067a4:	2320      	movmi	r3, #32
 80067a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067aa:	0713      	lsls	r3, r2, #28
 80067ac:	bf44      	itt	mi
 80067ae:	232b      	movmi	r3, #43	; 0x2b
 80067b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067b4:	f89a 3000 	ldrb.w	r3, [sl]
 80067b8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ba:	d015      	beq.n	80067e8 <_vfiprintf_r+0x13c>
 80067bc:	4654      	mov	r4, sl
 80067be:	2000      	movs	r0, #0
 80067c0:	f04f 0c0a 	mov.w	ip, #10
 80067c4:	9a07      	ldr	r2, [sp, #28]
 80067c6:	4621      	mov	r1, r4
 80067c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067cc:	3b30      	subs	r3, #48	; 0x30
 80067ce:	2b09      	cmp	r3, #9
 80067d0:	d94e      	bls.n	8006870 <_vfiprintf_r+0x1c4>
 80067d2:	b1b0      	cbz	r0, 8006802 <_vfiprintf_r+0x156>
 80067d4:	9207      	str	r2, [sp, #28]
 80067d6:	e014      	b.n	8006802 <_vfiprintf_r+0x156>
 80067d8:	eba0 0308 	sub.w	r3, r0, r8
 80067dc:	fa09 f303 	lsl.w	r3, r9, r3
 80067e0:	4313      	orrs	r3, r2
 80067e2:	46a2      	mov	sl, r4
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	e7d2      	b.n	800678e <_vfiprintf_r+0xe2>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	1d19      	adds	r1, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	9103      	str	r1, [sp, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfbb      	ittet	lt
 80067f4:	425b      	neglt	r3, r3
 80067f6:	f042 0202 	orrlt.w	r2, r2, #2
 80067fa:	9307      	strge	r3, [sp, #28]
 80067fc:	9307      	strlt	r3, [sp, #28]
 80067fe:	bfb8      	it	lt
 8006800:	9204      	strlt	r2, [sp, #16]
 8006802:	7823      	ldrb	r3, [r4, #0]
 8006804:	2b2e      	cmp	r3, #46	; 0x2e
 8006806:	d10c      	bne.n	8006822 <_vfiprintf_r+0x176>
 8006808:	7863      	ldrb	r3, [r4, #1]
 800680a:	2b2a      	cmp	r3, #42	; 0x2a
 800680c:	d135      	bne.n	800687a <_vfiprintf_r+0x1ce>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3402      	adds	r4, #2
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	9203      	str	r2, [sp, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	bfb8      	it	lt
 800681c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006820:	9305      	str	r3, [sp, #20]
 8006822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006908 <_vfiprintf_r+0x25c>
 8006826:	2203      	movs	r2, #3
 8006828:	4650      	mov	r0, sl
 800682a:	7821      	ldrb	r1, [r4, #0]
 800682c:	f000 fd20 	bl	8007270 <memchr>
 8006830:	b140      	cbz	r0, 8006844 <_vfiprintf_r+0x198>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	eba0 000a 	sub.w	r0, r0, sl
 8006838:	fa03 f000 	lsl.w	r0, r3, r0
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	3401      	adds	r4, #1
 8006840:	4303      	orrs	r3, r0
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006848:	2206      	movs	r2, #6
 800684a:	482c      	ldr	r0, [pc, #176]	; (80068fc <_vfiprintf_r+0x250>)
 800684c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006850:	f000 fd0e 	bl	8007270 <memchr>
 8006854:	2800      	cmp	r0, #0
 8006856:	d03f      	beq.n	80068d8 <_vfiprintf_r+0x22c>
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <_vfiprintf_r+0x254>)
 800685a:	bb1b      	cbnz	r3, 80068a4 <_vfiprintf_r+0x1f8>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	3307      	adds	r3, #7
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	3308      	adds	r3, #8
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686a:	443b      	add	r3, r7
 800686c:	9309      	str	r3, [sp, #36]	; 0x24
 800686e:	e767      	b.n	8006740 <_vfiprintf_r+0x94>
 8006870:	460c      	mov	r4, r1
 8006872:	2001      	movs	r0, #1
 8006874:	fb0c 3202 	mla	r2, ip, r2, r3
 8006878:	e7a5      	b.n	80067c6 <_vfiprintf_r+0x11a>
 800687a:	2300      	movs	r3, #0
 800687c:	f04f 0c0a 	mov.w	ip, #10
 8006880:	4619      	mov	r1, r3
 8006882:	3401      	adds	r4, #1
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	4620      	mov	r0, r4
 8006888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800688c:	3a30      	subs	r2, #48	; 0x30
 800688e:	2a09      	cmp	r2, #9
 8006890:	d903      	bls.n	800689a <_vfiprintf_r+0x1ee>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0c5      	beq.n	8006822 <_vfiprintf_r+0x176>
 8006896:	9105      	str	r1, [sp, #20]
 8006898:	e7c3      	b.n	8006822 <_vfiprintf_r+0x176>
 800689a:	4604      	mov	r4, r0
 800689c:	2301      	movs	r3, #1
 800689e:	fb0c 2101 	mla	r1, ip, r1, r2
 80068a2:	e7f0      	b.n	8006886 <_vfiprintf_r+0x1da>
 80068a4:	ab03      	add	r3, sp, #12
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	462a      	mov	r2, r5
 80068aa:	4630      	mov	r0, r6
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <_vfiprintf_r+0x258>)
 80068ae:	a904      	add	r1, sp, #16
 80068b0:	f3af 8000 	nop.w
 80068b4:	4607      	mov	r7, r0
 80068b6:	1c78      	adds	r0, r7, #1
 80068b8:	d1d6      	bne.n	8006868 <_vfiprintf_r+0x1bc>
 80068ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068bc:	07d9      	lsls	r1, r3, #31
 80068be:	d405      	bmi.n	80068cc <_vfiprintf_r+0x220>
 80068c0:	89ab      	ldrh	r3, [r5, #12]
 80068c2:	059a      	lsls	r2, r3, #22
 80068c4:	d402      	bmi.n	80068cc <_vfiprintf_r+0x220>
 80068c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068c8:	f000 fc6d 	bl	80071a6 <__retarget_lock_release_recursive>
 80068cc:	89ab      	ldrh	r3, [r5, #12]
 80068ce:	065b      	lsls	r3, r3, #25
 80068d0:	f53f af12 	bmi.w	80066f8 <_vfiprintf_r+0x4c>
 80068d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068d6:	e711      	b.n	80066fc <_vfiprintf_r+0x50>
 80068d8:	ab03      	add	r3, sp, #12
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	462a      	mov	r2, r5
 80068de:	4630      	mov	r0, r6
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <_vfiprintf_r+0x258>)
 80068e2:	a904      	add	r1, sp, #16
 80068e4:	f000 f882 	bl	80069ec <_printf_i>
 80068e8:	e7e4      	b.n	80068b4 <_vfiprintf_r+0x208>
 80068ea:	bf00      	nop
 80068ec:	080079d8 	.word	0x080079d8
 80068f0:	080079f8 	.word	0x080079f8
 80068f4:	080079b8 	.word	0x080079b8
 80068f8:	08007884 	.word	0x08007884
 80068fc:	0800788e 	.word	0x0800788e
 8006900:	00000000 	.word	0x00000000
 8006904:	08006687 	.word	0x08006687
 8006908:	0800788a 	.word	0x0800788a

0800690c <_printf_common>:
 800690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	4616      	mov	r6, r2
 8006912:	4699      	mov	r9, r3
 8006914:	688a      	ldr	r2, [r1, #8]
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	4607      	mov	r7, r0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfb8      	it	lt
 800691e:	4613      	movlt	r3, r2
 8006920:	6033      	str	r3, [r6, #0]
 8006922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006926:	460c      	mov	r4, r1
 8006928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800692c:	b10a      	cbz	r2, 8006932 <_printf_common+0x26>
 800692e:	3301      	adds	r3, #1
 8006930:	6033      	str	r3, [r6, #0]
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	0699      	lsls	r1, r3, #26
 8006936:	bf42      	ittt	mi
 8006938:	6833      	ldrmi	r3, [r6, #0]
 800693a:	3302      	addmi	r3, #2
 800693c:	6033      	strmi	r3, [r6, #0]
 800693e:	6825      	ldr	r5, [r4, #0]
 8006940:	f015 0506 	ands.w	r5, r5, #6
 8006944:	d106      	bne.n	8006954 <_printf_common+0x48>
 8006946:	f104 0a19 	add.w	sl, r4, #25
 800694a:	68e3      	ldr	r3, [r4, #12]
 800694c:	6832      	ldr	r2, [r6, #0]
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	42ab      	cmp	r3, r5
 8006952:	dc28      	bgt.n	80069a6 <_printf_common+0x9a>
 8006954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006958:	1e13      	subs	r3, r2, #0
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	bf18      	it	ne
 800695e:	2301      	movne	r3, #1
 8006960:	0692      	lsls	r2, r2, #26
 8006962:	d42d      	bmi.n	80069c0 <_printf_common+0xb4>
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d020      	beq.n	80069b4 <_printf_common+0xa8>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	68e5      	ldr	r5, [r4, #12]
 8006976:	f003 0306 	and.w	r3, r3, #6
 800697a:	2b04      	cmp	r3, #4
 800697c:	bf18      	it	ne
 800697e:	2500      	movne	r5, #0
 8006980:	6832      	ldr	r2, [r6, #0]
 8006982:	f04f 0600 	mov.w	r6, #0
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	bf08      	it	eq
 800698a:	1aad      	subeq	r5, r5, r2
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	bf08      	it	eq
 8006990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006994:	4293      	cmp	r3, r2
 8006996:	bfc4      	itt	gt
 8006998:	1a9b      	subgt	r3, r3, r2
 800699a:	18ed      	addgt	r5, r5, r3
 800699c:	341a      	adds	r4, #26
 800699e:	42b5      	cmp	r5, r6
 80069a0:	d11a      	bne.n	80069d8 <_printf_common+0xcc>
 80069a2:	2000      	movs	r0, #0
 80069a4:	e008      	b.n	80069b8 <_printf_common+0xac>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4652      	mov	r2, sl
 80069aa:	4649      	mov	r1, r9
 80069ac:	4638      	mov	r0, r7
 80069ae:	47c0      	blx	r8
 80069b0:	3001      	adds	r0, #1
 80069b2:	d103      	bne.n	80069bc <_printf_common+0xb0>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	3501      	adds	r5, #1
 80069be:	e7c4      	b.n	800694a <_printf_common+0x3e>
 80069c0:	2030      	movs	r0, #48	; 0x30
 80069c2:	18e1      	adds	r1, r4, r3
 80069c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ce:	4422      	add	r2, r4
 80069d0:	3302      	adds	r3, #2
 80069d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069d6:	e7c5      	b.n	8006964 <_printf_common+0x58>
 80069d8:	2301      	movs	r3, #1
 80069da:	4622      	mov	r2, r4
 80069dc:	4649      	mov	r1, r9
 80069de:	4638      	mov	r0, r7
 80069e0:	47c0      	blx	r8
 80069e2:	3001      	adds	r0, #1
 80069e4:	d0e6      	beq.n	80069b4 <_printf_common+0xa8>
 80069e6:	3601      	adds	r6, #1
 80069e8:	e7d9      	b.n	800699e <_printf_common+0x92>
	...

080069ec <_printf_i>:
 80069ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	7e27      	ldrb	r7, [r4, #24]
 80069f4:	4691      	mov	r9, r2
 80069f6:	2f78      	cmp	r7, #120	; 0x78
 80069f8:	4680      	mov	r8, r0
 80069fa:	469a      	mov	sl, r3
 80069fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a02:	d807      	bhi.n	8006a14 <_printf_i+0x28>
 8006a04:	2f62      	cmp	r7, #98	; 0x62
 8006a06:	d80a      	bhi.n	8006a1e <_printf_i+0x32>
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	f000 80d9 	beq.w	8006bc0 <_printf_i+0x1d4>
 8006a0e:	2f58      	cmp	r7, #88	; 0x58
 8006a10:	f000 80a4 	beq.w	8006b5c <_printf_i+0x170>
 8006a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a1c:	e03a      	b.n	8006a94 <_printf_i+0xa8>
 8006a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a22:	2b15      	cmp	r3, #21
 8006a24:	d8f6      	bhi.n	8006a14 <_printf_i+0x28>
 8006a26:	a001      	add	r0, pc, #4	; (adr r0, 8006a2c <_printf_i+0x40>)
 8006a28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a99 	.word	0x08006a99
 8006a34:	08006a15 	.word	0x08006a15
 8006a38:	08006a15 	.word	0x08006a15
 8006a3c:	08006a15 	.word	0x08006a15
 8006a40:	08006a15 	.word	0x08006a15
 8006a44:	08006a99 	.word	0x08006a99
 8006a48:	08006a15 	.word	0x08006a15
 8006a4c:	08006a15 	.word	0x08006a15
 8006a50:	08006a15 	.word	0x08006a15
 8006a54:	08006a15 	.word	0x08006a15
 8006a58:	08006ba7 	.word	0x08006ba7
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006b89 	.word	0x08006b89
 8006a64:	08006a15 	.word	0x08006a15
 8006a68:	08006a15 	.word	0x08006a15
 8006a6c:	08006bc9 	.word	0x08006bc9
 8006a70:	08006a15 	.word	0x08006a15
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006a15 	.word	0x08006a15
 8006a7c:	08006a15 	.word	0x08006a15
 8006a80:	08006b91 	.word	0x08006b91
 8006a84:	680b      	ldr	r3, [r1, #0]
 8006a86:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a8a:	1d1a      	adds	r2, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	600a      	str	r2, [r1, #0]
 8006a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0a4      	b.n	8006be2 <_printf_i+0x1f6>
 8006a98:	6825      	ldr	r5, [r4, #0]
 8006a9a:	6808      	ldr	r0, [r1, #0]
 8006a9c:	062e      	lsls	r6, r5, #24
 8006a9e:	f100 0304 	add.w	r3, r0, #4
 8006aa2:	d50a      	bpl.n	8006aba <_printf_i+0xce>
 8006aa4:	6805      	ldr	r5, [r0, #0]
 8006aa6:	600b      	str	r3, [r1, #0]
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	da03      	bge.n	8006ab4 <_printf_i+0xc8>
 8006aac:	232d      	movs	r3, #45	; 0x2d
 8006aae:	426d      	negs	r5, r5
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab4:	230a      	movs	r3, #10
 8006ab6:	485e      	ldr	r0, [pc, #376]	; (8006c30 <_printf_i+0x244>)
 8006ab8:	e019      	b.n	8006aee <_printf_i+0x102>
 8006aba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006abe:	6805      	ldr	r5, [r0, #0]
 8006ac0:	600b      	str	r3, [r1, #0]
 8006ac2:	bf18      	it	ne
 8006ac4:	b22d      	sxthne	r5, r5
 8006ac6:	e7ef      	b.n	8006aa8 <_printf_i+0xbc>
 8006ac8:	680b      	ldr	r3, [r1, #0]
 8006aca:	6825      	ldr	r5, [r4, #0]
 8006acc:	1d18      	adds	r0, r3, #4
 8006ace:	6008      	str	r0, [r1, #0]
 8006ad0:	0628      	lsls	r0, r5, #24
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0xec>
 8006ad4:	681d      	ldr	r5, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0xf2>
 8006ad8:	0669      	lsls	r1, r5, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0xe8>
 8006adc:	881d      	ldrh	r5, [r3, #0]
 8006ade:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2308      	moveq	r3, #8
 8006ae4:	230a      	movne	r3, #10
 8006ae6:	4852      	ldr	r0, [pc, #328]	; (8006c30 <_printf_i+0x244>)
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aee:	6866      	ldr	r6, [r4, #4]
 8006af0:	2e00      	cmp	r6, #0
 8006af2:	bfa8      	it	ge
 8006af4:	6821      	ldrge	r1, [r4, #0]
 8006af6:	60a6      	str	r6, [r4, #8]
 8006af8:	bfa4      	itt	ge
 8006afa:	f021 0104 	bicge.w	r1, r1, #4
 8006afe:	6021      	strge	r1, [r4, #0]
 8006b00:	b90d      	cbnz	r5, 8006b06 <_printf_i+0x11a>
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	d04d      	beq.n	8006ba2 <_printf_i+0x1b6>
 8006b06:	4616      	mov	r6, r2
 8006b08:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b0c:	fb03 5711 	mls	r7, r3, r1, r5
 8006b10:	5dc7      	ldrb	r7, [r0, r7]
 8006b12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b16:	462f      	mov	r7, r5
 8006b18:	42bb      	cmp	r3, r7
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	d9f4      	bls.n	8006b08 <_printf_i+0x11c>
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d10b      	bne.n	8006b3a <_printf_i+0x14e>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	07df      	lsls	r7, r3, #31
 8006b26:	d508      	bpl.n	8006b3a <_printf_i+0x14e>
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	6861      	ldr	r1, [r4, #4]
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	bfde      	ittt	le
 8006b30:	2330      	movle	r3, #48	; 0x30
 8006b32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b36:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006b3a:	1b92      	subs	r2, r2, r6
 8006b3c:	6122      	str	r2, [r4, #16]
 8006b3e:	464b      	mov	r3, r9
 8006b40:	4621      	mov	r1, r4
 8006b42:	4640      	mov	r0, r8
 8006b44:	f8cd a000 	str.w	sl, [sp]
 8006b48:	aa03      	add	r2, sp, #12
 8006b4a:	f7ff fedf 	bl	800690c <_printf_common>
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d14c      	bne.n	8006bec <_printf_i+0x200>
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b56:	b004      	add	sp, #16
 8006b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5c:	4834      	ldr	r0, [pc, #208]	; (8006c30 <_printf_i+0x244>)
 8006b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b62:	680e      	ldr	r6, [r1, #0]
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b6a:	061f      	lsls	r7, r3, #24
 8006b6c:	600e      	str	r6, [r1, #0]
 8006b6e:	d514      	bpl.n	8006b9a <_printf_i+0x1ae>
 8006b70:	07d9      	lsls	r1, r3, #31
 8006b72:	bf44      	itt	mi
 8006b74:	f043 0320 	orrmi.w	r3, r3, #32
 8006b78:	6023      	strmi	r3, [r4, #0]
 8006b7a:	b91d      	cbnz	r5, 8006b84 <_printf_i+0x198>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f023 0320 	bic.w	r3, r3, #32
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	2310      	movs	r3, #16
 8006b86:	e7af      	b.n	8006ae8 <_printf_i+0xfc>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	f043 0320 	orr.w	r3, r3, #32
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	2378      	movs	r3, #120	; 0x78
 8006b92:	4828      	ldr	r0, [pc, #160]	; (8006c34 <_printf_i+0x248>)
 8006b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b98:	e7e3      	b.n	8006b62 <_printf_i+0x176>
 8006b9a:	065e      	lsls	r6, r3, #25
 8006b9c:	bf48      	it	mi
 8006b9e:	b2ad      	uxthmi	r5, r5
 8006ba0:	e7e6      	b.n	8006b70 <_printf_i+0x184>
 8006ba2:	4616      	mov	r6, r2
 8006ba4:	e7bb      	b.n	8006b1e <_printf_i+0x132>
 8006ba6:	680b      	ldr	r3, [r1, #0]
 8006ba8:	6826      	ldr	r6, [r4, #0]
 8006baa:	1d1d      	adds	r5, r3, #4
 8006bac:	6960      	ldr	r0, [r4, #20]
 8006bae:	600d      	str	r5, [r1, #0]
 8006bb0:	0635      	lsls	r5, r6, #24
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	d501      	bpl.n	8006bba <_printf_i+0x1ce>
 8006bb6:	6018      	str	r0, [r3, #0]
 8006bb8:	e002      	b.n	8006bc0 <_printf_i+0x1d4>
 8006bba:	0671      	lsls	r1, r6, #25
 8006bbc:	d5fb      	bpl.n	8006bb6 <_printf_i+0x1ca>
 8006bbe:	8018      	strh	r0, [r3, #0]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4616      	mov	r6, r2
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	e7ba      	b.n	8006b3e <_printf_i+0x152>
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	600a      	str	r2, [r1, #0]
 8006bce:	681e      	ldr	r6, [r3, #0]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	6862      	ldr	r2, [r4, #4]
 8006bd6:	f000 fb4b 	bl	8007270 <memchr>
 8006bda:	b108      	cbz	r0, 8006be0 <_printf_i+0x1f4>
 8006bdc:	1b80      	subs	r0, r0, r6
 8006bde:	6060      	str	r0, [r4, #4]
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2300      	movs	r3, #0
 8006be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bea:	e7a8      	b.n	8006b3e <_printf_i+0x152>
 8006bec:	4632      	mov	r2, r6
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	47d0      	blx	sl
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d0ab      	beq.n	8006b52 <_printf_i+0x166>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	079b      	lsls	r3, r3, #30
 8006bfe:	d413      	bmi.n	8006c28 <_printf_i+0x23c>
 8006c00:	68e0      	ldr	r0, [r4, #12]
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	4298      	cmp	r0, r3
 8006c06:	bfb8      	it	lt
 8006c08:	4618      	movlt	r0, r3
 8006c0a:	e7a4      	b.n	8006b56 <_printf_i+0x16a>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4649      	mov	r1, r9
 8006c12:	4640      	mov	r0, r8
 8006c14:	47d0      	blx	sl
 8006c16:	3001      	adds	r0, #1
 8006c18:	d09b      	beq.n	8006b52 <_printf_i+0x166>
 8006c1a:	3501      	adds	r5, #1
 8006c1c:	68e3      	ldr	r3, [r4, #12]
 8006c1e:	9903      	ldr	r1, [sp, #12]
 8006c20:	1a5b      	subs	r3, r3, r1
 8006c22:	42ab      	cmp	r3, r5
 8006c24:	dcf2      	bgt.n	8006c0c <_printf_i+0x220>
 8006c26:	e7eb      	b.n	8006c00 <_printf_i+0x214>
 8006c28:	2500      	movs	r5, #0
 8006c2a:	f104 0619 	add.w	r6, r4, #25
 8006c2e:	e7f5      	b.n	8006c1c <_printf_i+0x230>
 8006c30:	08007895 	.word	0x08007895
 8006c34:	080078a6 	.word	0x080078a6

08006c38 <nan>:
 8006c38:	2000      	movs	r0, #0
 8006c3a:	4901      	ldr	r1, [pc, #4]	; (8006c40 <nan+0x8>)
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	7ff80000 	.word	0x7ff80000

08006c44 <_sbrk_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	2300      	movs	r3, #0
 8006c48:	4d05      	ldr	r5, [pc, #20]	; (8006c60 <_sbrk_r+0x1c>)
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fa ffb0 	bl	8001bb4 <_sbrk>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_sbrk_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_sbrk_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20000338 	.word	0x20000338

08006c64 <strncmp>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	b16a      	cbz	r2, 8006c84 <strncmp+0x20>
 8006c68:	3901      	subs	r1, #1
 8006c6a:	1884      	adds	r4, r0, r2
 8006c6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006c70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d103      	bne.n	8006c80 <strncmp+0x1c>
 8006c78:	42a0      	cmp	r0, r4
 8006c7a:	d001      	beq.n	8006c80 <strncmp+0x1c>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f5      	bne.n	8006c6c <strncmp+0x8>
 8006c80:	1a98      	subs	r0, r3, r2
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	4610      	mov	r0, r2
 8006c86:	e7fc      	b.n	8006c82 <strncmp+0x1e>

08006c88 <__swbuf_r>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	460e      	mov	r6, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b118      	cbz	r0, 8006c9a <__swbuf_r+0x12>
 8006c92:	6983      	ldr	r3, [r0, #24]
 8006c94:	b90b      	cbnz	r3, 8006c9a <__swbuf_r+0x12>
 8006c96:	f000 f9e7 	bl	8007068 <__sinit>
 8006c9a:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <__swbuf_r+0x98>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d12b      	bne.n	8006cf8 <__swbuf_r+0x70>
 8006ca0:	686c      	ldr	r4, [r5, #4]
 8006ca2:	69a3      	ldr	r3, [r4, #24]
 8006ca4:	60a3      	str	r3, [r4, #8]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	071a      	lsls	r2, r3, #28
 8006caa:	d52f      	bpl.n	8006d0c <__swbuf_r+0x84>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	b36b      	cbz	r3, 8006d0c <__swbuf_r+0x84>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	b2f6      	uxtb	r6, r6
 8006cb6:	1ac0      	subs	r0, r0, r3
 8006cb8:	6963      	ldr	r3, [r4, #20]
 8006cba:	4637      	mov	r7, r6
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	dc04      	bgt.n	8006cca <__swbuf_r+0x42>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f93c 	bl	8006f40 <_fflush_r>
 8006cc8:	bb30      	cbnz	r0, 8006d18 <__swbuf_r+0x90>
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	3001      	adds	r0, #1
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	6022      	str	r2, [r4, #0]
 8006cd8:	701e      	strb	r6, [r3, #0]
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	4283      	cmp	r3, r0
 8006cde:	d004      	beq.n	8006cea <__swbuf_r+0x62>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	07db      	lsls	r3, r3, #31
 8006ce4:	d506      	bpl.n	8006cf4 <__swbuf_r+0x6c>
 8006ce6:	2e0a      	cmp	r6, #10
 8006ce8:	d104      	bne.n	8006cf4 <__swbuf_r+0x6c>
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 f927 	bl	8006f40 <_fflush_r>
 8006cf2:	b988      	cbnz	r0, 8006d18 <__swbuf_r+0x90>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <__swbuf_r+0x9c>)
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	d101      	bne.n	8006d02 <__swbuf_r+0x7a>
 8006cfe:	68ac      	ldr	r4, [r5, #8]
 8006d00:	e7cf      	b.n	8006ca2 <__swbuf_r+0x1a>
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <__swbuf_r+0xa0>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	bf08      	it	eq
 8006d08:	68ec      	ldreq	r4, [r5, #12]
 8006d0a:	e7ca      	b.n	8006ca2 <__swbuf_r+0x1a>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f81a 	bl	8006d48 <__swsetup_r>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d0cb      	beq.n	8006cb0 <__swbuf_r+0x28>
 8006d18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d1c:	e7ea      	b.n	8006cf4 <__swbuf_r+0x6c>
 8006d1e:	bf00      	nop
 8006d20:	080079d8 	.word	0x080079d8
 8006d24:	080079f8 	.word	0x080079f8
 8006d28:	080079b8 	.word	0x080079b8

08006d2c <__ascii_wctomb>:
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4608      	mov	r0, r1
 8006d30:	b141      	cbz	r1, 8006d44 <__ascii_wctomb+0x18>
 8006d32:	2aff      	cmp	r2, #255	; 0xff
 8006d34:	d904      	bls.n	8006d40 <__ascii_wctomb+0x14>
 8006d36:	228a      	movs	r2, #138	; 0x8a
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	4770      	bx	lr
 8006d40:	2001      	movs	r0, #1
 8006d42:	700a      	strb	r2, [r1, #0]
 8006d44:	4770      	bx	lr
	...

08006d48 <__swsetup_r>:
 8006d48:	4b32      	ldr	r3, [pc, #200]	; (8006e14 <__swsetup_r+0xcc>)
 8006d4a:	b570      	push	{r4, r5, r6, lr}
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	b125      	cbz	r5, 8006d5e <__swsetup_r+0x16>
 8006d54:	69ab      	ldr	r3, [r5, #24]
 8006d56:	b913      	cbnz	r3, 8006d5e <__swsetup_r+0x16>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 f985 	bl	8007068 <__sinit>
 8006d5e:	4b2e      	ldr	r3, [pc, #184]	; (8006e18 <__swsetup_r+0xd0>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d10f      	bne.n	8006d84 <__swsetup_r+0x3c>
 8006d64:	686c      	ldr	r4, [r5, #4]
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d6c:	0719      	lsls	r1, r3, #28
 8006d6e:	d42c      	bmi.n	8006dca <__swsetup_r+0x82>
 8006d70:	06dd      	lsls	r5, r3, #27
 8006d72:	d411      	bmi.n	8006d98 <__swsetup_r+0x50>
 8006d74:	2309      	movs	r3, #9
 8006d76:	6033      	str	r3, [r6, #0]
 8006d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e03e      	b.n	8006e02 <__swsetup_r+0xba>
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <__swsetup_r+0xd4>)
 8006d86:	429c      	cmp	r4, r3
 8006d88:	d101      	bne.n	8006d8e <__swsetup_r+0x46>
 8006d8a:	68ac      	ldr	r4, [r5, #8]
 8006d8c:	e7eb      	b.n	8006d66 <__swsetup_r+0x1e>
 8006d8e:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <__swsetup_r+0xd8>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	bf08      	it	eq
 8006d94:	68ec      	ldreq	r4, [r5, #12]
 8006d96:	e7e6      	b.n	8006d66 <__swsetup_r+0x1e>
 8006d98:	0758      	lsls	r0, r3, #29
 8006d9a:	d512      	bpl.n	8006dc2 <__swsetup_r+0x7a>
 8006d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d9e:	b141      	cbz	r1, 8006db2 <__swsetup_r+0x6a>
 8006da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <__swsetup_r+0x66>
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fa55 	bl	8006258 <_free_r>
 8006dae:	2300      	movs	r3, #0
 8006db0:	6363      	str	r3, [r4, #52]	; 0x34
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f043 0308 	orr.w	r3, r3, #8
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	b94b      	cbnz	r3, 8006de2 <__swsetup_r+0x9a>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d003      	beq.n	8006de2 <__swsetup_r+0x9a>
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 fa07 	bl	80071f0 <__smakebuf_r>
 8006de2:	89a0      	ldrh	r0, [r4, #12]
 8006de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006de8:	f010 0301 	ands.w	r3, r0, #1
 8006dec:	d00a      	beq.n	8006e04 <__swsetup_r+0xbc>
 8006dee:	2300      	movs	r3, #0
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	6963      	ldr	r3, [r4, #20]
 8006df4:	425b      	negs	r3, r3
 8006df6:	61a3      	str	r3, [r4, #24]
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b943      	cbnz	r3, 8006e0e <__swsetup_r+0xc6>
 8006dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e00:	d1ba      	bne.n	8006d78 <__swsetup_r+0x30>
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	0781      	lsls	r1, r0, #30
 8006e06:	bf58      	it	pl
 8006e08:	6963      	ldrpl	r3, [r4, #20]
 8006e0a:	60a3      	str	r3, [r4, #8]
 8006e0c:	e7f4      	b.n	8006df8 <__swsetup_r+0xb0>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	e7f7      	b.n	8006e02 <__swsetup_r+0xba>
 8006e12:	bf00      	nop
 8006e14:	2000000c 	.word	0x2000000c
 8006e18:	080079d8 	.word	0x080079d8
 8006e1c:	080079f8 	.word	0x080079f8
 8006e20:	080079b8 	.word	0x080079b8

08006e24 <abort>:
 8006e24:	2006      	movs	r0, #6
 8006e26:	b508      	push	{r3, lr}
 8006e28:	f000 faa4 	bl	8007374 <raise>
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f7fa fe4e 	bl	8001ace <_exit>
	...

08006e34 <__sflush_r>:
 8006e34:	898a      	ldrh	r2, [r1, #12]
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	0710      	lsls	r0, r2, #28
 8006e3e:	460c      	mov	r4, r1
 8006e40:	d458      	bmi.n	8006ef4 <__sflush_r+0xc0>
 8006e42:	684b      	ldr	r3, [r1, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc05      	bgt.n	8006e54 <__sflush_r+0x20>
 8006e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc02      	bgt.n	8006e54 <__sflush_r+0x20>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d0f9      	beq.n	8006e4e <__sflush_r+0x1a>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e60:	682f      	ldr	r7, [r5, #0]
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	d032      	beq.n	8006ecc <__sflush_r+0x98>
 8006e66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	075a      	lsls	r2, r3, #29
 8006e6c:	d505      	bpl.n	8006e7a <__sflush_r+0x46>
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	1ac0      	subs	r0, r0, r3
 8006e72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e74:	b10b      	cbz	r3, 8006e7a <__sflush_r+0x46>
 8006e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e78:	1ac0      	subs	r0, r0, r3
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e80:	4628      	mov	r0, r5
 8006e82:	6a21      	ldr	r1, [r4, #32]
 8006e84:	47b0      	blx	r6
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	d106      	bne.n	8006e9a <__sflush_r+0x66>
 8006e8c:	6829      	ldr	r1, [r5, #0]
 8006e8e:	291d      	cmp	r1, #29
 8006e90:	d82c      	bhi.n	8006eec <__sflush_r+0xb8>
 8006e92:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <__sflush_r+0x108>)
 8006e94:	40ca      	lsrs	r2, r1
 8006e96:	07d6      	lsls	r6, r2, #31
 8006e98:	d528      	bpl.n	8006eec <__sflush_r+0xb8>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6062      	str	r2, [r4, #4]
 8006e9e:	6922      	ldr	r2, [r4, #16]
 8006ea0:	04d9      	lsls	r1, r3, #19
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	d504      	bpl.n	8006eb0 <__sflush_r+0x7c>
 8006ea6:	1c42      	adds	r2, r0, #1
 8006ea8:	d101      	bne.n	8006eae <__sflush_r+0x7a>
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	b903      	cbnz	r3, 8006eb0 <__sflush_r+0x7c>
 8006eae:	6560      	str	r0, [r4, #84]	; 0x54
 8006eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eb2:	602f      	str	r7, [r5, #0]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d0ca      	beq.n	8006e4e <__sflush_r+0x1a>
 8006eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	d002      	beq.n	8006ec6 <__sflush_r+0x92>
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff f9c9 	bl	8006258 <_free_r>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8006eca:	e7c1      	b.n	8006e50 <__sflush_r+0x1c>
 8006ecc:	6a21      	ldr	r1, [r4, #32]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b0      	blx	r6
 8006ed4:	1c41      	adds	r1, r0, #1
 8006ed6:	d1c7      	bne.n	8006e68 <__sflush_r+0x34>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0c4      	beq.n	8006e68 <__sflush_r+0x34>
 8006ede:	2b1d      	cmp	r3, #29
 8006ee0:	d001      	beq.n	8006ee6 <__sflush_r+0xb2>
 8006ee2:	2b16      	cmp	r3, #22
 8006ee4:	d101      	bne.n	8006eea <__sflush_r+0xb6>
 8006ee6:	602f      	str	r7, [r5, #0]
 8006ee8:	e7b1      	b.n	8006e4e <__sflush_r+0x1a>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	e7ad      	b.n	8006e50 <__sflush_r+0x1c>
 8006ef4:	690f      	ldr	r7, [r1, #16]
 8006ef6:	2f00      	cmp	r7, #0
 8006ef8:	d0a9      	beq.n	8006e4e <__sflush_r+0x1a>
 8006efa:	0793      	lsls	r3, r2, #30
 8006efc:	bf18      	it	ne
 8006efe:	2300      	movne	r3, #0
 8006f00:	680e      	ldr	r6, [r1, #0]
 8006f02:	bf08      	it	eq
 8006f04:	694b      	ldreq	r3, [r1, #20]
 8006f06:	eba6 0807 	sub.w	r8, r6, r7
 8006f0a:	600f      	str	r7, [r1, #0]
 8006f0c:	608b      	str	r3, [r1, #8]
 8006f0e:	f1b8 0f00 	cmp.w	r8, #0
 8006f12:	dd9c      	ble.n	8006e4e <__sflush_r+0x1a>
 8006f14:	4643      	mov	r3, r8
 8006f16:	463a      	mov	r2, r7
 8006f18:	4628      	mov	r0, r5
 8006f1a:	6a21      	ldr	r1, [r4, #32]
 8006f1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f1e:	47b0      	blx	r6
 8006f20:	2800      	cmp	r0, #0
 8006f22:	dc06      	bgt.n	8006f32 <__sflush_r+0xfe>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	e78e      	b.n	8006e50 <__sflush_r+0x1c>
 8006f32:	4407      	add	r7, r0
 8006f34:	eba8 0800 	sub.w	r8, r8, r0
 8006f38:	e7e9      	b.n	8006f0e <__sflush_r+0xda>
 8006f3a:	bf00      	nop
 8006f3c:	20400001 	.word	0x20400001

08006f40 <_fflush_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	690b      	ldr	r3, [r1, #16]
 8006f44:	4605      	mov	r5, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	b913      	cbnz	r3, 8006f50 <_fflush_r+0x10>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	b118      	cbz	r0, 8006f5a <_fflush_r+0x1a>
 8006f52:	6983      	ldr	r3, [r0, #24]
 8006f54:	b90b      	cbnz	r3, 8006f5a <_fflush_r+0x1a>
 8006f56:	f000 f887 	bl	8007068 <__sinit>
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <_fflush_r+0x6c>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d11b      	bne.n	8006f98 <_fflush_r+0x58>
 8006f60:	686c      	ldr	r4, [r5, #4]
 8006f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ef      	beq.n	8006f4a <_fflush_r+0xa>
 8006f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f6c:	07d0      	lsls	r0, r2, #31
 8006f6e:	d404      	bmi.n	8006f7a <_fflush_r+0x3a>
 8006f70:	0599      	lsls	r1, r3, #22
 8006f72:	d402      	bmi.n	8006f7a <_fflush_r+0x3a>
 8006f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f76:	f000 f915 	bl	80071a4 <__retarget_lock_acquire_recursive>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	f7ff ff59 	bl	8006e34 <__sflush_r>
 8006f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f84:	4605      	mov	r5, r0
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d4e0      	bmi.n	8006f4c <_fflush_r+0xc>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	059b      	lsls	r3, r3, #22
 8006f8e:	d4dd      	bmi.n	8006f4c <_fflush_r+0xc>
 8006f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f92:	f000 f908 	bl	80071a6 <__retarget_lock_release_recursive>
 8006f96:	e7d9      	b.n	8006f4c <_fflush_r+0xc>
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <_fflush_r+0x70>)
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	d101      	bne.n	8006fa2 <_fflush_r+0x62>
 8006f9e:	68ac      	ldr	r4, [r5, #8]
 8006fa0:	e7df      	b.n	8006f62 <_fflush_r+0x22>
 8006fa2:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <_fflush_r+0x74>)
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	bf08      	it	eq
 8006fa8:	68ec      	ldreq	r4, [r5, #12]
 8006faa:	e7da      	b.n	8006f62 <_fflush_r+0x22>
 8006fac:	080079d8 	.word	0x080079d8
 8006fb0:	080079f8 	.word	0x080079f8
 8006fb4:	080079b8 	.word	0x080079b8

08006fb8 <std>:
 8006fb8:	2300      	movs	r3, #0
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fc6:	6083      	str	r3, [r0, #8]
 8006fc8:	8181      	strh	r1, [r0, #12]
 8006fca:	6643      	str	r3, [r0, #100]	; 0x64
 8006fcc:	81c2      	strh	r2, [r0, #14]
 8006fce:	6183      	str	r3, [r0, #24]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	305c      	adds	r0, #92	; 0x5c
 8006fd6:	f7fd fa15 	bl	8004404 <memset>
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x38>)
 8006fdc:	6224      	str	r4, [r4, #32]
 8006fde:	6263      	str	r3, [r4, #36]	; 0x24
 8006fe0:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <std+0x3c>)
 8006fe2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <std+0x40>)
 8006fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <std+0x44>)
 8006fea:	6323      	str	r3, [r4, #48]	; 0x30
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	080073ad 	.word	0x080073ad
 8006ff4:	080073cf 	.word	0x080073cf
 8006ff8:	08007407 	.word	0x08007407
 8006ffc:	0800742b 	.word	0x0800742b

08007000 <_cleanup_r>:
 8007000:	4901      	ldr	r1, [pc, #4]	; (8007008 <_cleanup_r+0x8>)
 8007002:	f000 b8af 	b.w	8007164 <_fwalk_reent>
 8007006:	bf00      	nop
 8007008:	08006f41 	.word	0x08006f41

0800700c <__sfmoreglue>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	2568      	movs	r5, #104	; 0x68
 8007010:	1e4a      	subs	r2, r1, #1
 8007012:	4355      	muls	r5, r2
 8007014:	460e      	mov	r6, r1
 8007016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800701a:	f7ff f969 	bl	80062f0 <_malloc_r>
 800701e:	4604      	mov	r4, r0
 8007020:	b140      	cbz	r0, 8007034 <__sfmoreglue+0x28>
 8007022:	2100      	movs	r1, #0
 8007024:	e9c0 1600 	strd	r1, r6, [r0]
 8007028:	300c      	adds	r0, #12
 800702a:	60a0      	str	r0, [r4, #8]
 800702c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007030:	f7fd f9e8 	bl	8004404 <memset>
 8007034:	4620      	mov	r0, r4
 8007036:	bd70      	pop	{r4, r5, r6, pc}

08007038 <__sfp_lock_acquire>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__sfp_lock_acquire+0x8>)
 800703a:	f000 b8b3 	b.w	80071a4 <__retarget_lock_acquire_recursive>
 800703e:	bf00      	nop
 8007040:	20000334 	.word	0x20000334

08007044 <__sfp_lock_release>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sfp_lock_release+0x8>)
 8007046:	f000 b8ae 	b.w	80071a6 <__retarget_lock_release_recursive>
 800704a:	bf00      	nop
 800704c:	20000334 	.word	0x20000334

08007050 <__sinit_lock_acquire>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sinit_lock_acquire+0x8>)
 8007052:	f000 b8a7 	b.w	80071a4 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	2000032f 	.word	0x2000032f

0800705c <__sinit_lock_release>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sinit_lock_release+0x8>)
 800705e:	f000 b8a2 	b.w	80071a6 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	2000032f 	.word	0x2000032f

08007068 <__sinit>:
 8007068:	b510      	push	{r4, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	f7ff fff0 	bl	8007050 <__sinit_lock_acquire>
 8007070:	69a3      	ldr	r3, [r4, #24]
 8007072:	b11b      	cbz	r3, 800707c <__sinit+0x14>
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f7ff bff0 	b.w	800705c <__sinit_lock_release>
 800707c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007080:	6523      	str	r3, [r4, #80]	; 0x50
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <__sinit+0x68>)
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <__sinit+0x6c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	62a2      	str	r2, [r4, #40]	; 0x28
 800708a:	42a3      	cmp	r3, r4
 800708c:	bf08      	it	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	4620      	mov	r0, r4
 8007092:	bf08      	it	eq
 8007094:	61a3      	streq	r3, [r4, #24]
 8007096:	f000 f81f 	bl	80070d8 <__sfp>
 800709a:	6060      	str	r0, [r4, #4]
 800709c:	4620      	mov	r0, r4
 800709e:	f000 f81b 	bl	80070d8 <__sfp>
 80070a2:	60a0      	str	r0, [r4, #8]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 f817 	bl	80070d8 <__sfp>
 80070aa:	2200      	movs	r2, #0
 80070ac:	2104      	movs	r1, #4
 80070ae:	60e0      	str	r0, [r4, #12]
 80070b0:	6860      	ldr	r0, [r4, #4]
 80070b2:	f7ff ff81 	bl	8006fb8 <std>
 80070b6:	2201      	movs	r2, #1
 80070b8:	2109      	movs	r1, #9
 80070ba:	68a0      	ldr	r0, [r4, #8]
 80070bc:	f7ff ff7c 	bl	8006fb8 <std>
 80070c0:	2202      	movs	r2, #2
 80070c2:	2112      	movs	r1, #18
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	f7ff ff77 	bl	8006fb8 <std>
 80070ca:	2301      	movs	r3, #1
 80070cc:	61a3      	str	r3, [r4, #24]
 80070ce:	e7d1      	b.n	8007074 <__sinit+0xc>
 80070d0:	0800757c 	.word	0x0800757c
 80070d4:	08007001 	.word	0x08007001

080070d8 <__sfp>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	4607      	mov	r7, r0
 80070dc:	f7ff ffac 	bl	8007038 <__sfp_lock_acquire>
 80070e0:	4b1e      	ldr	r3, [pc, #120]	; (800715c <__sfp+0x84>)
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	69b3      	ldr	r3, [r6, #24]
 80070e6:	b913      	cbnz	r3, 80070ee <__sfp+0x16>
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ffbd 	bl	8007068 <__sinit>
 80070ee:	3648      	adds	r6, #72	; 0x48
 80070f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	d503      	bpl.n	8007100 <__sfp+0x28>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	b30b      	cbz	r3, 8007140 <__sfp+0x68>
 80070fc:	6836      	ldr	r6, [r6, #0]
 80070fe:	e7f7      	b.n	80070f0 <__sfp+0x18>
 8007100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007104:	b9d5      	cbnz	r5, 800713c <__sfp+0x64>
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <__sfp+0x88>)
 8007108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800710c:	60e3      	str	r3, [r4, #12]
 800710e:	6665      	str	r5, [r4, #100]	; 0x64
 8007110:	f000 f847 	bl	80071a2 <__retarget_lock_init_recursive>
 8007114:	f7ff ff96 	bl	8007044 <__sfp_lock_release>
 8007118:	2208      	movs	r2, #8
 800711a:	4629      	mov	r1, r5
 800711c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007124:	6025      	str	r5, [r4, #0]
 8007126:	61a5      	str	r5, [r4, #24]
 8007128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800712c:	f7fd f96a 	bl	8004404 <memset>
 8007130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007138:	4620      	mov	r0, r4
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713c:	3468      	adds	r4, #104	; 0x68
 800713e:	e7d9      	b.n	80070f4 <__sfp+0x1c>
 8007140:	2104      	movs	r1, #4
 8007142:	4638      	mov	r0, r7
 8007144:	f7ff ff62 	bl	800700c <__sfmoreglue>
 8007148:	4604      	mov	r4, r0
 800714a:	6030      	str	r0, [r6, #0]
 800714c:	2800      	cmp	r0, #0
 800714e:	d1d5      	bne.n	80070fc <__sfp+0x24>
 8007150:	f7ff ff78 	bl	8007044 <__sfp_lock_release>
 8007154:	230c      	movs	r3, #12
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	e7ee      	b.n	8007138 <__sfp+0x60>
 800715a:	bf00      	nop
 800715c:	0800757c 	.word	0x0800757c
 8007160:	ffff0001 	.word	0xffff0001

08007164 <_fwalk_reent>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4606      	mov	r6, r0
 800716a:	4688      	mov	r8, r1
 800716c:	2700      	movs	r7, #0
 800716e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007176:	f1b9 0901 	subs.w	r9, r9, #1
 800717a:	d505      	bpl.n	8007188 <_fwalk_reent+0x24>
 800717c:	6824      	ldr	r4, [r4, #0]
 800717e:	2c00      	cmp	r4, #0
 8007180:	d1f7      	bne.n	8007172 <_fwalk_reent+0xe>
 8007182:	4638      	mov	r0, r7
 8007184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007188:	89ab      	ldrh	r3, [r5, #12]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d907      	bls.n	800719e <_fwalk_reent+0x3a>
 800718e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007192:	3301      	adds	r3, #1
 8007194:	d003      	beq.n	800719e <_fwalk_reent+0x3a>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	47c0      	blx	r8
 800719c:	4307      	orrs	r7, r0
 800719e:	3568      	adds	r5, #104	; 0x68
 80071a0:	e7e9      	b.n	8007176 <_fwalk_reent+0x12>

080071a2 <__retarget_lock_init_recursive>:
 80071a2:	4770      	bx	lr

080071a4 <__retarget_lock_acquire_recursive>:
 80071a4:	4770      	bx	lr

080071a6 <__retarget_lock_release_recursive>:
 80071a6:	4770      	bx	lr

080071a8 <__swhatbuf_r>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	460e      	mov	r6, r1
 80071ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b0:	4614      	mov	r4, r2
 80071b2:	2900      	cmp	r1, #0
 80071b4:	461d      	mov	r5, r3
 80071b6:	b096      	sub	sp, #88	; 0x58
 80071b8:	da07      	bge.n	80071ca <__swhatbuf_r+0x22>
 80071ba:	2300      	movs	r3, #0
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	89b3      	ldrh	r3, [r6, #12]
 80071c0:	061a      	lsls	r2, r3, #24
 80071c2:	d410      	bmi.n	80071e6 <__swhatbuf_r+0x3e>
 80071c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c8:	e00e      	b.n	80071e8 <__swhatbuf_r+0x40>
 80071ca:	466a      	mov	r2, sp
 80071cc:	f000 f954 	bl	8007478 <_fstat_r>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	dbf2      	blt.n	80071ba <__swhatbuf_r+0x12>
 80071d4:	9a01      	ldr	r2, [sp, #4]
 80071d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071de:	425a      	negs	r2, r3
 80071e0:	415a      	adcs	r2, r3
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	e7ee      	b.n	80071c4 <__swhatbuf_r+0x1c>
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	2000      	movs	r0, #0
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	b016      	add	sp, #88	; 0x58
 80071ee:	bd70      	pop	{r4, r5, r6, pc}

080071f0 <__smakebuf_r>:
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071f4:	079d      	lsls	r5, r3, #30
 80071f6:	4606      	mov	r6, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	d507      	bpl.n	800720c <__smakebuf_r+0x1c>
 80071fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	2301      	movs	r3, #1
 8007206:	6163      	str	r3, [r4, #20]
 8007208:	b002      	add	sp, #8
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	466a      	mov	r2, sp
 800720e:	ab01      	add	r3, sp, #4
 8007210:	f7ff ffca 	bl	80071a8 <__swhatbuf_r>
 8007214:	9900      	ldr	r1, [sp, #0]
 8007216:	4605      	mov	r5, r0
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff f869 	bl	80062f0 <_malloc_r>
 800721e:	b948      	cbnz	r0, 8007234 <__smakebuf_r+0x44>
 8007220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007224:	059a      	lsls	r2, r3, #22
 8007226:	d4ef      	bmi.n	8007208 <__smakebuf_r+0x18>
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	f043 0302 	orr.w	r3, r3, #2
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	e7e3      	b.n	80071fc <__smakebuf_r+0xc>
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <__smakebuf_r+0x7c>)
 8007236:	62b3      	str	r3, [r6, #40]	; 0x28
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	6120      	str	r0, [r4, #16]
 8007246:	6163      	str	r3, [r4, #20]
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	b15b      	cbz	r3, 8007264 <__smakebuf_r+0x74>
 800724c:	4630      	mov	r0, r6
 800724e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007252:	f000 f923 	bl	800749c <_isatty_r>
 8007256:	b128      	cbz	r0, 8007264 <__smakebuf_r+0x74>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	89a0      	ldrh	r0, [r4, #12]
 8007266:	4305      	orrs	r5, r0
 8007268:	81a5      	strh	r5, [r4, #12]
 800726a:	e7cd      	b.n	8007208 <__smakebuf_r+0x18>
 800726c:	08007001 	.word	0x08007001

08007270 <memchr>:
 8007270:	4603      	mov	r3, r0
 8007272:	b510      	push	{r4, lr}
 8007274:	b2c9      	uxtb	r1, r1
 8007276:	4402      	add	r2, r0
 8007278:	4293      	cmp	r3, r2
 800727a:	4618      	mov	r0, r3
 800727c:	d101      	bne.n	8007282 <memchr+0x12>
 800727e:	2000      	movs	r0, #0
 8007280:	e003      	b.n	800728a <memchr+0x1a>
 8007282:	7804      	ldrb	r4, [r0, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	428c      	cmp	r4, r1
 8007288:	d1f6      	bne.n	8007278 <memchr+0x8>
 800728a:	bd10      	pop	{r4, pc}

0800728c <memmove>:
 800728c:	4288      	cmp	r0, r1
 800728e:	b510      	push	{r4, lr}
 8007290:	eb01 0402 	add.w	r4, r1, r2
 8007294:	d902      	bls.n	800729c <memmove+0x10>
 8007296:	4284      	cmp	r4, r0
 8007298:	4623      	mov	r3, r4
 800729a:	d807      	bhi.n	80072ac <memmove+0x20>
 800729c:	1e43      	subs	r3, r0, #1
 800729e:	42a1      	cmp	r1, r4
 80072a0:	d008      	beq.n	80072b4 <memmove+0x28>
 80072a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072aa:	e7f8      	b.n	800729e <memmove+0x12>
 80072ac:	4601      	mov	r1, r0
 80072ae:	4402      	add	r2, r0
 80072b0:	428a      	cmp	r2, r1
 80072b2:	d100      	bne.n	80072b6 <memmove+0x2a>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072be:	e7f7      	b.n	80072b0 <memmove+0x24>

080072c0 <__malloc_lock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__malloc_lock+0x8>)
 80072c2:	f7ff bf6f 	b.w	80071a4 <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	20000330 	.word	0x20000330

080072cc <__malloc_unlock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__malloc_unlock+0x8>)
 80072ce:	f7ff bf6a 	b.w	80071a6 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000330 	.word	0x20000330

080072d8 <_realloc_r>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	4607      	mov	r7, r0
 80072dc:	4614      	mov	r4, r2
 80072de:	460e      	mov	r6, r1
 80072e0:	b921      	cbnz	r1, 80072ec <_realloc_r+0x14>
 80072e2:	4611      	mov	r1, r2
 80072e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072e8:	f7ff b802 	b.w	80062f0 <_malloc_r>
 80072ec:	b922      	cbnz	r2, 80072f8 <_realloc_r+0x20>
 80072ee:	f7fe ffb3 	bl	8006258 <_free_r>
 80072f2:	4625      	mov	r5, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f8:	f000 f8f2 	bl	80074e0 <_malloc_usable_size_r>
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	d20f      	bcs.n	8007320 <_realloc_r+0x48>
 8007300:	4621      	mov	r1, r4
 8007302:	4638      	mov	r0, r7
 8007304:	f7fe fff4 	bl	80062f0 <_malloc_r>
 8007308:	4605      	mov	r5, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d0f2      	beq.n	80072f4 <_realloc_r+0x1c>
 800730e:	4631      	mov	r1, r6
 8007310:	4622      	mov	r2, r4
 8007312:	f7fe facd 	bl	80058b0 <memcpy>
 8007316:	4631      	mov	r1, r6
 8007318:	4638      	mov	r0, r7
 800731a:	f7fe ff9d 	bl	8006258 <_free_r>
 800731e:	e7e9      	b.n	80072f4 <_realloc_r+0x1c>
 8007320:	4635      	mov	r5, r6
 8007322:	e7e7      	b.n	80072f4 <_realloc_r+0x1c>

08007324 <_raise_r>:
 8007324:	291f      	cmp	r1, #31
 8007326:	b538      	push	{r3, r4, r5, lr}
 8007328:	4604      	mov	r4, r0
 800732a:	460d      	mov	r5, r1
 800732c:	d904      	bls.n	8007338 <_raise_r+0x14>
 800732e:	2316      	movs	r3, #22
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800733a:	b112      	cbz	r2, 8007342 <_raise_r+0x1e>
 800733c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007340:	b94b      	cbnz	r3, 8007356 <_raise_r+0x32>
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f830 	bl	80073a8 <_getpid_r>
 8007348:	462a      	mov	r2, r5
 800734a:	4601      	mov	r1, r0
 800734c:	4620      	mov	r0, r4
 800734e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007352:	f000 b817 	b.w	8007384 <_kill_r>
 8007356:	2b01      	cmp	r3, #1
 8007358:	d00a      	beq.n	8007370 <_raise_r+0x4c>
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	d103      	bne.n	8007366 <_raise_r+0x42>
 800735e:	2316      	movs	r3, #22
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	2001      	movs	r0, #1
 8007364:	e7e7      	b.n	8007336 <_raise_r+0x12>
 8007366:	2400      	movs	r4, #0
 8007368:	4628      	mov	r0, r5
 800736a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800736e:	4798      	blx	r3
 8007370:	2000      	movs	r0, #0
 8007372:	e7e0      	b.n	8007336 <_raise_r+0x12>

08007374 <raise>:
 8007374:	4b02      	ldr	r3, [pc, #8]	; (8007380 <raise+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f7ff bfd3 	b.w	8007324 <_raise_r>
 800737e:	bf00      	nop
 8007380:	2000000c 	.word	0x2000000c

08007384 <_kill_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	2300      	movs	r3, #0
 8007388:	4d06      	ldr	r5, [pc, #24]	; (80073a4 <_kill_r+0x20>)
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	f7fa fb8c 	bl	8001aae <_kill>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d102      	bne.n	80073a0 <_kill_r+0x1c>
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	b103      	cbz	r3, 80073a0 <_kill_r+0x1c>
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	bd38      	pop	{r3, r4, r5, pc}
 80073a2:	bf00      	nop
 80073a4:	20000338 	.word	0x20000338

080073a8 <_getpid_r>:
 80073a8:	f7fa bb7a 	b.w	8001aa0 <_getpid>

080073ac <__sread>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	460c      	mov	r4, r1
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	f000 f89c 	bl	80074f0 <_read_r>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	bfab      	itete	ge
 80073bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073be:	89a3      	ldrhlt	r3, [r4, #12]
 80073c0:	181b      	addge	r3, r3, r0
 80073c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c6:	bfac      	ite	ge
 80073c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ca:	81a3      	strhlt	r3, [r4, #12]
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__swrite>:
 80073ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	461f      	mov	r7, r3
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	4605      	mov	r5, r0
 80073d8:	05db      	lsls	r3, r3, #23
 80073da:	460c      	mov	r4, r1
 80073dc:	4616      	mov	r6, r2
 80073de:	d505      	bpl.n	80073ec <__swrite+0x1e>
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e8:	f000 f868 	bl	80074bc <_lseek_r>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	4632      	mov	r2, r6
 80073f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	4628      	mov	r0, r5
 80073f8:	463b      	mov	r3, r7
 80073fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	f000 b817 	b.w	8007434 <_write_r>

08007406 <__sseek>:
 8007406:	b510      	push	{r4, lr}
 8007408:	460c      	mov	r4, r1
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	f000 f855 	bl	80074bc <_lseek_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	bf15      	itete	ne
 8007418:	6560      	strne	r0, [r4, #84]	; 0x54
 800741a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007422:	81a3      	strheq	r3, [r4, #12]
 8007424:	bf18      	it	ne
 8007426:	81a3      	strhne	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__sclose>:
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 b813 	b.w	8007458 <_close_r>
	...

08007434 <_write_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	2200      	movs	r2, #0
 800743e:	4d05      	ldr	r5, [pc, #20]	; (8007454 <_write_r+0x20>)
 8007440:	602a      	str	r2, [r5, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f7fa fb6a 	bl	8001b1c <_write>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_write_r+0x1e>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_write_r+0x1e>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	20000338 	.word	0x20000338

08007458 <_close_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	2300      	movs	r3, #0
 800745c:	4d05      	ldr	r5, [pc, #20]	; (8007474 <_close_r+0x1c>)
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa fb76 	bl	8001b54 <_close>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_close_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_close_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000338 	.word	0x20000338

08007478 <_fstat_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	2300      	movs	r3, #0
 800747c:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_fstat_r+0x20>)
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f7fa fb70 	bl	8001b6a <_fstat>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d102      	bne.n	8007494 <_fstat_r+0x1c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b103      	cbz	r3, 8007494 <_fstat_r+0x1c>
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	20000338 	.word	0x20000338

0800749c <_isatty_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d05      	ldr	r5, [pc, #20]	; (80074b8 <_isatty_r+0x1c>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fa fb6e 	bl	8001b88 <_isatty>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_isatty_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_isatty_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20000338 	.word	0x20000338

080074bc <_lseek_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	4d05      	ldr	r5, [pc, #20]	; (80074dc <_lseek_r+0x20>)
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7fa fb66 	bl	8001b9c <_lseek>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_lseek_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_lseek_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000338 	.word	0x20000338

080074e0 <_malloc_usable_size_r>:
 80074e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e4:	1f18      	subs	r0, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfbc      	itt	lt
 80074ea:	580b      	ldrlt	r3, [r1, r0]
 80074ec:	18c0      	addlt	r0, r0, r3
 80074ee:	4770      	bx	lr

080074f0 <_read_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	4d05      	ldr	r5, [pc, #20]	; (8007510 <_read_r+0x20>)
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7fa faef 	bl	8001ae2 <_read>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_read_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_read_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	20000338 	.word	0x20000338

08007514 <_init>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr

08007520 <_fini>:
 8007520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007522:	bf00      	nop
 8007524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007526:	bc08      	pop	{r3}
 8007528:	469e      	mov	lr, r3
 800752a:	4770      	bx	lr
