
driveControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006d68  08006d68  00016d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007240  08007240  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007240  08007240  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007240  08007240  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  08007428  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08007428  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d274  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  0002d47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000301a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b19  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d66b  00000000  00000000  000498b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbd8  00000000  00000000  00056f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  000e2b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d4c 	.word	0x08006d4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006d4c 	.word	0x08006d4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_f2iz>:
 8000c54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c5c:	d30f      	bcc.n	8000c7e <__aeabi_f2iz+0x2a>
 8000c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c66:	d90d      	bls.n	8000c84 <__aeabi_f2iz+0x30>
 8000c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c74:	fa23 f002 	lsr.w	r0, r3, r2
 8000c78:	bf18      	it	ne
 8000c7a:	4240      	negne	r0, r0
 8000c7c:	4770      	bx	lr
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	4770      	bx	lr
 8000c84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c88:	d101      	bne.n	8000c8e <__aeabi_f2iz+0x3a>
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	d105      	bne.n	8000c9a <__aeabi_f2iz+0x46>
 8000c8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c92:	bf08      	it	eq
 8000c94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_d2lz>:
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	4605      	mov	r5, r0
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4628      	mov	r0, r5
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	f7ff ff39 	bl	8000b24 <__aeabi_dcmplt>
 8000cb2:	b928      	cbnz	r0, 8000cc0 <__aeabi_d2lz+0x20>
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cbc:	f000 b80a 	b.w	8000cd4 <__aeabi_d2ulz>
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cc6:	f000 f805 	bl	8000cd4 <__aeabi_d2ulz>
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	bd38      	pop	{r3, r4, r5, pc}
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_d2ulz>:
 8000cd4:	b5d0      	push	{r4, r6, r7, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__aeabi_d2ulz+0x34>)
 8000cda:	4606      	mov	r6, r0
 8000cdc:	460f      	mov	r7, r1
 8000cde:	f7ff fcaf 	bl	8000640 <__aeabi_dmul>
 8000ce2:	f7ff ff47 	bl	8000b74 <__aeabi_d2uiz>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	f7ff fc30 	bl	800054c <__aeabi_ui2d>
 8000cec:	2200      	movs	r2, #0
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <__aeabi_d2ulz+0x38>)
 8000cf0:	f7ff fca6 	bl	8000640 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f7ff fae8 	bl	80002d0 <__aeabi_dsub>
 8000d00:	f7ff ff38 	bl	8000b74 <__aeabi_d2uiz>
 8000d04:	4621      	mov	r1, r4
 8000d06:	bdd0      	pop	{r4, r6, r7, pc}
 8000d08:	3df00000 	.word	0x3df00000
 8000d0c:	41f00000 	.word	0x41f00000

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fdd6 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f936 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 faa0 	bl	8001260 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d20:	f000 f978 	bl	8001014 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000d24:	f000 fa72 	bl	800120c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d28:	f000 fa22 	bl	8001170 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <main+0x44>)
 8000d2e:	f001 fdcd 	bl	80028cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <main+0x48>)
 8000d34:	f001 fdca 	bl	80028cc <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Right Motor PWM Control
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <main+0x48>)
 8000d3c:	f001 fe70 	bl	8002a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Left Motor PWM Control
 8000d40:	2104      	movs	r1, #4
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <main+0x48>)
 8000d44:	f001 fe6c 	bl	8002a20 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 8000d48:	2212      	movs	r2, #18
 8000d4a:	4904      	ldr	r1, [pc, #16]	; (8000d5c <main+0x4c>)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <main+0x50>)
 8000d4e:	f002 fd69 	bl	8003824 <HAL_UART_Receive_IT>
 8000d52:	e7f9      	b.n	8000d48 <main+0x38>
 8000d54:	200002bc 	.word	0x200002bc
 8000d58:	20000260 	.word	0x20000260
 8000d5c:	200001fc 	.word	0x200001fc
 8000d60:	20000304 	.word	0x20000304

08000d64 <HAL_UART_RxCpltCallback>:
	}
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	//sprintf(TxBuffer,"%s\n", RxBuffer);
	//
	//HAL_UART_Transmit(&huart2, (uint8_t* )RxBuffer, sizeof(RxBuffer), 1000);

	tempJoystickVal = (char *)RxBuffer;
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_UART_RxCpltCallback+0xac>)
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <HAL_UART_RxCpltCallback+0xb0>)
 8000d70:	601a      	str	r2, [r3, #0]
	tempStrToFloat = strtok(tempJoystickVal, ",");
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_UART_RxCpltCallback+0xac>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4928      	ldr	r1, [pc, #160]	; (8000e18 <HAL_UART_RxCpltCallback+0xb4>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 febd 	bl	8004af8 <strtok>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000d82:	6013      	str	r3, [r2, #0]
	leftMotorValue = atof(tempStrToFloat);
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 f857 	bl	8003e3c <atof>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff ff0d 	bl	8000bb4 <__aeabi_d2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <HAL_UART_RxCpltCallback+0xbc>)
 8000d9e:	6013      	str	r3, [r2, #0]
	tempStrToFloat = strtok(NULL, ",");
 8000da0:	491d      	ldr	r1, [pc, #116]	; (8000e18 <HAL_UART_RxCpltCallback+0xb4>)
 8000da2:	2000      	movs	r0, #0
 8000da4:	f003 fea8 	bl	8004af8 <strtok>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000dac:	6013      	str	r3, [r2, #0]
	rightMotorValue = atof(tempStrToFloat);
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 f842 	bl	8003e3c <atof>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff fef8 	bl	8000bb4 <__aeabi_d2f>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0xc0>)
 8000dc8:	6013      	str	r3, [r2, #0]
	tempStrToFloat = strtok(NULL, ",");
 8000dca:	4913      	ldr	r1, [pc, #76]	; (8000e18 <HAL_UART_RxCpltCallback+0xb4>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f003 fe93 	bl	8004af8 <strtok>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000dd6:	6013      	str	r3, [r2, #0]
	leftMotorDirection = atoi(tempStrToFloat);
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 f830 	bl	8003e42 <atoi>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_UART_RxCpltCallback+0xc4>)
 8000de6:	6013      	str	r3, [r2, #0]
	tempStrToFloat = strtok(NULL, ",");
 8000de8:	490b      	ldr	r1, [pc, #44]	; (8000e18 <HAL_UART_RxCpltCallback+0xb4>)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f003 fe84 	bl	8004af8 <strtok>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000df4:	6013      	str	r3, [r2, #0]
	rightMotorDirection = atoi(tempStrToFloat);
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_UART_RxCpltCallback+0xb8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 f821 	bl	8003e42 <atoi>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_UART_RxCpltCallback+0xc8>)
 8000e04:	6013      	str	r3, [r2, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000258 	.word	0x20000258
 8000e14:	200001fc 	.word	0x200001fc
 8000e18:	08006d78 	.word	0x08006d78
 8000e1c:	2000025c 	.word	0x2000025c
 8000e20:	20000210 	.word	0x20000210
 8000e24:	20000214 	.word	0x20000214
 8000e28:	20000218 	.word	0x20000218
 8000e2c:	2000021c 	.word	0x2000021c

08000e30 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	/* Every Ts interrupt */
	int avgMs = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
	int pwmToSet = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]

	if(htim == &htim2){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d125      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x64>
		prbs();
		continue;

		*/

		setLeftMotorDirection(leftMotorDirection);
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 faad 	bl	80013ac <setLeftMotorDirection>
		setRightMotorDirection(rightMotorDirection);
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fad4 	bl	8001404 <setRightMotorDirection>

		setLeftMotorPWM(leftMotorValue * 100);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4919      	ldr	r1, [pc, #100]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff f97c 	bl	8000160 <__aeabi_fmul>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fef2 	bl	8000c54 <__aeabi_f2iz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fa72 	bl	800135c <setLeftMotorPWM>
		setRightMotorPWM(rightMotorValue * 100);
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4912      	ldr	r1, [pc, #72]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f96e 	bl	8000160 <__aeabi_fmul>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fee4 	bl	8000c54 <__aeabi_f2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fa78 	bl	8001384 <setRightMotorPWM>

	}
	if(htim == &htim1){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d109      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x80>

		noMsLeft++;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ea4:	6013      	str	r3, [r2, #0]
		noMsRight++;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000eae:	6013      	str	r3, [r2, #0]
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200002bc 	.word	0x200002bc
 8000ebc:	20000218 	.word	0x20000218
 8000ec0:	2000021c 	.word	0x2000021c
 8000ec4:	20000210 	.word	0x20000210
 8000ec8:	42c80000 	.word	0x42c80000
 8000ecc:	20000214 	.word	0x20000214
 8000ed0:	20000260 	.word	0x20000260
 8000ed4:	2000023c 	.word	0x2000023c
 8000ed8:	20000240 	.word	0x20000240

08000edc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RightMotorOpto_Pin){
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eec:	d11a      	bne.n	8000f24 <HAL_GPIO_EXTI_Callback+0x48>
		nGapsRight++;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x90>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x90>)
 8000ef6:	6013      	str	r3, [r2, #0]

		if(i >= NSAMPLES) i = 0;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	dd02      	ble.n	8000f06 <HAL_GPIO_EXTI_Callback+0x2a>
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		rightSamples[i] = noMsRight;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x98>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	491a      	ldr	r1, [pc, #104]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		noMsRight = 0;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
		i++;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f22:	6013      	str	r3, [r2, #0]
	}

	if(GPIO_Pin == LeftMotorOpto_Pin){
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	2b80      	cmp	r3, #128	; 0x80
 8000f28:	d11a      	bne.n	8000f60 <HAL_GPIO_EXTI_Callback+0x84>
		nGapsLeft++;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f32:	6013      	str	r3, [r2, #0]

		if(j >= NSAMPLES) j = 0;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	dd02      	ble.n	8000f42 <HAL_GPIO_EXTI_Callback+0x66>
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		rightSamples[j] = noMsLeft;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		noMsLeft = 0;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		j++;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f5e:	6013      	str	r3, [r2, #0]
	}
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000224 	.word	0x20000224
 8000f70:	20000244 	.word	0x20000244
 8000f74:	20000240 	.word	0x20000240
 8000f78:	20000228 	.word	0x20000228
 8000f7c:	20000220 	.word	0x20000220
 8000f80:	20000248 	.word	0x20000248
 8000f84:	2000023c 	.word	0x2000023c

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b090      	sub	sp, #64	; 0x40
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2228      	movs	r2, #40	; 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 ff82 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f811 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fdc:	f000 f9b8 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fa7c 	bl	80024f8 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001006:	f000 f9a3 	bl	8001350 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b096      	sub	sp, #88	; 0x58
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f002 ff27 	bl	8003ea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_TIM1_Init+0x154>)
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <MX_TIM1_Init+0x158>)
 8001056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_TIM1_Init+0x154>)
 800105a:	2247      	movs	r2, #71	; 0x47
 800105c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b42      	ldr	r3, [pc, #264]	; (8001168 <MX_TIM1_Init+0x154>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_TIM1_Init+0x154>)
 8001066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_TIM1_Init+0x154>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <MX_TIM1_Init+0x154>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_TIM1_Init+0x154>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107e:	483a      	ldr	r0, [pc, #232]	; (8001168 <MX_TIM1_Init+0x154>)
 8001080:	f001 fbd4 	bl	800282c <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800108a:	f000 f961 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001098:	4619      	mov	r1, r3
 800109a:	4833      	ldr	r0, [pc, #204]	; (8001168 <MX_TIM1_Init+0x154>)
 800109c:	f001 ff28 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010a6:	f000 f953 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010aa:	482f      	ldr	r0, [pc, #188]	; (8001168 <MX_TIM1_Init+0x154>)
 80010ac:	f001 fc60 	bl	8002970 <HAL_TIM_PWM_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010b6:	f000 f94b 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c6:	4619      	mov	r1, r3
 80010c8:	4827      	ldr	r0, [pc, #156]	; (8001168 <MX_TIM1_Init+0x154>)
 80010ca:	f002 fa9d 	bl	8003608 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d4:	f000 f93c 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80010dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	4619      	mov	r1, r3
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_TIM1_Init+0x154>)
 8001100:	f001 fe38 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800110a:	f000 f921 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_TIM1_Init+0x154>)
 8001118:	f001 fe2c 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001122:	f000 f915 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM1_Init+0x154>)
 800114a:	f002 fabb 	bl	80036c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001154:	f000 f8fc 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM1_Init+0x154>)
 800115a:	f000 f9f1 	bl	8001540 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	; 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000260 	.word	0x20000260
 800116c:	40012c00 	.word	0x40012c00

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0x98>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0x98>)
 8001196:	f240 22cf 	movw	r2, #719	; 0x2cf
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999; // 0.1 SECOND TS --------------------- //
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0x98>)
 80011a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_TIM2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b8:	f001 fb38 	bl	800282c <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011c2:	f000 f8c5 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0x98>)
 80011d4:	f001 fe8c 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011de:	f000 f8b7 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0x98>)
 80011f0:	f002 fa0a 	bl	8003608 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f000 f8a9 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002bc 	.word	0x200002bc

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART2_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001244:	f002 faa1 	bl	800378a <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f87f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000304 	.word	0x20000304
 800125c:	40004400 	.word	0x40004400

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <MX_GPIO_Init+0xe0>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a31      	ldr	r2, [pc, #196]	; (8001340 <MX_GPIO_Init+0xe0>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_GPIO_Init+0xe0>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_GPIO_Init+0xe0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <MX_GPIO_Init+0xe0>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_GPIO_Init+0xe0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_GPIO_Init+0xe0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a25      	ldr	r2, [pc, #148]	; (8001340 <MX_GPIO_Init+0xe0>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_GPIO_Init+0xe0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 410c 	mov.w	r1, #35840	; 0x8c00
 80012c2:	4820      	ldr	r0, [pc, #128]	; (8001344 <MX_GPIO_Init+0xe4>)
 80012c4:	f000 fe68 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012ce:	f000 fe63 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorDriverIN1_Pin MotorDriverIN2_Pin MotorDriverIN3_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin;
 80012d2:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4816      	ldr	r0, [pc, #88]	; (8001344 <MX_GPIO_Init+0xe4>)
 80012ec:	f000 fcd0 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorDriverIN4_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN4_Pin;
 80012f0:	2308      	movs	r3, #8
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MotorDriverIN4_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001308:	f000 fcc2 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftMotorOpto_Pin RightMotorOpto_Pin */
  GPIO_InitStruct.Pin = LeftMotorOpto_Pin|RightMotorOpto_Pin;
 800130c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_GPIO_Init+0xec>)
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001322:	f000 fcb5 	bl	8001c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2017      	movs	r0, #23
 800132c:	f000 fc03 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001330:	2017      	movs	r0, #23
 8001332:	f000 fc1c 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	10110000 	.word	0x10110000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <setLeftMotorPWM>:

volatile int leftPWM;
volatile int rightPWM;


void setLeftMotorPWM(int pwmPercentage){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	TIM1->CCR2 = pwmPercentage * 10;
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	461a      	mov	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <setLeftMotorPWM+0x24>)
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40012c00 	.word	0x40012c00

08001384 <setRightMotorPWM>:

void setRightMotorPWM(int pwmPercentage){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = pwmPercentage * 10;
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <setRightMotorPWM+0x24>)
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00

080013ac <setLeftMotorDirection>:
	rightPWM = TIM1->CCR1 / 10;
	return (rightPWM);
}

// 0 - forward; 1 - backward
void setLeftMotorDirection(int direction){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <setLeftMotorDirection+0x28>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <setLeftMotorDirection+0x54>)
 80013c2:	f000 fde9 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <setLeftMotorDirection+0x54>)
 80013ce:	f000 fde3 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
	}else{
		Error_Handler();
	}
}
 80013d2:	e011      	b.n	80013f8 <setLeftMotorDirection+0x4c>
	}else if(direction == 1){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10c      	bne.n	80013f4 <setLeftMotorDirection+0x48>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <setLeftMotorDirection+0x54>)
 80013e2:	f000 fdd9 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <setLeftMotorDirection+0x54>)
 80013ee:	f000 fdd3 	bl	8001f98 <HAL_GPIO_WritePin>
}
 80013f2:	e001      	b.n	80013f8 <setLeftMotorDirection+0x4c>
		Error_Handler();
 80013f4:	f7ff ffac 	bl	8001350 <Error_Handler>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010800 	.word	0x40010800

08001404 <setRightMotorDirection>:

void setRightMotorDirection(int direction){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10b      	bne.n	800142a <setRightMotorDirection+0x26>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <setRightMotorDirection+0x50>)
 800141a:	f000 fdbd 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <setRightMotorDirection+0x54>)
 8001424:	f000 fdb8 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
	}else{
		Error_Handler();
	}
}
 8001428:	e010      	b.n	800144c <setRightMotorDirection+0x48>
	}else if(direction == 1){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d10b      	bne.n	8001448 <setRightMotorDirection+0x44>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <setRightMotorDirection+0x50>)
 8001438:	f000 fdae 	bl	8001f98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <setRightMotorDirection+0x54>)
 8001442:	f000 fda9 	bl	8001f98 <HAL_GPIO_WritePin>
}
 8001446:	e001      	b.n	800144c <setRightMotorDirection+0x48>
		Error_Handler();
 8001448:	f7ff ff82 	bl	8001350 <Error_Handler>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00

0800145c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_MspInit+0x5c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_MspInit+0x5c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_MspInit+0x60>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_MspInit+0x60>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d114      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 80014d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2019      	movs	r0, #25
 80014f0:	f000 fb21 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014f4:	2019      	movs	r0, #25
 80014f6:	f000 fb3a 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fa:	e018      	b.n	800152e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d113      	bne.n	800152e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f000 fb07 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f000 fb20 	bl	8001b6e <HAL_NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_TIM_MspPostInit+0x5c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d118      	bne.n	8001592 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_TIM_MspPostInit+0x60>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_TIM_MspPostInit+0x60>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_TIM_MspPostInit+0x60>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RightMotorPWM_Pin|LeftMotorPWM_Pin;
 8001578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2302      	movs	r3, #2
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_TIM_MspPostInit+0x64>)
 800158e:	f000 fb7f 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012c00 	.word	0x40012c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d137      	bne.n	8001638 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f8:	2304      	movs	r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_UART_MspInit+0xa0>)
 800160c:	f000 fb40 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001610:	2308      	movs	r3, #8
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <HAL_UART_MspInit+0xa0>)
 8001624:	f000 fb34 	bl	8001c90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2026      	movs	r0, #38	; 0x26
 800162e:	f000 fa82 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001632:	2026      	movs	r0, #38	; 0x26
 8001634:	f000 fa9b 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004400 	.word	0x40004400
 8001644:	40021000 	.word	0x40021000
 8001648:	40010800 	.word	0x40010800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001692:	f000 f95d 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800169e:	2080      	movs	r0, #128	; 0x80
 80016a0:	f000 fc92 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80016a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a8:	f000 fc8e 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM1_UP_IRQHandler+0x10>)
 80016b6:	f001 fa55 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000260 	.word	0x20000260

080016c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM2_IRQHandler+0x10>)
 80016ca:	f001 fa4b 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002bc 	.word	0x200002bc

080016d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <USART2_IRQHandler+0x10>)
 80016de:	f002 f8f5 	bl	80038cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000304 	.word	0x20000304

080016ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_kill>:

int _kill(int pid, int sig)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001704:	f002 fba2 	bl	8003e4c <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	2216      	movs	r2, #22
 800170c:	601a      	str	r2, [r3, #0]
	return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_exit>:

void _exit (int status)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001722:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffe7 	bl	80016fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800172c:	e7fe      	b.n	800172c <_exit+0x12>

0800172e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e00a      	b.n	8001756 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001740:	f3af 8000 	nop.w
 8001744:	4601      	mov	r1, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	60ba      	str	r2, [r7, #8]
 800174c:	b2ca      	uxtb	r2, r1
 800174e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	dbf0      	blt.n	8001740 <_read+0x12>
	}

return len;
 800175e:	687b      	ldr	r3, [r7, #4]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e009      	b.n	800178e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbf1      	blt.n	800177a <_write+0x12>
	}
	return len;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_close>:

int _close(int file)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	605a      	str	r2, [r3, #4]
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <_isatty>:

int _isatty(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	return 0;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f002 fb0c 	bl	8003e4c <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005000 	.word	0x20005000
 8001860:	00000400 	.word	0x00000400
 8001864:	2000024c 	.word	0x2000024c
 8001868:	20000358 	.word	0x20000358

0800186c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001878:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800187a:	e003      	b.n	8001884 <LoopCopyDataInit>

0800187c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800187e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001880:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001882:	3104      	adds	r1, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001888:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800188c:	d3f6      	bcc.n	800187c <CopyDataInit>
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001890:	e002      	b.n	8001898 <LoopFillZerobss>

08001892 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001894:	f842 3b04 	str.w	r3, [r2], #4

08001898 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800189a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800189c:	d3f9      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800189e:	f7ff ffe5 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f002 fad9 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a6:	f7ff fa33 	bl	8000d10 <main>
  bx lr
 80018aa:	4770      	bx	lr
  ldr r3, =_sidata
 80018ac:	08007248 	.word	0x08007248
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80018b8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80018bc:	20000358 	.word	0x20000358

080018c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_2_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_Init+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_Init+0x28>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f923 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fdbc 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f93b 	bl	8001b8a <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192c:	f000 f903 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x1c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x20>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a03      	ldr	r2, [pc, #12]	; (8001970 <HAL_IncTick+0x20>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000008 	.word	0x20000008
 8001970:	20000344 	.word	0x20000344

08001974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_GetTick+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000344 	.word	0x20000344

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4906      	ldr	r1, [pc, #24]	; (8001a20 <__NVIC_EnableIRQ+0x34>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b00:	f7ff ff90 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff2d 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff42 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff90 	bl	8001a78 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5f 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff35 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d005      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e051      	b.n	8001c6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 020e 	bic.w	r2, r2, #14
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_DMA_Abort_IT+0xd0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d029      	beq.n	8001c44 <HAL_DMA_Abort_IT+0xa0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_DMA_Abort_IT+0xd4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x9c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_DMA_Abort_IT+0xd8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01a      	beq.n	8001c3a <HAL_DMA_Abort_IT+0x96>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <HAL_DMA_Abort_IT+0xdc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d012      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x90>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_DMA_Abort_IT+0xe0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00a      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x8a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_DMA_Abort_IT+0xe4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d102      	bne.n	8001c28 <HAL_DMA_Abort_IT+0x84>
 8001c22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c26:	e00e      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2c:	e00b      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c32:	e008      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	e005      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3e:	e002      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c40:	2310      	movs	r3, #16
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_Abort_IT+0xa2>
 8001c44:	2301      	movs	r3, #1
 8001c46:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_DMA_Abort_IT+0xe8>)
 8001c48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
    } 
  }
  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40020008 	.word	0x40020008
 8001c78:	4002001c 	.word	0x4002001c
 8001c7c:	40020030 	.word	0x40020030
 8001c80:	40020044 	.word	0x40020044
 8001c84:	40020058 	.word	0x40020058
 8001c88:	4002006c 	.word	0x4002006c
 8001c8c:	40020000 	.word	0x40020000

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b08b      	sub	sp, #44	; 0x2c
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e169      	b.n	8001f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8158 	bne.w	8001f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a9a      	ldr	r2, [pc, #616]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d05e      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a98      	ldr	r2, [pc, #608]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d875      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cd2:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d058      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d86f      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cde:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d052      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ce4:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d869      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cea:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04c      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cf0:	4a92      	ldr	r2, [pc, #584]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d863      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cf6:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d046      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cfc:	4a90      	ldr	r2, [pc, #576]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d85d      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d82a      	bhi.n	8001d5c <HAL_GPIO_Init+0xcc>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d859      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_GPIO_Init+0x80>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d8b 	.word	0x08001d8b
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d77 	.word	0x08001d77
 8001d1c:	08001db9 	.word	0x08001db9
 8001d20:	08001dbf 	.word	0x08001dbf
 8001d24:	08001dbf 	.word	0x08001dbf
 8001d28:	08001dbf 	.word	0x08001dbf
 8001d2c:	08001dbf 	.word	0x08001dbf
 8001d30:	08001dbf 	.word	0x08001dbf
 8001d34:	08001dbf 	.word	0x08001dbf
 8001d38:	08001dbf 	.word	0x08001dbf
 8001d3c:	08001dbf 	.word	0x08001dbf
 8001d40:	08001dbf 	.word	0x08001dbf
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001dbf 	.word	0x08001dbf
 8001d4c:	08001dbf 	.word	0x08001dbf
 8001d50:	08001dbf 	.word	0x08001dbf
 8001d54:	08001d6d 	.word	0x08001d6d
 8001d58:	08001d81 	.word	0x08001d81
 8001d5c:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <HAL_GPIO_Init+0x2b4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d62:	e02c      	b.n	8001dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e029      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	3304      	adds	r3, #4
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e024      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e01f      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e01a      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d92:	2304      	movs	r3, #4
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e013      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	611a      	str	r2, [r3, #16]
          break;
 8001daa:	e009      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	615a      	str	r2, [r3, #20]
          break;
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          break;
 8001dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d801      	bhi.n	8001dca <HAL_GPIO_Init+0x13a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_Init+0x13e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d802      	bhi.n	8001ddc <HAL_GPIO_Init+0x14c>
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x152>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3b08      	subs	r3, #8
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	210f      	movs	r1, #15
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	6a39      	ldr	r1, [r7, #32]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80b1 	beq.w	8001f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3f      	ldr	r2, [pc, #252]	; (8001f54 <HAL_GPIO_Init+0x2c4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <HAL_GPIO_Init+0x2c8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x1e4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3d      	ldr	r2, [pc, #244]	; (8001f5c <HAL_GPIO_Init+0x2cc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_GPIO_Init+0x1e0>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8e:	492f      	ldr	r1, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	492c      	ldr	r1, [pc, #176]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4928      	ldr	r1, [pc, #160]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	491e      	ldr	r1, [pc, #120]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d021      	beq.n	8001f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
 8001f2c:	e021      	b.n	8001f72 <HAL_GPIO_Init+0x2e2>
 8001f2e:	bf00      	nop
 8001f30:	10320000 	.word	0x10320000
 8001f34:	10310000 	.word	0x10310000
 8001f38:	10220000 	.word	0x10220000
 8001f3c:	10210000 	.word	0x10210000
 8001f40:	10120000 	.word	0x10120000
 8001f44:	10110000 	.word	0x10110000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4909      	ldr	r1, [pc, #36]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f47f ae8e 	bne.w	8001ca4 <HAL_GPIO_Init+0x14>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	372c      	adds	r7, #44	; 0x2c
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ff78 	bl	8000edc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e26c      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8087 	beq.w	8002126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002018:	4b92      	ldr	r3, [pc, #584]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00c      	beq.n	800203e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002024:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d112      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
 8002030:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d10b      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203e:	4b89      	ldr	r3, [pc, #548]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06c      	beq.n	8002124 <HAL_RCC_OscConfig+0x12c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d168      	bne.n	8002124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e246      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x76>
 8002060:	4b80      	ldr	r3, [pc, #512]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e02e      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b78      	ldr	r3, [pc, #480]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a77      	ldr	r2, [pc, #476]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0xbc>
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a71      	ldr	r2, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 80020b4:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a67      	ldr	r2, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc4e 	bl	8001974 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc4a 	bl	8001974 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1fa      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xe4>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fc3a 	bl	8001974 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc36 	bl	8001974 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1e6      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x10c>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800213e:	4b49      	ldr	r3, [pc, #292]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1ba      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4939      	ldr	r1, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x270>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff fbef 	bl	8001974 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fbeb 	bl	8001974 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e19b      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4927      	ldr	r1, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x270>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbce 	bl	8001974 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fbca 	bl	8001974 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e17a      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03a      	beq.n	800227c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_RCC_OscConfig+0x274>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7ff fbae 	bl	8001974 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fbaa 	bl	8001974 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e15a      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800223a:	2001      	movs	r0, #1
 800223c:	f000 fad8 	bl	80027f0 <RCC_Delay>
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_OscConfig+0x274>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff fb94 	bl	8001974 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00f      	b.n	8002270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fb90 	bl	8001974 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d908      	bls.n	8002270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e140      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	42420000 	.word	0x42420000
 800226c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e9      	bne.n	8002250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a6 	beq.w	80023d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b97      	ldr	r3, [pc, #604]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b94      	ldr	r3, [pc, #592]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a93      	ldr	r2, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b91      	ldr	r3, [pc, #580]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a8a      	ldr	r2, [pc, #552]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fb51 	bl	8001974 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fb4d 	bl	8001974 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0fd      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x312>
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e02d      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x334>
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	e01c      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x356>
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb01 	bl	8001974 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fafd 	bl	8001974 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0ab      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ee      	beq.n	8002376 <HAL_RCC_OscConfig+0x37e>
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff faeb 	bl	8001974 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7ff fae7 	bl	8001974 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e095      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8081 	beq.w	80024e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d061      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d146      	bne.n	8002482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fabb 	bl	8001974 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff fab7 	bl	8001974 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e067      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d108      	bne.n	800243c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242a:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	492d      	ldr	r1, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a19      	ldr	r1, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	430b      	orrs	r3, r1
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff fa8b 	bl	8001974 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff fa87 	bl	8001974 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e037      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x46a>
 8002480:	e02f      	b.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fa74 	bl	8001974 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff fa70 	bl	8001974 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e020      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x498>
 80024ae:	e018      	b.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e013      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d0      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d910      	bls.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4965      	ldr	r1, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d040      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e073      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4936      	ldr	r1, [pc, #216]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff f9c4 	bl	8001974 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7ff f9c0 	bl	8001974 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e053      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d210      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4922      	ldr	r1, [pc, #136]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490a      	ldr	r1, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1cc>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f922 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08006d8c 	.word	0x08006d8c
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b490      	push	{r4, r7}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	1d3c      	adds	r4, r7, #4
 80026d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026dc:	f240 2301 	movw	r3, #513	; 0x201
 80026e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x40>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x46>
 800270a:	e02d      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270e:	623b      	str	r3, [r7, #32]
      break;
 8002710:	e02d      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800271e:	4413      	add	r3, r2
 8002720:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002724:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0c5b      	lsrs	r3, r3, #17
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273e:	4413      	add	r3, r2
 8002740:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002744:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274a:	fb02 f203 	mul.w	r2, r2, r3
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e004      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_RCC_GetSysClockFreq+0xbc>)
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	623b      	str	r3, [r7, #32]
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	623b      	str	r3, [r7, #32]
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6a3b      	ldr	r3, [r7, #32]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc90      	pop	{r4, r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	08006d7c 	.word	0x08006d7c
 8002780:	40021000 	.word	0x40021000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	003d0900 	.word	0x003d0900

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b02      	ldr	r3, [pc, #8]	; (800279c <HAL_RCC_GetHCLKFreq+0x10>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff2 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08006d9c 	.word	0x08006d9c

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffde 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08006d9c 	.word	0x08006d9c

080027f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <RCC_Delay+0x34>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <RCC_Delay+0x38>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800280c:	bf00      	nop
  }
  while (Delay --);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <RCC_Delay+0x1c>
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000000 	.word	0x20000000
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fe34 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fc28 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e03a      	b.n	800295a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_TIM_Base_Start_IT+0x98>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d009      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_TIM_Base_Start_IT+0x9c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_TIM_Base_Start_IT+0xa0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d010      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	e007      	b.n	8002958 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800

08002970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e041      	b.n	8002a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f839 	bl	8002a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fb86 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x24>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x58>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e05e      	b.n	8002b50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x82>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x92>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xa2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fd74 	bl	80035c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_TIM_PWM_Start+0x138>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_PWM_Start+0x138>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d009      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_TIM_PWM_Start+0x13c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <HAL_TIM_PWM_Start+0x140>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d111      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d010      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	e007      	b.n	8002b4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0202 	mvn.w	r2, #2
 8002b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fa6f 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa62 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa71 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0204 	mvn.w	r2, #4
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa45 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa38 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa47 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0208 	mvn.w	r2, #8
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa1b 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa0e 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa1d 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0210 	mvn.w	r2, #16
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2208      	movs	r2, #8
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9f1 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f9e4 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9f3 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0201 	mvn.w	r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f8a4 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fd32 	bl	8003778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9b7 	bl	80030ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0220 	mvn.w	r2, #32
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fcfd 	bl	8003766 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0ac      	b.n	8002ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	f200 809f 	bhi.w	8002edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002edd 	.word	0x08002edd
 8002dac:	08002edd 	.word	0x08002edd
 8002db0:	08002edd 	.word	0x08002edd
 8002db4:	08002e19 	.word	0x08002e19
 8002db8:	08002edd 	.word	0x08002edd
 8002dbc:	08002edd 	.word	0x08002edd
 8002dc0:	08002edd 	.word	0x08002edd
 8002dc4:	08002e5b 	.word	0x08002e5b
 8002dc8:	08002edd 	.word	0x08002edd
 8002dcc:	08002edd 	.word	0x08002edd
 8002dd0:	08002edd 	.word	0x08002edd
 8002dd4:	08002e9b 	.word	0x08002e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f9d0 	bl	8003184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6999      	ldr	r1, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]
      break;
 8002e16:	e062      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa16 	bl	8003250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
      break;
 8002e58:	e041      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fa5f 	bl	8003324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0208 	orr.w	r2, r2, #8
 8002e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0204 	bic.w	r2, r2, #4
 8002e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69d9      	ldr	r1, [r3, #28]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      break;
 8002e98:	e021      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 faa9 	bl	80033f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	021a      	lsls	r2, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	61da      	str	r2, [r3, #28]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0b3      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x180>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d03e      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	f200 8087 	bhi.w	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	f000 8085 	beq.w	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d87f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b70      	cmp	r3, #112	; 0x70
 8002f5a:	d01a      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xa2>
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d87b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d050      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x116>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d877      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d03c      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f6c:	2b50      	cmp	r3, #80	; 0x50
 8002f6e:	d873      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d058      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x136>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d86f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f78:	2b30      	cmp	r3, #48	; 0x30
 8002f7a:	d064      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d86b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d060      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d867      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05c      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d05a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f90:	e062      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f000 faee 	bl	8003582 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
      break;
 8002fbe:	e04e      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f000 fad7 	bl	8003582 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe2:	609a      	str	r2, [r3, #8]
      break;
 8002fe4:	e03b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 fa4e 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2150      	movs	r1, #80	; 0x50
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 faa5 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003004:	e02b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 fa6c 	bl	80034f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2160      	movs	r1, #96	; 0x60
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa95 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003024:	e01b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 fa2e 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa85 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003044:	e00b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f000 fa7c 	bl	800354e <TIM_ITRx_SetConfig>
        break;
 8003056:	e002      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800305c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a29      	ldr	r2, [pc, #164]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d007      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a26      	ldr	r2, [pc, #152]	; (800317c <TIM_Base_SetConfig+0xbc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a25      	ldr	r2, [pc, #148]	; (8003180 <TIM_Base_SetConfig+0xc0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <TIM_Base_SetConfig+0xbc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <TIM_Base_SetConfig+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a07      	ldr	r2, [pc, #28]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d103      	bne.n	8003168 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	615a      	str	r2, [r3, #20]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0201 	bic.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1c      	ldr	r2, [pc, #112]	; (800324c <TIM_OC1_SetConfig+0xc8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10c      	bne.n	80031fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0308 	bic.w	r3, r3, #8
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <TIM_OC1_SetConfig+0xc8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0320 	bic.w	r3, r3, #32
 800329a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <TIM_OC2_SetConfig+0xd0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10d      	bne.n	80032cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC2_SetConfig+0xd0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d113      	bne.n	80032fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00

08003324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800336c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <TIM_OC3_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10d      	bne.n	800339e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <TIM_OC3_SetConfig+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <TIM_OC4_SetConfig+0x98>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d109      	bne.n	800346c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00

08003494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 030a 	bic.w	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 0210 	bic.w	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	031b      	lsls	r3, r3, #12
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800352c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 0307 	orr.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2201      	movs	r2, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e046      	b.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d009      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800

080036c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e03d      	b.n	800375c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e03f      	b.n	800381c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fef9 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	; 0x24
 80037ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 faa6 	bl	8003d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003802:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d140      	bne.n	80038c0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_Receive_IT+0x26>
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e039      	b.n	80038c2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_UART_Receive_IT+0x38>
 8003858:	2302      	movs	r3, #2
 800385a:	e032      	b.n	80038c2 <HAL_UART_Receive_IT+0x9e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	88fa      	ldrh	r2, [r7, #6]
 800386e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2222      	movs	r2, #34	; 0x22
 8003880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_UART_IRQHandler+0x52>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f982 	bl	8003c20 <UART_Receive_IT>
      return;
 800391c:	e0d0      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80b0 	beq.w	8003a86 <HAL_UART_IRQHandler+0x1ba>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_UART_IRQHandler+0x70>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a5 	beq.w	8003a86 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_UART_IRQHandler+0x90>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_UART_IRQHandler+0xb0>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	f043 0202 	orr.w	r2, r3, #2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_UART_IRQHandler+0xd0>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00f      	beq.n	80039c6 <HAL_UART_IRQHandler+0xfa>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_UART_IRQHandler+0xee>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	f043 0208 	orr.w	r2, r3, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d077      	beq.n	8003abe <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_UART_IRQHandler+0x11c>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f91c 	bl	8003c20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <HAL_UART_IRQHandler+0x144>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d031      	beq.n	8003a74 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f86d 	bl	8003af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d023      	beq.n	8003a6c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a32:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_UART_IRQHandler+0x1fc>)
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe f8ab 	bl	8001ba4 <HAL_DMA_Abort_IT>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a62:	e00e      	b.n	8003a82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f83a 	bl	8003ade <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6a:	e00a      	b.n	8003a82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f836 	bl	8003ade <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	e006      	b.n	8003a82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f832 	bl	8003ade <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a80:	e01d      	b.n	8003abe <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a82:	bf00      	nop
    return;
 8003a84:	e01b      	b.n	8003abe <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1d6>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f859 	bl	8003b52 <UART_Transmit_IT>
    return;
 8003aa0:	e00e      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1f4>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f89a 	bl	8003bf0 <UART_EndTransmit_IT>
    return;
 8003abc:	e000      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003abe:	bf00      	nop
  }
}
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08003b2b 	.word	0x08003b2b

08003acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff ffca 	bl	8003ade <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b21      	cmp	r3, #33	; 0x21
 8003b64:	d13e      	bne.n	8003be4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d114      	bne.n	8003b9a <UART_Transmit_IT+0x48>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d110      	bne.n	8003b9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]
 8003b98:	e008      	b.n	8003bac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	1c59      	adds	r1, r3, #1
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6211      	str	r1, [r2, #32]
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff5b 	bl	8003acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b22      	cmp	r3, #34	; 0x22
 8003c32:	d170      	bne.n	8003d16 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d117      	bne.n	8003c6e <UART_Receive_IT+0x4e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6c:	e026      	b.n	8003cbc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d007      	beq.n	8003c92 <UART_Receive_IT+0x72>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <UART_Receive_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e008      	b.n	8003cb2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d120      	bne.n	8003d12 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0220 	bic.w	r2, r2, #32
 8003cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fd f82b 	bl	8000d64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e002      	b.n	8003d18 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d5a:	f023 030c 	bic.w	r3, r3, #12
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <UART_SetConfig+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fd1e 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	e002      	b.n	8003d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fd06 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8003d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <UART_SetConfig+0x118>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	0119      	lsls	r1, r3, #4
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <UART_SetConfig+0x118>)
 8003dce:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <UART_SetConfig+0x118>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	4419      	add	r1, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009a      	lsls	r2, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <UART_SetConfig+0x118>)
 8003e06:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2064      	movs	r0, #100	; 0x64
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <UART_SetConfig+0x118>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	440a      	add	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40013800 	.word	0x40013800
 8003e38:	51eb851f 	.word	0x51eb851f

08003e3c <atof>:
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f000 be4f 	b.w	8004ae0 <strtod>

08003e42 <atoi>:
 8003e42:	220a      	movs	r2, #10
 8003e44:	2100      	movs	r1, #0
 8003e46:	f000 bf39 	b.w	8004cbc <strtol>
	...

08003e4c <__errno>:
 8003e4c:	4b01      	ldr	r3, [pc, #4]	; (8003e54 <__errno+0x8>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	4d0c      	ldr	r5, [pc, #48]	; (8003e90 <__libc_init_array+0x38>)
 8003e5e:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	f002 ff70 	bl	8006d4c <_init>
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	4d0a      	ldr	r5, [pc, #40]	; (8003e98 <__libc_init_array+0x40>)
 8003e70:	4c0a      	ldr	r4, [pc, #40]	; (8003e9c <__libc_init_array+0x44>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08007240 	.word	0x08007240
 8003e94:	08007240 	.word	0x08007240
 8003e98:	08007240 	.word	0x08007240
 8003e9c:	08007244 	.word	0x08007244

08003ea0 <memset>:
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <sulp>:
 8003eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb4:	460f      	mov	r7, r1
 8003eb6:	4690      	mov	r8, r2
 8003eb8:	f001 fe38 	bl	8005b2c <__ulp>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	f1b8 0f00 	cmp.w	r8, #0
 8003ec4:	d011      	beq.n	8003eea <sulp+0x3a>
 8003ec6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dd0b      	ble.n	8003eea <sulp+0x3a>
 8003ed2:	2400      	movs	r4, #0
 8003ed4:	051b      	lsls	r3, r3, #20
 8003ed6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f7fc fbad 	bl	8000640 <__aeabi_dmul>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	460d      	mov	r5, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef2:	0000      	movs	r0, r0
 8003ef4:	0000      	movs	r0, r0
	...

08003ef8 <_strtod_l>:
 8003ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efc:	469b      	mov	fp, r3
 8003efe:	2300      	movs	r3, #0
 8003f00:	b0a1      	sub	sp, #132	; 0x84
 8003f02:	931c      	str	r3, [sp, #112]	; 0x70
 8003f04:	4ba1      	ldr	r3, [pc, #644]	; (800418c <_strtod_l+0x294>)
 8003f06:	4682      	mov	sl, r0
 8003f08:	681f      	ldr	r7, [r3, #0]
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003f10:	f7fc f91e 	bl	8000150 <strlen>
 8003f14:	f04f 0800 	mov.w	r8, #0
 8003f18:	4604      	mov	r4, r0
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	2a2b      	cmp	r2, #43	; 0x2b
 8003f26:	d04c      	beq.n	8003fc2 <_strtod_l+0xca>
 8003f28:	d83a      	bhi.n	8003fa0 <_strtod_l+0xa8>
 8003f2a:	2a0d      	cmp	r2, #13
 8003f2c:	d833      	bhi.n	8003f96 <_strtod_l+0x9e>
 8003f2e:	2a08      	cmp	r2, #8
 8003f30:	d833      	bhi.n	8003f9a <_strtod_l+0xa2>
 8003f32:	2a00      	cmp	r2, #0
 8003f34:	d03d      	beq.n	8003fb2 <_strtod_l+0xba>
 8003f36:	2300      	movs	r3, #0
 8003f38:	930c      	str	r3, [sp, #48]	; 0x30
 8003f3a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f3c:	782b      	ldrb	r3, [r5, #0]
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	f040 80af 	bne.w	80040a2 <_strtod_l+0x1aa>
 8003f44:	786b      	ldrb	r3, [r5, #1]
 8003f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f4a:	2b58      	cmp	r3, #88	; 0x58
 8003f4c:	d16c      	bne.n	8004028 <_strtod_l+0x130>
 8003f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f50:	4650      	mov	r0, sl
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	ab1c      	add	r3, sp, #112	; 0x70
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4a8d      	ldr	r2, [pc, #564]	; (8004190 <_strtod_l+0x298>)
 8003f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8003f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f60:	a91b      	add	r1, sp, #108	; 0x6c
 8003f62:	f000 ff4d 	bl	8004e00 <__gethex>
 8003f66:	f010 0607 	ands.w	r6, r0, #7
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	d005      	beq.n	8003f7a <_strtod_l+0x82>
 8003f6e:	2e06      	cmp	r6, #6
 8003f70:	d129      	bne.n	8003fc6 <_strtod_l+0xce>
 8003f72:	2300      	movs	r3, #0
 8003f74:	3501      	adds	r5, #1
 8003f76:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f78:	930c      	str	r3, [sp, #48]	; 0x30
 8003f7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 8596 	bne.w	8004aae <_strtod_l+0xbb6>
 8003f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f84:	b1d3      	cbz	r3, 8003fbc <_strtod_l+0xc4>
 8003f86:	4642      	mov	r2, r8
 8003f88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	b021      	add	sp, #132	; 0x84
 8003f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f96:	2a20      	cmp	r2, #32
 8003f98:	d1cd      	bne.n	8003f36 <_strtod_l+0x3e>
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f9e:	e7bf      	b.n	8003f20 <_strtod_l+0x28>
 8003fa0:	2a2d      	cmp	r2, #45	; 0x2d
 8003fa2:	d1c8      	bne.n	8003f36 <_strtod_l+0x3e>
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	920c      	str	r2, [sp, #48]	; 0x30
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	921b      	str	r2, [sp, #108]	; 0x6c
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1c3      	bne.n	8003f3a <_strtod_l+0x42>
 8003fb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8577 	bne.w	8004aaa <_strtod_l+0xbb2>
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	e7e4      	b.n	8003f8c <_strtod_l+0x94>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	e7ef      	b.n	8003fa6 <_strtod_l+0xae>
 8003fc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003fc8:	b13a      	cbz	r2, 8003fda <_strtod_l+0xe2>
 8003fca:	2135      	movs	r1, #53	; 0x35
 8003fcc:	a81e      	add	r0, sp, #120	; 0x78
 8003fce:	f001 feb1 	bl	8005d34 <__copybits>
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fd6:	f001 fa79 	bl	80054cc <_Bfree>
 8003fda:	3e01      	subs	r6, #1
 8003fdc:	2e05      	cmp	r6, #5
 8003fde:	d807      	bhi.n	8003ff0 <_strtod_l+0xf8>
 8003fe0:	e8df f006 	tbb	[pc, r6]
 8003fe4:	1d180b0e 	.word	0x1d180b0e
 8003fe8:	030e      	.short	0x030e
 8003fea:	f04f 0900 	mov.w	r9, #0
 8003fee:	46c8      	mov	r8, r9
 8003ff0:	0721      	lsls	r1, r4, #28
 8003ff2:	d5c2      	bpl.n	8003f7a <_strtod_l+0x82>
 8003ff4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003ff8:	e7bf      	b.n	8003f7a <_strtod_l+0x82>
 8003ffa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003ffe:	e7f7      	b.n	8003ff0 <_strtod_l+0xf8>
 8004000:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004002:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800400a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800400e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004012:	e7ed      	b.n	8003ff0 <_strtod_l+0xf8>
 8004014:	f04f 0800 	mov.w	r8, #0
 8004018:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004194 <_strtod_l+0x29c>
 800401c:	e7e8      	b.n	8003ff0 <_strtod_l+0xf8>
 800401e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004022:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004026:	e7e3      	b.n	8003ff0 <_strtod_l+0xf8>
 8004028:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	921b      	str	r2, [sp, #108]	; 0x6c
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b30      	cmp	r3, #48	; 0x30
 8004032:	d0f9      	beq.n	8004028 <_strtod_l+0x130>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0a0      	beq.n	8003f7a <_strtod_l+0x82>
 8004038:	2301      	movs	r3, #1
 800403a:	9307      	str	r3, [sp, #28]
 800403c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800403e:	220a      	movs	r2, #10
 8004040:	9308      	str	r3, [sp, #32]
 8004042:	2300      	movs	r3, #0
 8004044:	469b      	mov	fp, r3
 8004046:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800404a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800404c:	7805      	ldrb	r5, [r0, #0]
 800404e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004052:	b2d9      	uxtb	r1, r3
 8004054:	2909      	cmp	r1, #9
 8004056:	d926      	bls.n	80040a6 <_strtod_l+0x1ae>
 8004058:	4622      	mov	r2, r4
 800405a:	4639      	mov	r1, r7
 800405c:	f002 fa66 	bl	800652c <strncmp>
 8004060:	2800      	cmp	r0, #0
 8004062:	d032      	beq.n	80040ca <_strtod_l+0x1d2>
 8004064:	2000      	movs	r0, #0
 8004066:	462b      	mov	r3, r5
 8004068:	465c      	mov	r4, fp
 800406a:	4602      	mov	r2, r0
 800406c:	9004      	str	r0, [sp, #16]
 800406e:	2b65      	cmp	r3, #101	; 0x65
 8004070:	d001      	beq.n	8004076 <_strtod_l+0x17e>
 8004072:	2b45      	cmp	r3, #69	; 0x45
 8004074:	d113      	bne.n	800409e <_strtod_l+0x1a6>
 8004076:	b91c      	cbnz	r4, 8004080 <_strtod_l+0x188>
 8004078:	9b07      	ldr	r3, [sp, #28]
 800407a:	4303      	orrs	r3, r0
 800407c:	d099      	beq.n	8003fb2 <_strtod_l+0xba>
 800407e:	2400      	movs	r4, #0
 8004080:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004082:	1c73      	adds	r3, r6, #1
 8004084:	931b      	str	r3, [sp, #108]	; 0x6c
 8004086:	7873      	ldrb	r3, [r6, #1]
 8004088:	2b2b      	cmp	r3, #43	; 0x2b
 800408a:	d078      	beq.n	800417e <_strtod_l+0x286>
 800408c:	2b2d      	cmp	r3, #45	; 0x2d
 800408e:	d07b      	beq.n	8004188 <_strtod_l+0x290>
 8004090:	2700      	movs	r7, #0
 8004092:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004096:	2909      	cmp	r1, #9
 8004098:	f240 8082 	bls.w	80041a0 <_strtod_l+0x2a8>
 800409c:	961b      	str	r6, [sp, #108]	; 0x6c
 800409e:	2500      	movs	r5, #0
 80040a0:	e09e      	b.n	80041e0 <_strtod_l+0x2e8>
 80040a2:	2300      	movs	r3, #0
 80040a4:	e7c9      	b.n	800403a <_strtod_l+0x142>
 80040a6:	f1bb 0f08 	cmp.w	fp, #8
 80040aa:	bfd5      	itete	le
 80040ac:	9906      	ldrle	r1, [sp, #24]
 80040ae:	9905      	ldrgt	r1, [sp, #20]
 80040b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80040b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80040b8:	f100 0001 	add.w	r0, r0, #1
 80040bc:	bfd4      	ite	le
 80040be:	9306      	strle	r3, [sp, #24]
 80040c0:	9305      	strgt	r3, [sp, #20]
 80040c2:	f10b 0b01 	add.w	fp, fp, #1
 80040c6:	901b      	str	r0, [sp, #108]	; 0x6c
 80040c8:	e7bf      	b.n	800404a <_strtod_l+0x152>
 80040ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040cc:	191a      	adds	r2, r3, r4
 80040ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80040d0:	5d1b      	ldrb	r3, [r3, r4]
 80040d2:	f1bb 0f00 	cmp.w	fp, #0
 80040d6:	d036      	beq.n	8004146 <_strtod_l+0x24e>
 80040d8:	465c      	mov	r4, fp
 80040da:	9004      	str	r0, [sp, #16]
 80040dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80040e0:	2a09      	cmp	r2, #9
 80040e2:	d912      	bls.n	800410a <_strtod_l+0x212>
 80040e4:	2201      	movs	r2, #1
 80040e6:	e7c2      	b.n	800406e <_strtod_l+0x176>
 80040e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040ea:	3001      	adds	r0, #1
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b30      	cmp	r3, #48	; 0x30
 80040f4:	d0f8      	beq.n	80040e8 <_strtod_l+0x1f0>
 80040f6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80040fa:	2a08      	cmp	r2, #8
 80040fc:	f200 84dc 	bhi.w	8004ab8 <_strtod_l+0xbc0>
 8004100:	9004      	str	r0, [sp, #16]
 8004102:	2000      	movs	r0, #0
 8004104:	4604      	mov	r4, r0
 8004106:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004108:	9208      	str	r2, [sp, #32]
 800410a:	3b30      	subs	r3, #48	; 0x30
 800410c:	f100 0201 	add.w	r2, r0, #1
 8004110:	d013      	beq.n	800413a <_strtod_l+0x242>
 8004112:	9904      	ldr	r1, [sp, #16]
 8004114:	1905      	adds	r5, r0, r4
 8004116:	4411      	add	r1, r2
 8004118:	9104      	str	r1, [sp, #16]
 800411a:	4622      	mov	r2, r4
 800411c:	210a      	movs	r1, #10
 800411e:	42aa      	cmp	r2, r5
 8004120:	d113      	bne.n	800414a <_strtod_l+0x252>
 8004122:	1822      	adds	r2, r4, r0
 8004124:	2a08      	cmp	r2, #8
 8004126:	f104 0401 	add.w	r4, r4, #1
 800412a:	4404      	add	r4, r0
 800412c:	dc1b      	bgt.n	8004166 <_strtod_l+0x26e>
 800412e:	220a      	movs	r2, #10
 8004130:	9906      	ldr	r1, [sp, #24]
 8004132:	fb02 3301 	mla	r3, r2, r1, r3
 8004136:	9306      	str	r3, [sp, #24]
 8004138:	2200      	movs	r2, #0
 800413a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800413c:	4610      	mov	r0, r2
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	911b      	str	r1, [sp, #108]	; 0x6c
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	e7ca      	b.n	80040dc <_strtod_l+0x1e4>
 8004146:	4658      	mov	r0, fp
 8004148:	e7d3      	b.n	80040f2 <_strtod_l+0x1fa>
 800414a:	2a08      	cmp	r2, #8
 800414c:	dc04      	bgt.n	8004158 <_strtod_l+0x260>
 800414e:	9f06      	ldr	r7, [sp, #24]
 8004150:	434f      	muls	r7, r1
 8004152:	9706      	str	r7, [sp, #24]
 8004154:	3201      	adds	r2, #1
 8004156:	e7e2      	b.n	800411e <_strtod_l+0x226>
 8004158:	1c57      	adds	r7, r2, #1
 800415a:	2f10      	cmp	r7, #16
 800415c:	bfde      	ittt	le
 800415e:	9f05      	ldrle	r7, [sp, #20]
 8004160:	434f      	mulle	r7, r1
 8004162:	9705      	strle	r7, [sp, #20]
 8004164:	e7f6      	b.n	8004154 <_strtod_l+0x25c>
 8004166:	2c10      	cmp	r4, #16
 8004168:	bfdf      	itttt	le
 800416a:	220a      	movle	r2, #10
 800416c:	9905      	ldrle	r1, [sp, #20]
 800416e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004172:	9305      	strle	r3, [sp, #20]
 8004174:	e7e0      	b.n	8004138 <_strtod_l+0x240>
 8004176:	2300      	movs	r3, #0
 8004178:	2201      	movs	r2, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	e77c      	b.n	8004078 <_strtod_l+0x180>
 800417e:	2700      	movs	r7, #0
 8004180:	1cb3      	adds	r3, r6, #2
 8004182:	931b      	str	r3, [sp, #108]	; 0x6c
 8004184:	78b3      	ldrb	r3, [r6, #2]
 8004186:	e784      	b.n	8004092 <_strtod_l+0x19a>
 8004188:	2701      	movs	r7, #1
 800418a:	e7f9      	b.n	8004180 <_strtod_l+0x288>
 800418c:	08007038 	.word	0x08007038
 8004190:	08006db4 	.word	0x08006db4
 8004194:	7ff00000 	.word	0x7ff00000
 8004198:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	911b      	str	r1, [sp, #108]	; 0x6c
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d0f9      	beq.n	8004198 <_strtod_l+0x2a0>
 80041a4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80041a8:	2908      	cmp	r1, #8
 80041aa:	f63f af78 	bhi.w	800409e <_strtod_l+0x1a6>
 80041ae:	f04f 0e0a 	mov.w	lr, #10
 80041b2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80041b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041b8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041bc:	1c59      	adds	r1, r3, #1
 80041be:	911b      	str	r1, [sp, #108]	; 0x6c
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80041c6:	2d09      	cmp	r5, #9
 80041c8:	d935      	bls.n	8004236 <_strtod_l+0x33e>
 80041ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80041cc:	1b49      	subs	r1, r1, r5
 80041ce:	2908      	cmp	r1, #8
 80041d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80041d4:	dc02      	bgt.n	80041dc <_strtod_l+0x2e4>
 80041d6:	4565      	cmp	r5, ip
 80041d8:	bfa8      	it	ge
 80041da:	4665      	movge	r5, ip
 80041dc:	b107      	cbz	r7, 80041e0 <_strtod_l+0x2e8>
 80041de:	426d      	negs	r5, r5
 80041e0:	2c00      	cmp	r4, #0
 80041e2:	d14c      	bne.n	800427e <_strtod_l+0x386>
 80041e4:	9907      	ldr	r1, [sp, #28]
 80041e6:	4301      	orrs	r1, r0
 80041e8:	f47f aec7 	bne.w	8003f7a <_strtod_l+0x82>
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	f47f aee0 	bne.w	8003fb2 <_strtod_l+0xba>
 80041f2:	2b69      	cmp	r3, #105	; 0x69
 80041f4:	d026      	beq.n	8004244 <_strtod_l+0x34c>
 80041f6:	dc23      	bgt.n	8004240 <_strtod_l+0x348>
 80041f8:	2b49      	cmp	r3, #73	; 0x49
 80041fa:	d023      	beq.n	8004244 <_strtod_l+0x34c>
 80041fc:	2b4e      	cmp	r3, #78	; 0x4e
 80041fe:	f47f aed8 	bne.w	8003fb2 <_strtod_l+0xba>
 8004202:	499c      	ldr	r1, [pc, #624]	; (8004474 <_strtod_l+0x57c>)
 8004204:	a81b      	add	r0, sp, #108	; 0x6c
 8004206:	f001 f849 	bl	800529c <__match>
 800420a:	2800      	cmp	r0, #0
 800420c:	f43f aed1 	beq.w	8003fb2 <_strtod_l+0xba>
 8004210:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b28      	cmp	r3, #40	; 0x28
 8004216:	d12c      	bne.n	8004272 <_strtod_l+0x37a>
 8004218:	4997      	ldr	r1, [pc, #604]	; (8004478 <_strtod_l+0x580>)
 800421a:	aa1e      	add	r2, sp, #120	; 0x78
 800421c:	a81b      	add	r0, sp, #108	; 0x6c
 800421e:	f001 f851 	bl	80052c4 <__hexnan>
 8004222:	2805      	cmp	r0, #5
 8004224:	d125      	bne.n	8004272 <_strtod_l+0x37a>
 8004226:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004228:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800422c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004230:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004234:	e6a1      	b.n	8003f7a <_strtod_l+0x82>
 8004236:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800423a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800423e:	e7bc      	b.n	80041ba <_strtod_l+0x2c2>
 8004240:	2b6e      	cmp	r3, #110	; 0x6e
 8004242:	e7dc      	b.n	80041fe <_strtod_l+0x306>
 8004244:	498d      	ldr	r1, [pc, #564]	; (800447c <_strtod_l+0x584>)
 8004246:	a81b      	add	r0, sp, #108	; 0x6c
 8004248:	f001 f828 	bl	800529c <__match>
 800424c:	2800      	cmp	r0, #0
 800424e:	f43f aeb0 	beq.w	8003fb2 <_strtod_l+0xba>
 8004252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004254:	498a      	ldr	r1, [pc, #552]	; (8004480 <_strtod_l+0x588>)
 8004256:	3b01      	subs	r3, #1
 8004258:	a81b      	add	r0, sp, #108	; 0x6c
 800425a:	931b      	str	r3, [sp, #108]	; 0x6c
 800425c:	f001 f81e 	bl	800529c <__match>
 8004260:	b910      	cbnz	r0, 8004268 <_strtod_l+0x370>
 8004262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004264:	3301      	adds	r3, #1
 8004266:	931b      	str	r3, [sp, #108]	; 0x6c
 8004268:	f04f 0800 	mov.w	r8, #0
 800426c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004490 <_strtod_l+0x598>
 8004270:	e683      	b.n	8003f7a <_strtod_l+0x82>
 8004272:	4884      	ldr	r0, [pc, #528]	; (8004484 <_strtod_l+0x58c>)
 8004274:	f002 f944 	bl	8006500 <nan>
 8004278:	4680      	mov	r8, r0
 800427a:	4689      	mov	r9, r1
 800427c:	e67d      	b.n	8003f7a <_strtod_l+0x82>
 800427e:	9b04      	ldr	r3, [sp, #16]
 8004280:	f1bb 0f00 	cmp.w	fp, #0
 8004284:	bf08      	it	eq
 8004286:	46a3      	moveq	fp, r4
 8004288:	1aeb      	subs	r3, r5, r3
 800428a:	2c10      	cmp	r4, #16
 800428c:	9806      	ldr	r0, [sp, #24]
 800428e:	4626      	mov	r6, r4
 8004290:	9307      	str	r3, [sp, #28]
 8004292:	bfa8      	it	ge
 8004294:	2610      	movge	r6, #16
 8004296:	f7fc f959 	bl	800054c <__aeabi_ui2d>
 800429a:	2c09      	cmp	r4, #9
 800429c:	4680      	mov	r8, r0
 800429e:	4689      	mov	r9, r1
 80042a0:	dd13      	ble.n	80042ca <_strtod_l+0x3d2>
 80042a2:	4b79      	ldr	r3, [pc, #484]	; (8004488 <_strtod_l+0x590>)
 80042a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042ac:	f7fc f9c8 	bl	8000640 <__aeabi_dmul>
 80042b0:	4680      	mov	r8, r0
 80042b2:	9805      	ldr	r0, [sp, #20]
 80042b4:	4689      	mov	r9, r1
 80042b6:	f7fc f949 	bl	800054c <__aeabi_ui2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4640      	mov	r0, r8
 80042c0:	4649      	mov	r1, r9
 80042c2:	f7fc f807 	bl	80002d4 <__adddf3>
 80042c6:	4680      	mov	r8, r0
 80042c8:	4689      	mov	r9, r1
 80042ca:	2c0f      	cmp	r4, #15
 80042cc:	dc36      	bgt.n	800433c <_strtod_l+0x444>
 80042ce:	9b07      	ldr	r3, [sp, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f43f ae52 	beq.w	8003f7a <_strtod_l+0x82>
 80042d6:	dd22      	ble.n	800431e <_strtod_l+0x426>
 80042d8:	2b16      	cmp	r3, #22
 80042da:	dc09      	bgt.n	80042f0 <_strtod_l+0x3f8>
 80042dc:	4c6a      	ldr	r4, [pc, #424]	; (8004488 <_strtod_l+0x590>)
 80042de:	4642      	mov	r2, r8
 80042e0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80042e4:	464b      	mov	r3, r9
 80042e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80042ea:	f7fc f9a9 	bl	8000640 <__aeabi_dmul>
 80042ee:	e7c3      	b.n	8004278 <_strtod_l+0x380>
 80042f0:	9a07      	ldr	r2, [sp, #28]
 80042f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80042f6:	4293      	cmp	r3, r2
 80042f8:	db20      	blt.n	800433c <_strtod_l+0x444>
 80042fa:	4d63      	ldr	r5, [pc, #396]	; (8004488 <_strtod_l+0x590>)
 80042fc:	f1c4 040f 	rsb	r4, r4, #15
 8004300:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004304:	4642      	mov	r2, r8
 8004306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800430a:	464b      	mov	r3, r9
 800430c:	f7fc f998 	bl	8000640 <__aeabi_dmul>
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	1b1c      	subs	r4, r3, r4
 8004314:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800431c:	e7e5      	b.n	80042ea <_strtod_l+0x3f2>
 800431e:	9b07      	ldr	r3, [sp, #28]
 8004320:	3316      	adds	r3, #22
 8004322:	db0b      	blt.n	800433c <_strtod_l+0x444>
 8004324:	9b04      	ldr	r3, [sp, #16]
 8004326:	4a58      	ldr	r2, [pc, #352]	; (8004488 <_strtod_l+0x590>)
 8004328:	1b5d      	subs	r5, r3, r5
 800432a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800432e:	4640      	mov	r0, r8
 8004330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004334:	4649      	mov	r1, r9
 8004336:	f7fc faad 	bl	8000894 <__aeabi_ddiv>
 800433a:	e79d      	b.n	8004278 <_strtod_l+0x380>
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	1ba6      	subs	r6, r4, r6
 8004340:	441e      	add	r6, r3
 8004342:	2e00      	cmp	r6, #0
 8004344:	dd71      	ble.n	800442a <_strtod_l+0x532>
 8004346:	f016 030f 	ands.w	r3, r6, #15
 800434a:	d00a      	beq.n	8004362 <_strtod_l+0x46a>
 800434c:	494e      	ldr	r1, [pc, #312]	; (8004488 <_strtod_l+0x590>)
 800434e:	4642      	mov	r2, r8
 8004350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004358:	464b      	mov	r3, r9
 800435a:	f7fc f971 	bl	8000640 <__aeabi_dmul>
 800435e:	4680      	mov	r8, r0
 8004360:	4689      	mov	r9, r1
 8004362:	f036 060f 	bics.w	r6, r6, #15
 8004366:	d050      	beq.n	800440a <_strtod_l+0x512>
 8004368:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800436c:	dd27      	ble.n	80043be <_strtod_l+0x4c6>
 800436e:	f04f 0b00 	mov.w	fp, #0
 8004372:	f8cd b010 	str.w	fp, [sp, #16]
 8004376:	f8cd b020 	str.w	fp, [sp, #32]
 800437a:	f8cd b018 	str.w	fp, [sp, #24]
 800437e:	2322      	movs	r3, #34	; 0x22
 8004380:	f04f 0800 	mov.w	r8, #0
 8004384:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004490 <_strtod_l+0x598>
 8004388:	f8ca 3000 	str.w	r3, [sl]
 800438c:	9b08      	ldr	r3, [sp, #32]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f43f adf3 	beq.w	8003f7a <_strtod_l+0x82>
 8004394:	4650      	mov	r0, sl
 8004396:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004398:	f001 f898 	bl	80054cc <_Bfree>
 800439c:	4650      	mov	r0, sl
 800439e:	9906      	ldr	r1, [sp, #24]
 80043a0:	f001 f894 	bl	80054cc <_Bfree>
 80043a4:	4650      	mov	r0, sl
 80043a6:	9904      	ldr	r1, [sp, #16]
 80043a8:	f001 f890 	bl	80054cc <_Bfree>
 80043ac:	4650      	mov	r0, sl
 80043ae:	9908      	ldr	r1, [sp, #32]
 80043b0:	f001 f88c 	bl	80054cc <_Bfree>
 80043b4:	4659      	mov	r1, fp
 80043b6:	4650      	mov	r0, sl
 80043b8:	f001 f888 	bl	80054cc <_Bfree>
 80043bc:	e5dd      	b.n	8003f7a <_strtod_l+0x82>
 80043be:	2300      	movs	r3, #0
 80043c0:	4640      	mov	r0, r8
 80043c2:	4649      	mov	r1, r9
 80043c4:	461f      	mov	r7, r3
 80043c6:	1136      	asrs	r6, r6, #4
 80043c8:	2e01      	cmp	r6, #1
 80043ca:	dc21      	bgt.n	8004410 <_strtod_l+0x518>
 80043cc:	b10b      	cbz	r3, 80043d2 <_strtod_l+0x4da>
 80043ce:	4680      	mov	r8, r0
 80043d0:	4689      	mov	r9, r1
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <_strtod_l+0x594>)
 80043d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80043d8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80043dc:	4642      	mov	r2, r8
 80043de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043e2:	464b      	mov	r3, r9
 80043e4:	f7fc f92c 	bl	8000640 <__aeabi_dmul>
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <_strtod_l+0x598>)
 80043ea:	460a      	mov	r2, r1
 80043ec:	400b      	ands	r3, r1
 80043ee:	4929      	ldr	r1, [pc, #164]	; (8004494 <_strtod_l+0x59c>)
 80043f0:	4680      	mov	r8, r0
 80043f2:	428b      	cmp	r3, r1
 80043f4:	d8bb      	bhi.n	800436e <_strtod_l+0x476>
 80043f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80043fa:	428b      	cmp	r3, r1
 80043fc:	bf86      	itte	hi
 80043fe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004402:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004498 <_strtod_l+0x5a0>
 8004406:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800440a:	2300      	movs	r3, #0
 800440c:	9305      	str	r3, [sp, #20]
 800440e:	e07e      	b.n	800450e <_strtod_l+0x616>
 8004410:	07f2      	lsls	r2, r6, #31
 8004412:	d507      	bpl.n	8004424 <_strtod_l+0x52c>
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <_strtod_l+0x594>)
 8004416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f90f 	bl	8000640 <__aeabi_dmul>
 8004422:	2301      	movs	r3, #1
 8004424:	3701      	adds	r7, #1
 8004426:	1076      	asrs	r6, r6, #1
 8004428:	e7ce      	b.n	80043c8 <_strtod_l+0x4d0>
 800442a:	d0ee      	beq.n	800440a <_strtod_l+0x512>
 800442c:	4276      	negs	r6, r6
 800442e:	f016 020f 	ands.w	r2, r6, #15
 8004432:	d00a      	beq.n	800444a <_strtod_l+0x552>
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <_strtod_l+0x590>)
 8004436:	4640      	mov	r0, r8
 8004438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800443c:	4649      	mov	r1, r9
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc fa27 	bl	8000894 <__aeabi_ddiv>
 8004446:	4680      	mov	r8, r0
 8004448:	4689      	mov	r9, r1
 800444a:	1136      	asrs	r6, r6, #4
 800444c:	d0dd      	beq.n	800440a <_strtod_l+0x512>
 800444e:	2e1f      	cmp	r6, #31
 8004450:	dd24      	ble.n	800449c <_strtod_l+0x5a4>
 8004452:	f04f 0b00 	mov.w	fp, #0
 8004456:	f8cd b010 	str.w	fp, [sp, #16]
 800445a:	f8cd b020 	str.w	fp, [sp, #32]
 800445e:	f8cd b018 	str.w	fp, [sp, #24]
 8004462:	2322      	movs	r3, #34	; 0x22
 8004464:	f04f 0800 	mov.w	r8, #0
 8004468:	f04f 0900 	mov.w	r9, #0
 800446c:	f8ca 3000 	str.w	r3, [sl]
 8004470:	e78c      	b.n	800438c <_strtod_l+0x494>
 8004472:	bf00      	nop
 8004474:	08006db1 	.word	0x08006db1
 8004478:	08006dc8 	.word	0x08006dc8
 800447c:	08006da8 	.word	0x08006da8
 8004480:	08006dab 	.word	0x08006dab
 8004484:	08006ebb 	.word	0x08006ebb
 8004488:	080070d8 	.word	0x080070d8
 800448c:	080070b0 	.word	0x080070b0
 8004490:	7ff00000 	.word	0x7ff00000
 8004494:	7ca00000 	.word	0x7ca00000
 8004498:	7fefffff 	.word	0x7fefffff
 800449c:	f016 0310 	ands.w	r3, r6, #16
 80044a0:	bf18      	it	ne
 80044a2:	236a      	movne	r3, #106	; 0x6a
 80044a4:	4640      	mov	r0, r8
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	4649      	mov	r1, r9
 80044aa:	2300      	movs	r3, #0
 80044ac:	4fb2      	ldr	r7, [pc, #712]	; (8004778 <_strtod_l+0x880>)
 80044ae:	07f2      	lsls	r2, r6, #31
 80044b0:	d504      	bpl.n	80044bc <_strtod_l+0x5c4>
 80044b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b6:	f7fc f8c3 	bl	8000640 <__aeabi_dmul>
 80044ba:	2301      	movs	r3, #1
 80044bc:	1076      	asrs	r6, r6, #1
 80044be:	f107 0708 	add.w	r7, r7, #8
 80044c2:	d1f4      	bne.n	80044ae <_strtod_l+0x5b6>
 80044c4:	b10b      	cbz	r3, 80044ca <_strtod_l+0x5d2>
 80044c6:	4680      	mov	r8, r0
 80044c8:	4689      	mov	r9, r1
 80044ca:	9b05      	ldr	r3, [sp, #20]
 80044cc:	b1bb      	cbz	r3, 80044fe <_strtod_l+0x606>
 80044ce:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80044d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	4649      	mov	r1, r9
 80044da:	dd10      	ble.n	80044fe <_strtod_l+0x606>
 80044dc:	2b1f      	cmp	r3, #31
 80044de:	f340 812b 	ble.w	8004738 <_strtod_l+0x840>
 80044e2:	2b34      	cmp	r3, #52	; 0x34
 80044e4:	bfd8      	it	le
 80044e6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80044ea:	f04f 0800 	mov.w	r8, #0
 80044ee:	bfcf      	iteee	gt
 80044f0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80044f4:	3b20      	suble	r3, #32
 80044f6:	fa02 f303 	lslle.w	r3, r2, r3
 80044fa:	ea03 0901 	andle.w	r9, r3, r1
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f7fc fb03 	bl	8000b10 <__aeabi_dcmpeq>
 800450a:	2800      	cmp	r0, #0
 800450c:	d1a1      	bne.n	8004452 <_strtod_l+0x55a>
 800450e:	9b06      	ldr	r3, [sp, #24]
 8004510:	465a      	mov	r2, fp
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4650      	mov	r0, sl
 8004516:	4623      	mov	r3, r4
 8004518:	9908      	ldr	r1, [sp, #32]
 800451a:	f001 f843 	bl	80055a4 <__s2b>
 800451e:	9008      	str	r0, [sp, #32]
 8004520:	2800      	cmp	r0, #0
 8004522:	f43f af24 	beq.w	800436e <_strtod_l+0x476>
 8004526:	9b04      	ldr	r3, [sp, #16]
 8004528:	f04f 0b00 	mov.w	fp, #0
 800452c:	1b5d      	subs	r5, r3, r5
 800452e:	9b07      	ldr	r3, [sp, #28]
 8004530:	f8cd b010 	str.w	fp, [sp, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	bfb4      	ite	lt
 8004538:	462b      	movlt	r3, r5
 800453a:	2300      	movge	r3, #0
 800453c:	930e      	str	r3, [sp, #56]	; 0x38
 800453e:	9b07      	ldr	r3, [sp, #28]
 8004540:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004544:	9316      	str	r3, [sp, #88]	; 0x58
 8004546:	9b08      	ldr	r3, [sp, #32]
 8004548:	4650      	mov	r0, sl
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	f000 ff7e 	bl	800544c <_Balloc>
 8004550:	9006      	str	r0, [sp, #24]
 8004552:	2800      	cmp	r0, #0
 8004554:	f43f af13 	beq.w	800437e <_strtod_l+0x486>
 8004558:	9b08      	ldr	r3, [sp, #32]
 800455a:	300c      	adds	r0, #12
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	f103 010c 	add.w	r1, r3, #12
 8004562:	3202      	adds	r2, #2
 8004564:	0092      	lsls	r2, r2, #2
 8004566:	f000 ff63 	bl	8005430 <memcpy>
 800456a:	ab1e      	add	r3, sp, #120	; 0x78
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	ab1d      	add	r3, sp, #116	; 0x74
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	4642      	mov	r2, r8
 8004574:	464b      	mov	r3, r9
 8004576:	4650      	mov	r0, sl
 8004578:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800457c:	f001 fb50 	bl	8005c20 <__d2b>
 8004580:	901c      	str	r0, [sp, #112]	; 0x70
 8004582:	2800      	cmp	r0, #0
 8004584:	f43f aefb 	beq.w	800437e <_strtod_l+0x486>
 8004588:	2101      	movs	r1, #1
 800458a:	4650      	mov	r0, sl
 800458c:	f001 f8a2 	bl	80056d4 <__i2b>
 8004590:	4603      	mov	r3, r0
 8004592:	9004      	str	r0, [sp, #16]
 8004594:	2800      	cmp	r0, #0
 8004596:	f43f aef2 	beq.w	800437e <_strtod_l+0x486>
 800459a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800459c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800459e:	2d00      	cmp	r5, #0
 80045a0:	bfab      	itete	ge
 80045a2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80045a4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80045a6:	18ee      	addge	r6, r5, r3
 80045a8:	1b5c      	sublt	r4, r3, r5
 80045aa:	9b05      	ldr	r3, [sp, #20]
 80045ac:	bfa8      	it	ge
 80045ae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80045b0:	eba5 0503 	sub.w	r5, r5, r3
 80045b4:	4415      	add	r5, r2
 80045b6:	4b71      	ldr	r3, [pc, #452]	; (800477c <_strtod_l+0x884>)
 80045b8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80045bc:	bfb8      	it	lt
 80045be:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80045c0:	429d      	cmp	r5, r3
 80045c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045c6:	f280 80c9 	bge.w	800475c <_strtod_l+0x864>
 80045ca:	1b5b      	subs	r3, r3, r5
 80045cc:	2b1f      	cmp	r3, #31
 80045ce:	f04f 0701 	mov.w	r7, #1
 80045d2:	eba2 0203 	sub.w	r2, r2, r3
 80045d6:	f300 80b6 	bgt.w	8004746 <_strtod_l+0x84e>
 80045da:	2500      	movs	r5, #0
 80045dc:	fa07 f303 	lsl.w	r3, r7, r3
 80045e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80045e2:	18b7      	adds	r7, r6, r2
 80045e4:	9b05      	ldr	r3, [sp, #20]
 80045e6:	42be      	cmp	r6, r7
 80045e8:	4414      	add	r4, r2
 80045ea:	441c      	add	r4, r3
 80045ec:	4633      	mov	r3, r6
 80045ee:	bfa8      	it	ge
 80045f0:	463b      	movge	r3, r7
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	bfa8      	it	ge
 80045f6:	4623      	movge	r3, r4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfc2      	ittt	gt
 80045fc:	1aff      	subgt	r7, r7, r3
 80045fe:	1ae4      	subgt	r4, r4, r3
 8004600:	1af6      	subgt	r6, r6, r3
 8004602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	dd17      	ble.n	8004638 <_strtod_l+0x740>
 8004608:	461a      	mov	r2, r3
 800460a:	4650      	mov	r0, sl
 800460c:	9904      	ldr	r1, [sp, #16]
 800460e:	f001 f91b 	bl	8005848 <__pow5mult>
 8004612:	9004      	str	r0, [sp, #16]
 8004614:	2800      	cmp	r0, #0
 8004616:	f43f aeb2 	beq.w	800437e <_strtod_l+0x486>
 800461a:	4601      	mov	r1, r0
 800461c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800461e:	4650      	mov	r0, sl
 8004620:	f001 f86e 	bl	8005700 <__multiply>
 8004624:	9009      	str	r0, [sp, #36]	; 0x24
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f aea9 	beq.w	800437e <_strtod_l+0x486>
 800462c:	4650      	mov	r0, sl
 800462e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004630:	f000 ff4c 	bl	80054cc <_Bfree>
 8004634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004636:	931c      	str	r3, [sp, #112]	; 0x70
 8004638:	2f00      	cmp	r7, #0
 800463a:	f300 8093 	bgt.w	8004764 <_strtod_l+0x86c>
 800463e:	9b07      	ldr	r3, [sp, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	dd08      	ble.n	8004656 <_strtod_l+0x75e>
 8004644:	4650      	mov	r0, sl
 8004646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004648:	9906      	ldr	r1, [sp, #24]
 800464a:	f001 f8fd 	bl	8005848 <__pow5mult>
 800464e:	9006      	str	r0, [sp, #24]
 8004650:	2800      	cmp	r0, #0
 8004652:	f43f ae94 	beq.w	800437e <_strtod_l+0x486>
 8004656:	2c00      	cmp	r4, #0
 8004658:	dd08      	ble.n	800466c <_strtod_l+0x774>
 800465a:	4622      	mov	r2, r4
 800465c:	4650      	mov	r0, sl
 800465e:	9906      	ldr	r1, [sp, #24]
 8004660:	f001 f94c 	bl	80058fc <__lshift>
 8004664:	9006      	str	r0, [sp, #24]
 8004666:	2800      	cmp	r0, #0
 8004668:	f43f ae89 	beq.w	800437e <_strtod_l+0x486>
 800466c:	2e00      	cmp	r6, #0
 800466e:	dd08      	ble.n	8004682 <_strtod_l+0x78a>
 8004670:	4632      	mov	r2, r6
 8004672:	4650      	mov	r0, sl
 8004674:	9904      	ldr	r1, [sp, #16]
 8004676:	f001 f941 	bl	80058fc <__lshift>
 800467a:	9004      	str	r0, [sp, #16]
 800467c:	2800      	cmp	r0, #0
 800467e:	f43f ae7e 	beq.w	800437e <_strtod_l+0x486>
 8004682:	4650      	mov	r0, sl
 8004684:	9a06      	ldr	r2, [sp, #24]
 8004686:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004688:	f001 f9c0 	bl	8005a0c <__mdiff>
 800468c:	4683      	mov	fp, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	f43f ae75 	beq.w	800437e <_strtod_l+0x486>
 8004694:	2400      	movs	r4, #0
 8004696:	68c3      	ldr	r3, [r0, #12]
 8004698:	9904      	ldr	r1, [sp, #16]
 800469a:	60c4      	str	r4, [r0, #12]
 800469c:	930d      	str	r3, [sp, #52]	; 0x34
 800469e:	f001 f999 	bl	80059d4 <__mcmp>
 80046a2:	42a0      	cmp	r0, r4
 80046a4:	da70      	bge.n	8004788 <_strtod_l+0x890>
 80046a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a8:	ea53 0308 	orrs.w	r3, r3, r8
 80046ac:	f040 8096 	bne.w	80047dc <_strtod_l+0x8e4>
 80046b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8091 	bne.w	80047dc <_strtod_l+0x8e4>
 80046ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046be:	0d1b      	lsrs	r3, r3, #20
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046c6:	f240 8089 	bls.w	80047dc <_strtod_l+0x8e4>
 80046ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 80046ce:	b923      	cbnz	r3, 80046da <_strtod_l+0x7e2>
 80046d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f340 8081 	ble.w	80047dc <_strtod_l+0x8e4>
 80046da:	4659      	mov	r1, fp
 80046dc:	2201      	movs	r2, #1
 80046de:	4650      	mov	r0, sl
 80046e0:	f001 f90c 	bl	80058fc <__lshift>
 80046e4:	9904      	ldr	r1, [sp, #16]
 80046e6:	4683      	mov	fp, r0
 80046e8:	f001 f974 	bl	80059d4 <__mcmp>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	dd75      	ble.n	80047dc <_strtod_l+0x8e4>
 80046f0:	9905      	ldr	r1, [sp, #20]
 80046f2:	464b      	mov	r3, r9
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <_strtod_l+0x888>)
 80046f6:	2900      	cmp	r1, #0
 80046f8:	f000 8091 	beq.w	800481e <_strtod_l+0x926>
 80046fc:	ea02 0109 	and.w	r1, r2, r9
 8004700:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004704:	f300 808b 	bgt.w	800481e <_strtod_l+0x926>
 8004708:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800470c:	f77f aea9 	ble.w	8004462 <_strtod_l+0x56a>
 8004710:	2300      	movs	r3, #0
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <_strtod_l+0x88c>)
 8004714:	4640      	mov	r0, r8
 8004716:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800471a:	4649      	mov	r1, r9
 800471c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004720:	f7fb ff8e 	bl	8000640 <__aeabi_dmul>
 8004724:	460b      	mov	r3, r1
 8004726:	4303      	orrs	r3, r0
 8004728:	bf08      	it	eq
 800472a:	2322      	moveq	r3, #34	; 0x22
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	bf08      	it	eq
 8004732:	f8ca 3000 	streq.w	r3, [sl]
 8004736:	e62d      	b.n	8004394 <_strtod_l+0x49c>
 8004738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	ea03 0808 	and.w	r8, r3, r8
 8004744:	e6db      	b.n	80044fe <_strtod_l+0x606>
 8004746:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800474a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800474e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004752:	35e2      	adds	r5, #226	; 0xe2
 8004754:	fa07 f505 	lsl.w	r5, r7, r5
 8004758:	970f      	str	r7, [sp, #60]	; 0x3c
 800475a:	e742      	b.n	80045e2 <_strtod_l+0x6ea>
 800475c:	2301      	movs	r3, #1
 800475e:	2500      	movs	r5, #0
 8004760:	930f      	str	r3, [sp, #60]	; 0x3c
 8004762:	e73e      	b.n	80045e2 <_strtod_l+0x6ea>
 8004764:	463a      	mov	r2, r7
 8004766:	4650      	mov	r0, sl
 8004768:	991c      	ldr	r1, [sp, #112]	; 0x70
 800476a:	f001 f8c7 	bl	80058fc <__lshift>
 800476e:	901c      	str	r0, [sp, #112]	; 0x70
 8004770:	2800      	cmp	r0, #0
 8004772:	f47f af64 	bne.w	800463e <_strtod_l+0x746>
 8004776:	e602      	b.n	800437e <_strtod_l+0x486>
 8004778:	08006de0 	.word	0x08006de0
 800477c:	fffffc02 	.word	0xfffffc02
 8004780:	7ff00000 	.word	0x7ff00000
 8004784:	39500000 	.word	0x39500000
 8004788:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800478c:	d166      	bne.n	800485c <_strtod_l+0x964>
 800478e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004794:	b35a      	cbz	r2, 80047ee <_strtod_l+0x8f6>
 8004796:	4a9c      	ldr	r2, [pc, #624]	; (8004a08 <_strtod_l+0xb10>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d12c      	bne.n	80047f6 <_strtod_l+0x8fe>
 800479c:	9b05      	ldr	r3, [sp, #20]
 800479e:	4640      	mov	r0, r8
 80047a0:	b303      	cbz	r3, 80047e4 <_strtod_l+0x8ec>
 80047a2:	464b      	mov	r3, r9
 80047a4:	4a99      	ldr	r2, [pc, #612]	; (8004a0c <_strtod_l+0xb14>)
 80047a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047aa:	401a      	ands	r2, r3
 80047ac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80047b0:	d81b      	bhi.n	80047ea <_strtod_l+0x8f2>
 80047b2:	0d12      	lsrs	r2, r2, #20
 80047b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	4298      	cmp	r0, r3
 80047be:	d11a      	bne.n	80047f6 <_strtod_l+0x8fe>
 80047c0:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <_strtod_l+0xb18>)
 80047c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d102      	bne.n	80047ce <_strtod_l+0x8d6>
 80047c8:	3001      	adds	r0, #1
 80047ca:	f43f add8 	beq.w	800437e <_strtod_l+0x486>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	4b8e      	ldr	r3, [pc, #568]	; (8004a0c <_strtod_l+0xb14>)
 80047d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047d6:	401a      	ands	r2, r3
 80047d8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80047dc:	9b05      	ldr	r3, [sp, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d196      	bne.n	8004710 <_strtod_l+0x818>
 80047e2:	e5d7      	b.n	8004394 <_strtod_l+0x49c>
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	e7e8      	b.n	80047bc <_strtod_l+0x8c4>
 80047ea:	460b      	mov	r3, r1
 80047ec:	e7e6      	b.n	80047bc <_strtod_l+0x8c4>
 80047ee:	ea53 0308 	orrs.w	r3, r3, r8
 80047f2:	f43f af7d 	beq.w	80046f0 <_strtod_l+0x7f8>
 80047f6:	b1e5      	cbz	r5, 8004832 <_strtod_l+0x93a>
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	421d      	tst	r5, r3
 80047fc:	d0ee      	beq.n	80047dc <_strtod_l+0x8e4>
 80047fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	9a05      	ldr	r2, [sp, #20]
 8004806:	b1c3      	cbz	r3, 800483a <_strtod_l+0x942>
 8004808:	f7ff fb52 	bl	8003eb0 <sulp>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004814:	f7fb fd5e 	bl	80002d4 <__adddf3>
 8004818:	4680      	mov	r8, r0
 800481a:	4689      	mov	r9, r1
 800481c:	e7de      	b.n	80047dc <_strtod_l+0x8e4>
 800481e:	4013      	ands	r3, r2
 8004820:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004824:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004828:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800482c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004830:	e7d4      	b.n	80047dc <_strtod_l+0x8e4>
 8004832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004834:	ea13 0f08 	tst.w	r3, r8
 8004838:	e7e0      	b.n	80047fc <_strtod_l+0x904>
 800483a:	f7ff fb39 	bl	8003eb0 <sulp>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004846:	f7fb fd43 	bl	80002d0 <__aeabi_dsub>
 800484a:	2200      	movs	r2, #0
 800484c:	2300      	movs	r3, #0
 800484e:	4680      	mov	r8, r0
 8004850:	4689      	mov	r9, r1
 8004852:	f7fc f95d 	bl	8000b10 <__aeabi_dcmpeq>
 8004856:	2800      	cmp	r0, #0
 8004858:	d0c0      	beq.n	80047dc <_strtod_l+0x8e4>
 800485a:	e602      	b.n	8004462 <_strtod_l+0x56a>
 800485c:	4658      	mov	r0, fp
 800485e:	9904      	ldr	r1, [sp, #16]
 8004860:	f001 fa3a 	bl	8005cd8 <__ratio>
 8004864:	2200      	movs	r2, #0
 8004866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	f7fc f963 	bl	8000b38 <__aeabi_dcmple>
 8004872:	2800      	cmp	r0, #0
 8004874:	d075      	beq.n	8004962 <_strtod_l+0xa6a>
 8004876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d047      	beq.n	800490c <_strtod_l+0xa14>
 800487c:	2600      	movs	r6, #0
 800487e:	4f65      	ldr	r7, [pc, #404]	; (8004a14 <_strtod_l+0xb1c>)
 8004880:	4d64      	ldr	r5, [pc, #400]	; (8004a14 <_strtod_l+0xb1c>)
 8004882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004888:	0d1b      	lsrs	r3, r3, #20
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	930f      	str	r3, [sp, #60]	; 0x3c
 800488e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <_strtod_l+0xb20>)
 8004892:	429a      	cmp	r2, r3
 8004894:	f040 80c8 	bne.w	8004a28 <_strtod_l+0xb30>
 8004898:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800489c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	4640      	mov	r0, r8
 80048a4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80048a8:	4649      	mov	r1, r9
 80048aa:	f001 f93f 	bl	8005b2c <__ulp>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb fec3 	bl	8000640 <__aeabi_dmul>
 80048ba:	4642      	mov	r2, r8
 80048bc:	464b      	mov	r3, r9
 80048be:	f7fb fd09 	bl	80002d4 <__adddf3>
 80048c2:	460b      	mov	r3, r1
 80048c4:	4951      	ldr	r1, [pc, #324]	; (8004a0c <_strtod_l+0xb14>)
 80048c6:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <_strtod_l+0xb24>)
 80048c8:	4019      	ands	r1, r3
 80048ca:	4291      	cmp	r1, r2
 80048cc:	4680      	mov	r8, r0
 80048ce:	d95e      	bls.n	800498e <_strtod_l+0xa96>
 80048d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d103      	bne.n	80048e2 <_strtod_l+0x9ea>
 80048da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048dc:	3301      	adds	r3, #1
 80048de:	f43f ad4e 	beq.w	800437e <_strtod_l+0x486>
 80048e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80048e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004a10 <_strtod_l+0xb18>
 80048ea:	4650      	mov	r0, sl
 80048ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80048ee:	f000 fded 	bl	80054cc <_Bfree>
 80048f2:	4650      	mov	r0, sl
 80048f4:	9906      	ldr	r1, [sp, #24]
 80048f6:	f000 fde9 	bl	80054cc <_Bfree>
 80048fa:	4650      	mov	r0, sl
 80048fc:	9904      	ldr	r1, [sp, #16]
 80048fe:	f000 fde5 	bl	80054cc <_Bfree>
 8004902:	4659      	mov	r1, fp
 8004904:	4650      	mov	r0, sl
 8004906:	f000 fde1 	bl	80054cc <_Bfree>
 800490a:	e61c      	b.n	8004546 <_strtod_l+0x64e>
 800490c:	f1b8 0f00 	cmp.w	r8, #0
 8004910:	d119      	bne.n	8004946 <_strtod_l+0xa4e>
 8004912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004918:	b9e3      	cbnz	r3, 8004954 <_strtod_l+0xa5c>
 800491a:	2200      	movs	r2, #0
 800491c:	4630      	mov	r0, r6
 800491e:	4639      	mov	r1, r7
 8004920:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <_strtod_l+0xb1c>)
 8004922:	f7fc f8ff 	bl	8000b24 <__aeabi_dcmplt>
 8004926:	b9c8      	cbnz	r0, 800495c <_strtod_l+0xa64>
 8004928:	2200      	movs	r2, #0
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <_strtod_l+0xb28>)
 8004930:	f7fb fe86 	bl	8000640 <__aeabi_dmul>
 8004934:	4604      	mov	r4, r0
 8004936:	460d      	mov	r5, r1
 8004938:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800493c:	9418      	str	r4, [sp, #96]	; 0x60
 800493e:	9319      	str	r3, [sp, #100]	; 0x64
 8004940:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004944:	e79d      	b.n	8004882 <_strtod_l+0x98a>
 8004946:	f1b8 0f01 	cmp.w	r8, #1
 800494a:	d103      	bne.n	8004954 <_strtod_l+0xa5c>
 800494c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	f43f ad87 	beq.w	8004462 <_strtod_l+0x56a>
 8004954:	2600      	movs	r6, #0
 8004956:	2400      	movs	r4, #0
 8004958:	4f32      	ldr	r7, [pc, #200]	; (8004a24 <_strtod_l+0xb2c>)
 800495a:	e791      	b.n	8004880 <_strtod_l+0x988>
 800495c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800495e:	4d30      	ldr	r5, [pc, #192]	; (8004a20 <_strtod_l+0xb28>)
 8004960:	e7ea      	b.n	8004938 <_strtod_l+0xa40>
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <_strtod_l+0xb28>)
 8004964:	2200      	movs	r2, #0
 8004966:	4630      	mov	r0, r6
 8004968:	4639      	mov	r1, r7
 800496a:	f7fb fe69 	bl	8000640 <__aeabi_dmul>
 800496e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	b933      	cbnz	r3, 8004984 <_strtod_l+0xa8c>
 8004976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800497a:	9010      	str	r0, [sp, #64]	; 0x40
 800497c:	9311      	str	r3, [sp, #68]	; 0x44
 800497e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004982:	e77e      	b.n	8004882 <_strtod_l+0x98a>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800498c:	e7f7      	b.n	800497e <_strtod_l+0xa86>
 800498e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004992:	9b05      	ldr	r3, [sp, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1a8      	bne.n	80048ea <_strtod_l+0x9f2>
 8004998:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800499c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800499e:	0d1b      	lsrs	r3, r3, #20
 80049a0:	051b      	lsls	r3, r3, #20
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d1a1      	bne.n	80048ea <_strtod_l+0x9f2>
 80049a6:	4620      	mov	r0, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	f7fc f979 	bl	8000ca0 <__aeabi_d2lz>
 80049ae:	f7fb fe19 	bl	80005e4 <__aeabi_l2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb fc89 	bl	80002d0 <__aeabi_dsub>
 80049be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049c4:	ea43 0308 	orr.w	r3, r3, r8
 80049c8:	4313      	orrs	r3, r2
 80049ca:	4604      	mov	r4, r0
 80049cc:	460d      	mov	r5, r1
 80049ce:	d066      	beq.n	8004a9e <_strtod_l+0xba6>
 80049d0:	a309      	add	r3, pc, #36	; (adr r3, 80049f8 <_strtod_l+0xb00>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fc f8a5 	bl	8000b24 <__aeabi_dcmplt>
 80049da:	2800      	cmp	r0, #0
 80049dc:	f47f acda 	bne.w	8004394 <_strtod_l+0x49c>
 80049e0:	a307      	add	r3, pc, #28	; (adr r3, 8004a00 <_strtod_l+0xb08>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fc f8b9 	bl	8000b60 <__aeabi_dcmpgt>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f43f af7b 	beq.w	80048ea <_strtod_l+0x9f2>
 80049f4:	e4ce      	b.n	8004394 <_strtod_l+0x49c>
 80049f6:	bf00      	nop
 80049f8:	94a03595 	.word	0x94a03595
 80049fc:	3fdfffff 	.word	0x3fdfffff
 8004a00:	35afe535 	.word	0x35afe535
 8004a04:	3fe00000 	.word	0x3fe00000
 8004a08:	000fffff 	.word	0x000fffff
 8004a0c:	7ff00000 	.word	0x7ff00000
 8004a10:	7fefffff 	.word	0x7fefffff
 8004a14:	3ff00000 	.word	0x3ff00000
 8004a18:	7fe00000 	.word	0x7fe00000
 8004a1c:	7c9fffff 	.word	0x7c9fffff
 8004a20:	3fe00000 	.word	0x3fe00000
 8004a24:	bff00000 	.word	0xbff00000
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	b313      	cbz	r3, 8004a72 <_strtod_l+0xb7a>
 8004a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a32:	d81e      	bhi.n	8004a72 <_strtod_l+0xb7a>
 8004a34:	a326      	add	r3, pc, #152	; (adr r3, 8004ad0 <_strtod_l+0xbd8>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	f7fc f87b 	bl	8000b38 <__aeabi_dcmple>
 8004a42:	b190      	cbz	r0, 8004a6a <_strtod_l+0xb72>
 8004a44:	4629      	mov	r1, r5
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7fc f894 	bl	8000b74 <__aeabi_d2uiz>
 8004a4c:	2801      	cmp	r0, #1
 8004a4e:	bf38      	it	cc
 8004a50:	2001      	movcc	r0, #1
 8004a52:	f7fb fd7b 	bl	800054c <__aeabi_ui2d>
 8004a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	b9d3      	cbnz	r3, 8004a94 <_strtod_l+0xb9c>
 8004a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a62:	9012      	str	r0, [sp, #72]	; 0x48
 8004a64:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a66:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a6c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a70:	1a9f      	subs	r7, r3, r2
 8004a72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a76:	f001 f859 	bl	8005b2c <__ulp>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4630      	mov	r0, r6
 8004a80:	4639      	mov	r1, r7
 8004a82:	f7fb fddd 	bl	8000640 <__aeabi_dmul>
 8004a86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a8a:	f7fb fc23 	bl	80002d4 <__adddf3>
 8004a8e:	4680      	mov	r8, r0
 8004a90:	4689      	mov	r9, r1
 8004a92:	e77e      	b.n	8004992 <_strtod_l+0xa9a>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a9c:	e7e3      	b.n	8004a66 <_strtod_l+0xb6e>
 8004a9e:	a30e      	add	r3, pc, #56	; (adr r3, 8004ad8 <_strtod_l+0xbe0>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f7fc f83e 	bl	8000b24 <__aeabi_dcmplt>
 8004aa8:	e7a1      	b.n	80049ee <_strtod_l+0xaf6>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	930c      	str	r3, [sp, #48]	; 0x30
 8004aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ab0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	f7ff ba65 	b.w	8003f82 <_strtod_l+0x8a>
 8004ab8:	2b65      	cmp	r3, #101	; 0x65
 8004aba:	f43f ab5c 	beq.w	8004176 <_strtod_l+0x27e>
 8004abe:	2b45      	cmp	r3, #69	; 0x45
 8004ac0:	f43f ab59 	beq.w	8004176 <_strtod_l+0x27e>
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f7ff bb8d 	b.w	80041e4 <_strtod_l+0x2ec>
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	ffc00000 	.word	0xffc00000
 8004ad4:	41dfffff 	.word	0x41dfffff
 8004ad8:	94a03595 	.word	0x94a03595
 8004adc:	3fcfffff 	.word	0x3fcfffff

08004ae0 <strtod>:
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <strtod+0x10>)
 8004ae6:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <strtod+0x14>)
 8004ae8:	6800      	ldr	r0, [r0, #0]
 8004aea:	f7ff ba05 	b.w	8003ef8 <_strtod_l>
 8004aee:	bf00      	nop
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	20000074 	.word	0x20000074

08004af8 <strtok>:
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <strtok+0x5c>)
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	681f      	ldr	r7, [r3, #0]
 8004b00:	4605      	mov	r5, r0
 8004b02:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004b04:	460e      	mov	r6, r1
 8004b06:	b9ec      	cbnz	r4, 8004b44 <strtok+0x4c>
 8004b08:	2050      	movs	r0, #80	; 0x50
 8004b0a:	f000 fc77 	bl	80053fc <malloc>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	65b8      	str	r0, [r7, #88]	; 0x58
 8004b12:	b920      	cbnz	r0, 8004b1e <strtok+0x26>
 8004b14:	2157      	movs	r1, #87	; 0x57
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <strtok+0x60>)
 8004b18:	4810      	ldr	r0, [pc, #64]	; (8004b5c <strtok+0x64>)
 8004b1a:	f000 f8d9 	bl	8004cd0 <__assert_func>
 8004b1e:	e9c0 4400 	strd	r4, r4, [r0]
 8004b22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b3e:	6184      	str	r4, [r0, #24]
 8004b40:	7704      	strb	r4, [r0, #28]
 8004b42:	6244      	str	r4, [r0, #36]	; 0x24
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b50:	f000 b806 	b.w	8004b60 <__strtok_r>
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	08006e08 	.word	0x08006e08
 8004b5c:	08006e1f 	.word	0x08006e1f

08004b60 <__strtok_r>:
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	b908      	cbnz	r0, 8004b68 <__strtok_r+0x8>
 8004b64:	6810      	ldr	r0, [r2, #0]
 8004b66:	b188      	cbz	r0, 8004b8c <__strtok_r+0x2c>
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460f      	mov	r7, r1
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b72:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b76:	b91e      	cbnz	r6, 8004b80 <__strtok_r+0x20>
 8004b78:	b965      	cbnz	r5, 8004b94 <__strtok_r+0x34>
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	6015      	str	r5, [r2, #0]
 8004b7e:	e005      	b.n	8004b8c <__strtok_r+0x2c>
 8004b80:	42b5      	cmp	r5, r6
 8004b82:	d1f6      	bne.n	8004b72 <__strtok_r+0x12>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <__strtok_r+0xa>
 8004b88:	6014      	str	r4, [r2, #0]
 8004b8a:	7003      	strb	r3, [r0, #0]
 8004b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8e:	461c      	mov	r4, r3
 8004b90:	e00c      	b.n	8004bac <__strtok_r+0x4c>
 8004b92:	b915      	cbnz	r5, 8004b9a <__strtok_r+0x3a>
 8004b94:	460e      	mov	r6, r1
 8004b96:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b9e:	42ab      	cmp	r3, r5
 8004ba0:	d1f7      	bne.n	8004b92 <__strtok_r+0x32>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f3      	beq.n	8004b8e <__strtok_r+0x2e>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004bac:	6014      	str	r4, [r2, #0]
 8004bae:	e7ed      	b.n	8004b8c <__strtok_r+0x2c>

08004bb0 <_strtol_l.isra.0>:
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb6:	4686      	mov	lr, r0
 8004bb8:	d001      	beq.n	8004bbe <_strtol_l.isra.0+0xe>
 8004bba:	2b24      	cmp	r3, #36	; 0x24
 8004bbc:	d906      	bls.n	8004bcc <_strtol_l.isra.0+0x1c>
 8004bbe:	f7ff f945 	bl	8003e4c <__errno>
 8004bc2:	2316      	movs	r3, #22
 8004bc4:	6003      	str	r3, [r0, #0]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	468c      	mov	ip, r1
 8004bce:	4e3a      	ldr	r6, [pc, #232]	; (8004cb8 <_strtol_l.isra.0+0x108>)
 8004bd0:	4660      	mov	r0, ip
 8004bd2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004bd6:	5da5      	ldrb	r5, [r4, r6]
 8004bd8:	f015 0508 	ands.w	r5, r5, #8
 8004bdc:	d1f8      	bne.n	8004bd0 <_strtol_l.isra.0+0x20>
 8004bde:	2c2d      	cmp	r4, #45	; 0x2d
 8004be0:	d133      	bne.n	8004c4a <_strtol_l.isra.0+0x9a>
 8004be2:	f04f 0801 	mov.w	r8, #1
 8004be6:	f89c 4000 	ldrb.w	r4, [ip]
 8004bea:	f100 0c02 	add.w	ip, r0, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d05d      	beq.n	8004cae <_strtol_l.isra.0+0xfe>
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d10c      	bne.n	8004c10 <_strtol_l.isra.0+0x60>
 8004bf6:	2c30      	cmp	r4, #48	; 0x30
 8004bf8:	d10a      	bne.n	8004c10 <_strtol_l.isra.0+0x60>
 8004bfa:	f89c 0000 	ldrb.w	r0, [ip]
 8004bfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c02:	2858      	cmp	r0, #88	; 0x58
 8004c04:	d14e      	bne.n	8004ca4 <_strtol_l.isra.0+0xf4>
 8004c06:	2310      	movs	r3, #16
 8004c08:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004c0c:	f10c 0c02 	add.w	ip, ip, #2
 8004c10:	2500      	movs	r5, #0
 8004c12:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004c16:	3f01      	subs	r7, #1
 8004c18:	fbb7 f9f3 	udiv	r9, r7, r3
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	fb03 7a19 	mls	sl, r3, r9, r7
 8004c22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004c26:	2e09      	cmp	r6, #9
 8004c28:	d818      	bhi.n	8004c5c <_strtol_l.isra.0+0xac>
 8004c2a:	4634      	mov	r4, r6
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	dd24      	ble.n	8004c7a <_strtol_l.isra.0+0xca>
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	db1f      	blt.n	8004c74 <_strtol_l.isra.0+0xc4>
 8004c34:	4581      	cmp	r9, r0
 8004c36:	d31d      	bcc.n	8004c74 <_strtol_l.isra.0+0xc4>
 8004c38:	d101      	bne.n	8004c3e <_strtol_l.isra.0+0x8e>
 8004c3a:	45a2      	cmp	sl, r4
 8004c3c:	db1a      	blt.n	8004c74 <_strtol_l.isra.0+0xc4>
 8004c3e:	2501      	movs	r5, #1
 8004c40:	fb00 4003 	mla	r0, r0, r3, r4
 8004c44:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c48:	e7eb      	b.n	8004c22 <_strtol_l.isra.0+0x72>
 8004c4a:	2c2b      	cmp	r4, #43	; 0x2b
 8004c4c:	bf08      	it	eq
 8004c4e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004c52:	46a8      	mov	r8, r5
 8004c54:	bf08      	it	eq
 8004c56:	f100 0c02 	addeq.w	ip, r0, #2
 8004c5a:	e7c8      	b.n	8004bee <_strtol_l.isra.0+0x3e>
 8004c5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004c60:	2e19      	cmp	r6, #25
 8004c62:	d801      	bhi.n	8004c68 <_strtol_l.isra.0+0xb8>
 8004c64:	3c37      	subs	r4, #55	; 0x37
 8004c66:	e7e1      	b.n	8004c2c <_strtol_l.isra.0+0x7c>
 8004c68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004c6c:	2e19      	cmp	r6, #25
 8004c6e:	d804      	bhi.n	8004c7a <_strtol_l.isra.0+0xca>
 8004c70:	3c57      	subs	r4, #87	; 0x57
 8004c72:	e7db      	b.n	8004c2c <_strtol_l.isra.0+0x7c>
 8004c74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c78:	e7e4      	b.n	8004c44 <_strtol_l.isra.0+0x94>
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	da08      	bge.n	8004c90 <_strtol_l.isra.0+0xe0>
 8004c7e:	2322      	movs	r3, #34	; 0x22
 8004c80:	4638      	mov	r0, r7
 8004c82:	f8ce 3000 	str.w	r3, [lr]
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d09e      	beq.n	8004bc8 <_strtol_l.isra.0+0x18>
 8004c8a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8004c8e:	e007      	b.n	8004ca0 <_strtol_l.isra.0+0xf0>
 8004c90:	f1b8 0f00 	cmp.w	r8, #0
 8004c94:	d000      	beq.n	8004c98 <_strtol_l.isra.0+0xe8>
 8004c96:	4240      	negs	r0, r0
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	d095      	beq.n	8004bc8 <_strtol_l.isra.0+0x18>
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	d1f4      	bne.n	8004c8a <_strtol_l.isra.0+0xda>
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	e791      	b.n	8004bc8 <_strtol_l.isra.0+0x18>
 8004ca4:	2430      	movs	r4, #48	; 0x30
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1b2      	bne.n	8004c10 <_strtol_l.isra.0+0x60>
 8004caa:	2308      	movs	r3, #8
 8004cac:	e7b0      	b.n	8004c10 <_strtol_l.isra.0+0x60>
 8004cae:	2c30      	cmp	r4, #48	; 0x30
 8004cb0:	d0a3      	beq.n	8004bfa <_strtol_l.isra.0+0x4a>
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	e7ac      	b.n	8004c10 <_strtol_l.isra.0+0x60>
 8004cb6:	bf00      	nop
 8004cb8:	08006ebd 	.word	0x08006ebd

08004cbc <strtol>:
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	4802      	ldr	r0, [pc, #8]	; (8004ccc <strtol+0x10>)
 8004cc4:	6800      	ldr	r0, [r0, #0]
 8004cc6:	f7ff bf73 	b.w	8004bb0 <_strtol_l.isra.0>
 8004cca:	bf00      	nop
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <__assert_func>:
 8004cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <__assert_func+0x2c>)
 8004cd8:	4605      	mov	r5, r0
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68d8      	ldr	r0, [r3, #12]
 8004cde:	b14c      	cbz	r4, 8004cf4 <__assert_func+0x24>
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <__assert_func+0x30>)
 8004ce2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ce6:	9100      	str	r1, [sp, #0]
 8004ce8:	462b      	mov	r3, r5
 8004cea:	4906      	ldr	r1, [pc, #24]	; (8004d04 <__assert_func+0x34>)
 8004cec:	f000 f80e 	bl	8004d0c <fiprintf>
 8004cf0:	f001 fcfc 	bl	80066ec <abort>
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <__assert_func+0x38>)
 8004cf6:	461c      	mov	r4, r3
 8004cf8:	e7f3      	b.n	8004ce2 <__assert_func+0x12>
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c
 8004d00:	08006e80 	.word	0x08006e80
 8004d04:	08006e8d 	.word	0x08006e8d
 8004d08:	08006ebb 	.word	0x08006ebb

08004d0c <fiprintf>:
 8004d0c:	b40e      	push	{r1, r2, r3}
 8004d0e:	b503      	push	{r0, r1, lr}
 8004d10:	4601      	mov	r1, r0
 8004d12:	ab03      	add	r3, sp, #12
 8004d14:	4805      	ldr	r0, [pc, #20]	; (8004d2c <fiprintf+0x20>)
 8004d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	f001 f929 	bl	8005f74 <_vfiprintf_r>
 8004d22:	b002      	add	sp, #8
 8004d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d28:	b003      	add	sp, #12
 8004d2a:	4770      	bx	lr
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <rshift>:
 8004d30:	6903      	ldr	r3, [r0, #16]
 8004d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004d3a:	f100 0414 	add.w	r4, r0, #20
 8004d3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d42:	dd46      	ble.n	8004dd2 <rshift+0xa2>
 8004d44:	f011 011f 	ands.w	r1, r1, #31
 8004d48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d50:	d10c      	bne.n	8004d6c <rshift+0x3c>
 8004d52:	4629      	mov	r1, r5
 8004d54:	f100 0710 	add.w	r7, r0, #16
 8004d58:	42b1      	cmp	r1, r6
 8004d5a:	d335      	bcc.n	8004dc8 <rshift+0x98>
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	1eea      	subs	r2, r5, #3
 8004d62:	4296      	cmp	r6, r2
 8004d64:	bf38      	it	cc
 8004d66:	2300      	movcc	r3, #0
 8004d68:	4423      	add	r3, r4
 8004d6a:	e015      	b.n	8004d98 <rshift+0x68>
 8004d6c:	46a1      	mov	r9, r4
 8004d6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d72:	f1c1 0820 	rsb	r8, r1, #32
 8004d76:	40cf      	lsrs	r7, r1
 8004d78:	f105 0e04 	add.w	lr, r5, #4
 8004d7c:	4576      	cmp	r6, lr
 8004d7e:	46f4      	mov	ip, lr
 8004d80:	d816      	bhi.n	8004db0 <rshift+0x80>
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009a      	lsls	r2, r3, #2
 8004d86:	3a04      	subs	r2, #4
 8004d88:	3501      	adds	r5, #1
 8004d8a:	42ae      	cmp	r6, r5
 8004d8c:	bf38      	it	cc
 8004d8e:	2200      	movcc	r2, #0
 8004d90:	18a3      	adds	r3, r4, r2
 8004d92:	50a7      	str	r7, [r4, r2]
 8004d94:	b107      	cbz	r7, 8004d98 <rshift+0x68>
 8004d96:	3304      	adds	r3, #4
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	eba3 0204 	sub.w	r2, r3, r4
 8004d9e:	bf08      	it	eq
 8004da0:	2300      	moveq	r3, #0
 8004da2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004da6:	6102      	str	r2, [r0, #16]
 8004da8:	bf08      	it	eq
 8004daa:	6143      	streq	r3, [r0, #20]
 8004dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004db0:	f8dc c000 	ldr.w	ip, [ip]
 8004db4:	fa0c fc08 	lsl.w	ip, ip, r8
 8004db8:	ea4c 0707 	orr.w	r7, ip, r7
 8004dbc:	f849 7b04 	str.w	r7, [r9], #4
 8004dc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004dc4:	40cf      	lsrs	r7, r1
 8004dc6:	e7d9      	b.n	8004d7c <rshift+0x4c>
 8004dc8:	f851 cb04 	ldr.w	ip, [r1], #4
 8004dcc:	f847 cf04 	str.w	ip, [r7, #4]!
 8004dd0:	e7c2      	b.n	8004d58 <rshift+0x28>
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	e7e0      	b.n	8004d98 <rshift+0x68>

08004dd6 <__hexdig_fun>:
 8004dd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004dda:	2b09      	cmp	r3, #9
 8004ddc:	d802      	bhi.n	8004de4 <__hexdig_fun+0xe>
 8004dde:	3820      	subs	r0, #32
 8004de0:	b2c0      	uxtb	r0, r0
 8004de2:	4770      	bx	lr
 8004de4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d801      	bhi.n	8004df0 <__hexdig_fun+0x1a>
 8004dec:	3847      	subs	r0, #71	; 0x47
 8004dee:	e7f7      	b.n	8004de0 <__hexdig_fun+0xa>
 8004df0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d801      	bhi.n	8004dfc <__hexdig_fun+0x26>
 8004df8:	3827      	subs	r0, #39	; 0x27
 8004dfa:	e7f1      	b.n	8004de0 <__hexdig_fun+0xa>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4770      	bx	lr

08004e00 <__gethex>:
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	b08b      	sub	sp, #44	; 0x2c
 8004e06:	9306      	str	r3, [sp, #24]
 8004e08:	4bb9      	ldr	r3, [pc, #740]	; (80050f0 <__gethex+0x2f0>)
 8004e0a:	9002      	str	r0, [sp, #8]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	468b      	mov	fp, r1
 8004e10:	4618      	mov	r0, r3
 8004e12:	4690      	mov	r8, r2
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	f7fb f99b 	bl	8000150 <strlen>
 8004e1a:	4682      	mov	sl, r0
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	f8db 2000 	ldr.w	r2, [fp]
 8004e22:	4403      	add	r3, r0
 8004e24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e28:	9307      	str	r3, [sp, #28]
 8004e2a:	1c93      	adds	r3, r2, #2
 8004e2c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004e30:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004e34:	32fe      	adds	r2, #254	; 0xfe
 8004e36:	18d1      	adds	r1, r2, r3
 8004e38:	461f      	mov	r7, r3
 8004e3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e3e:	9101      	str	r1, [sp, #4]
 8004e40:	2830      	cmp	r0, #48	; 0x30
 8004e42:	d0f8      	beq.n	8004e36 <__gethex+0x36>
 8004e44:	f7ff ffc7 	bl	8004dd6 <__hexdig_fun>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d13a      	bne.n	8004ec4 <__gethex+0xc4>
 8004e4e:	4652      	mov	r2, sl
 8004e50:	4638      	mov	r0, r7
 8004e52:	9903      	ldr	r1, [sp, #12]
 8004e54:	f001 fb6a 	bl	800652c <strncmp>
 8004e58:	4605      	mov	r5, r0
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d166      	bne.n	8004f2c <__gethex+0x12c>
 8004e5e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004e62:	eb07 060a 	add.w	r6, r7, sl
 8004e66:	f7ff ffb6 	bl	8004dd6 <__hexdig_fun>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d060      	beq.n	8004f30 <__gethex+0x130>
 8004e6e:	4633      	mov	r3, r6
 8004e70:	7818      	ldrb	r0, [r3, #0]
 8004e72:	461f      	mov	r7, r3
 8004e74:	2830      	cmp	r0, #48	; 0x30
 8004e76:	f103 0301 	add.w	r3, r3, #1
 8004e7a:	d0f9      	beq.n	8004e70 <__gethex+0x70>
 8004e7c:	f7ff ffab 	bl	8004dd6 <__hexdig_fun>
 8004e80:	2301      	movs	r3, #1
 8004e82:	fab0 f480 	clz	r4, r0
 8004e86:	4635      	mov	r5, r6
 8004e88:	0964      	lsrs	r4, r4, #5
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4616      	mov	r6, r2
 8004e90:	7830      	ldrb	r0, [r6, #0]
 8004e92:	3201      	adds	r2, #1
 8004e94:	f7ff ff9f 	bl	8004dd6 <__hexdig_fun>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d1f8      	bne.n	8004e8e <__gethex+0x8e>
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	9903      	ldr	r1, [sp, #12]
 8004ea2:	f001 fb43 	bl	800652c <strncmp>
 8004ea6:	b980      	cbnz	r0, 8004eca <__gethex+0xca>
 8004ea8:	b94d      	cbnz	r5, 8004ebe <__gethex+0xbe>
 8004eaa:	eb06 050a 	add.w	r5, r6, sl
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	7830      	ldrb	r0, [r6, #0]
 8004eb4:	3201      	adds	r2, #1
 8004eb6:	f7ff ff8e 	bl	8004dd6 <__hexdig_fun>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d1f8      	bne.n	8004eb0 <__gethex+0xb0>
 8004ebe:	1bad      	subs	r5, r5, r6
 8004ec0:	00ad      	lsls	r5, r5, #2
 8004ec2:	e004      	b.n	8004ece <__gethex+0xce>
 8004ec4:	2400      	movs	r4, #0
 8004ec6:	4625      	mov	r5, r4
 8004ec8:	e7e0      	b.n	8004e8c <__gethex+0x8c>
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	d1f7      	bne.n	8004ebe <__gethex+0xbe>
 8004ece:	7833      	ldrb	r3, [r6, #0]
 8004ed0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ed4:	2b50      	cmp	r3, #80	; 0x50
 8004ed6:	d139      	bne.n	8004f4c <__gethex+0x14c>
 8004ed8:	7873      	ldrb	r3, [r6, #1]
 8004eda:	2b2b      	cmp	r3, #43	; 0x2b
 8004edc:	d02a      	beq.n	8004f34 <__gethex+0x134>
 8004ede:	2b2d      	cmp	r3, #45	; 0x2d
 8004ee0:	d02c      	beq.n	8004f3c <__gethex+0x13c>
 8004ee2:	f04f 0900 	mov.w	r9, #0
 8004ee6:	1c71      	adds	r1, r6, #1
 8004ee8:	7808      	ldrb	r0, [r1, #0]
 8004eea:	f7ff ff74 	bl	8004dd6 <__hexdig_fun>
 8004eee:	1e43      	subs	r3, r0, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b18      	cmp	r3, #24
 8004ef4:	d82a      	bhi.n	8004f4c <__gethex+0x14c>
 8004ef6:	f1a0 0210 	sub.w	r2, r0, #16
 8004efa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004efe:	f7ff ff6a 	bl	8004dd6 <__hexdig_fun>
 8004f02:	1e43      	subs	r3, r0, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b18      	cmp	r3, #24
 8004f08:	d91b      	bls.n	8004f42 <__gethex+0x142>
 8004f0a:	f1b9 0f00 	cmp.w	r9, #0
 8004f0e:	d000      	beq.n	8004f12 <__gethex+0x112>
 8004f10:	4252      	negs	r2, r2
 8004f12:	4415      	add	r5, r2
 8004f14:	f8cb 1000 	str.w	r1, [fp]
 8004f18:	b1d4      	cbz	r4, 8004f50 <__gethex+0x150>
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf14      	ite	ne
 8004f20:	2700      	movne	r7, #0
 8004f22:	2706      	moveq	r7, #6
 8004f24:	4638      	mov	r0, r7
 8004f26:	b00b      	add	sp, #44	; 0x2c
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	463e      	mov	r6, r7
 8004f2e:	4625      	mov	r5, r4
 8004f30:	2401      	movs	r4, #1
 8004f32:	e7cc      	b.n	8004ece <__gethex+0xce>
 8004f34:	f04f 0900 	mov.w	r9, #0
 8004f38:	1cb1      	adds	r1, r6, #2
 8004f3a:	e7d5      	b.n	8004ee8 <__gethex+0xe8>
 8004f3c:	f04f 0901 	mov.w	r9, #1
 8004f40:	e7fa      	b.n	8004f38 <__gethex+0x138>
 8004f42:	230a      	movs	r3, #10
 8004f44:	fb03 0202 	mla	r2, r3, r2, r0
 8004f48:	3a10      	subs	r2, #16
 8004f4a:	e7d6      	b.n	8004efa <__gethex+0xfa>
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	e7e1      	b.n	8004f14 <__gethex+0x114>
 8004f50:	4621      	mov	r1, r4
 8004f52:	1bf3      	subs	r3, r6, r7
 8004f54:	3b01      	subs	r3, #1
 8004f56:	2b07      	cmp	r3, #7
 8004f58:	dc0a      	bgt.n	8004f70 <__gethex+0x170>
 8004f5a:	9802      	ldr	r0, [sp, #8]
 8004f5c:	f000 fa76 	bl	800544c <_Balloc>
 8004f60:	4604      	mov	r4, r0
 8004f62:	b940      	cbnz	r0, 8004f76 <__gethex+0x176>
 8004f64:	4602      	mov	r2, r0
 8004f66:	21de      	movs	r1, #222	; 0xde
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <__gethex+0x2f4>)
 8004f6a:	4863      	ldr	r0, [pc, #396]	; (80050f8 <__gethex+0x2f8>)
 8004f6c:	f7ff feb0 	bl	8004cd0 <__assert_func>
 8004f70:	3101      	adds	r1, #1
 8004f72:	105b      	asrs	r3, r3, #1
 8004f74:	e7ef      	b.n	8004f56 <__gethex+0x156>
 8004f76:	f04f 0b00 	mov.w	fp, #0
 8004f7a:	f100 0914 	add.w	r9, r0, #20
 8004f7e:	f1ca 0301 	rsb	r3, sl, #1
 8004f82:	f8cd 9010 	str.w	r9, [sp, #16]
 8004f86:	f8cd b004 	str.w	fp, [sp, #4]
 8004f8a:	9308      	str	r3, [sp, #32]
 8004f8c:	42b7      	cmp	r7, r6
 8004f8e:	d33f      	bcc.n	8005010 <__gethex+0x210>
 8004f90:	9f04      	ldr	r7, [sp, #16]
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	f847 3b04 	str.w	r3, [r7], #4
 8004f98:	eba7 0709 	sub.w	r7, r7, r9
 8004f9c:	10bf      	asrs	r7, r7, #2
 8004f9e:	6127      	str	r7, [r4, #16]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fb49 	bl	8005638 <__hi0bits>
 8004fa6:	017f      	lsls	r7, r7, #5
 8004fa8:	f8d8 6000 	ldr.w	r6, [r8]
 8004fac:	1a3f      	subs	r7, r7, r0
 8004fae:	42b7      	cmp	r7, r6
 8004fb0:	dd62      	ble.n	8005078 <__gethex+0x278>
 8004fb2:	1bbf      	subs	r7, r7, r6
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fedf 	bl	8005d7a <__any_on>
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	b1a8      	cbz	r0, 8004fec <__gethex+0x1ec>
 8004fc0:	f04f 0a01 	mov.w	sl, #1
 8004fc4:	1e7b      	subs	r3, r7, #1
 8004fc6:	1159      	asrs	r1, r3, #5
 8004fc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	fa0a f202 	lsl.w	r2, sl, r2
 8004fd4:	420a      	tst	r2, r1
 8004fd6:	d009      	beq.n	8004fec <__gethex+0x1ec>
 8004fd8:	4553      	cmp	r3, sl
 8004fda:	dd05      	ble.n	8004fe8 <__gethex+0x1e8>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	1eb9      	subs	r1, r7, #2
 8004fe0:	f000 fecb 	bl	8005d7a <__any_on>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d144      	bne.n	8005072 <__gethex+0x272>
 8004fe8:	f04f 0a02 	mov.w	sl, #2
 8004fec:	4639      	mov	r1, r7
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f7ff fe9e 	bl	8004d30 <rshift>
 8004ff4:	443d      	add	r5, r7
 8004ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ffa:	42ab      	cmp	r3, r5
 8004ffc:	da4a      	bge.n	8005094 <__gethex+0x294>
 8004ffe:	4621      	mov	r1, r4
 8005000:	9802      	ldr	r0, [sp, #8]
 8005002:	f000 fa63 	bl	80054cc <_Bfree>
 8005006:	2300      	movs	r3, #0
 8005008:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800500a:	27a3      	movs	r7, #163	; 0xa3
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e789      	b.n	8004f24 <__gethex+0x124>
 8005010:	1e73      	subs	r3, r6, #1
 8005012:	9a07      	ldr	r2, [sp, #28]
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800501a:	4293      	cmp	r3, r2
 800501c:	d019      	beq.n	8005052 <__gethex+0x252>
 800501e:	f1bb 0f20 	cmp.w	fp, #32
 8005022:	d107      	bne.n	8005034 <__gethex+0x234>
 8005024:	9b04      	ldr	r3, [sp, #16]
 8005026:	9a01      	ldr	r2, [sp, #4]
 8005028:	f843 2b04 	str.w	r2, [r3], #4
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	2300      	movs	r3, #0
 8005030:	469b      	mov	fp, r3
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005038:	f7ff fecd 	bl	8004dd6 <__hexdig_fun>
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	f000 000f 	and.w	r0, r0, #15
 8005042:	fa00 f00b 	lsl.w	r0, r0, fp
 8005046:	4303      	orrs	r3, r0
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	f10b 0b04 	add.w	fp, fp, #4
 800504e:	9b05      	ldr	r3, [sp, #20]
 8005050:	e00d      	b.n	800506e <__gethex+0x26e>
 8005052:	9b05      	ldr	r3, [sp, #20]
 8005054:	9a08      	ldr	r2, [sp, #32]
 8005056:	4413      	add	r3, r2
 8005058:	42bb      	cmp	r3, r7
 800505a:	d3e0      	bcc.n	800501e <__gethex+0x21e>
 800505c:	4618      	mov	r0, r3
 800505e:	4652      	mov	r2, sl
 8005060:	9903      	ldr	r1, [sp, #12]
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	f001 fa62 	bl	800652c <strncmp>
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	2800      	cmp	r0, #0
 800506c:	d1d7      	bne.n	800501e <__gethex+0x21e>
 800506e:	461e      	mov	r6, r3
 8005070:	e78c      	b.n	8004f8c <__gethex+0x18c>
 8005072:	f04f 0a03 	mov.w	sl, #3
 8005076:	e7b9      	b.n	8004fec <__gethex+0x1ec>
 8005078:	da09      	bge.n	800508e <__gethex+0x28e>
 800507a:	1bf7      	subs	r7, r6, r7
 800507c:	4621      	mov	r1, r4
 800507e:	463a      	mov	r2, r7
 8005080:	9802      	ldr	r0, [sp, #8]
 8005082:	f000 fc3b 	bl	80058fc <__lshift>
 8005086:	4604      	mov	r4, r0
 8005088:	1bed      	subs	r5, r5, r7
 800508a:	f100 0914 	add.w	r9, r0, #20
 800508e:	f04f 0a00 	mov.w	sl, #0
 8005092:	e7b0      	b.n	8004ff6 <__gethex+0x1f6>
 8005094:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005098:	42a8      	cmp	r0, r5
 800509a:	dd71      	ble.n	8005180 <__gethex+0x380>
 800509c:	1b45      	subs	r5, r0, r5
 800509e:	42ae      	cmp	r6, r5
 80050a0:	dc34      	bgt.n	800510c <__gethex+0x30c>
 80050a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d028      	beq.n	80050fc <__gethex+0x2fc>
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d02a      	beq.n	8005104 <__gethex+0x304>
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d115      	bne.n	80050de <__gethex+0x2de>
 80050b2:	42ae      	cmp	r6, r5
 80050b4:	d113      	bne.n	80050de <__gethex+0x2de>
 80050b6:	2e01      	cmp	r6, #1
 80050b8:	d10b      	bne.n	80050d2 <__gethex+0x2d2>
 80050ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80050be:	9a06      	ldr	r2, [sp, #24]
 80050c0:	2762      	movs	r7, #98	; 0x62
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	2301      	movs	r3, #1
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	f8c9 3000 	str.w	r3, [r9]
 80050cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050ce:	601c      	str	r4, [r3, #0]
 80050d0:	e728      	b.n	8004f24 <__gethex+0x124>
 80050d2:	4620      	mov	r0, r4
 80050d4:	1e71      	subs	r1, r6, #1
 80050d6:	f000 fe50 	bl	8005d7a <__any_on>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d1ed      	bne.n	80050ba <__gethex+0x2ba>
 80050de:	4621      	mov	r1, r4
 80050e0:	9802      	ldr	r0, [sp, #8]
 80050e2:	f000 f9f3 	bl	80054cc <_Bfree>
 80050e6:	2300      	movs	r3, #0
 80050e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050ea:	2750      	movs	r7, #80	; 0x50
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e719      	b.n	8004f24 <__gethex+0x124>
 80050f0:	08007038 	.word	0x08007038
 80050f4:	08006fbd 	.word	0x08006fbd
 80050f8:	08006fce 	.word	0x08006fce
 80050fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ed      	bne.n	80050de <__gethex+0x2de>
 8005102:	e7da      	b.n	80050ba <__gethex+0x2ba>
 8005104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d7      	bne.n	80050ba <__gethex+0x2ba>
 800510a:	e7e8      	b.n	80050de <__gethex+0x2de>
 800510c:	1e6f      	subs	r7, r5, #1
 800510e:	f1ba 0f00 	cmp.w	sl, #0
 8005112:	d132      	bne.n	800517a <__gethex+0x37a>
 8005114:	b127      	cbz	r7, 8005120 <__gethex+0x320>
 8005116:	4639      	mov	r1, r7
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fe2e 	bl	8005d7a <__any_on>
 800511e:	4682      	mov	sl, r0
 8005120:	2101      	movs	r1, #1
 8005122:	117b      	asrs	r3, r7, #5
 8005124:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005128:	f007 071f 	and.w	r7, r7, #31
 800512c:	fa01 f707 	lsl.w	r7, r1, r7
 8005130:	421f      	tst	r7, r3
 8005132:	f04f 0702 	mov.w	r7, #2
 8005136:	4629      	mov	r1, r5
 8005138:	4620      	mov	r0, r4
 800513a:	bf18      	it	ne
 800513c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005140:	1b76      	subs	r6, r6, r5
 8005142:	f7ff fdf5 	bl	8004d30 <rshift>
 8005146:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800514a:	f1ba 0f00 	cmp.w	sl, #0
 800514e:	d048      	beq.n	80051e2 <__gethex+0x3e2>
 8005150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d015      	beq.n	8005184 <__gethex+0x384>
 8005158:	2b03      	cmp	r3, #3
 800515a:	d017      	beq.n	800518c <__gethex+0x38c>
 800515c:	2b01      	cmp	r3, #1
 800515e:	d109      	bne.n	8005174 <__gethex+0x374>
 8005160:	f01a 0f02 	tst.w	sl, #2
 8005164:	d006      	beq.n	8005174 <__gethex+0x374>
 8005166:	f8d9 0000 	ldr.w	r0, [r9]
 800516a:	ea4a 0a00 	orr.w	sl, sl, r0
 800516e:	f01a 0f01 	tst.w	sl, #1
 8005172:	d10e      	bne.n	8005192 <__gethex+0x392>
 8005174:	f047 0710 	orr.w	r7, r7, #16
 8005178:	e033      	b.n	80051e2 <__gethex+0x3e2>
 800517a:	f04f 0a01 	mov.w	sl, #1
 800517e:	e7cf      	b.n	8005120 <__gethex+0x320>
 8005180:	2701      	movs	r7, #1
 8005182:	e7e2      	b.n	800514a <__gethex+0x34a>
 8005184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005186:	f1c3 0301 	rsb	r3, r3, #1
 800518a:	9315      	str	r3, [sp, #84]	; 0x54
 800518c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <__gethex+0x374>
 8005192:	f04f 0c00 	mov.w	ip, #0
 8005196:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800519a:	f104 0314 	add.w	r3, r4, #20
 800519e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80051a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ac:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80051b0:	d01c      	beq.n	80051ec <__gethex+0x3ec>
 80051b2:	3201      	adds	r2, #1
 80051b4:	6002      	str	r2, [r0, #0]
 80051b6:	2f02      	cmp	r7, #2
 80051b8:	f104 0314 	add.w	r3, r4, #20
 80051bc:	d13d      	bne.n	800523a <__gethex+0x43a>
 80051be:	f8d8 2000 	ldr.w	r2, [r8]
 80051c2:	3a01      	subs	r2, #1
 80051c4:	42b2      	cmp	r2, r6
 80051c6:	d10a      	bne.n	80051de <__gethex+0x3de>
 80051c8:	2201      	movs	r2, #1
 80051ca:	1171      	asrs	r1, r6, #5
 80051cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051d0:	f006 061f 	and.w	r6, r6, #31
 80051d4:	fa02 f606 	lsl.w	r6, r2, r6
 80051d8:	421e      	tst	r6, r3
 80051da:	bf18      	it	ne
 80051dc:	4617      	movne	r7, r2
 80051de:	f047 0720 	orr.w	r7, r7, #32
 80051e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051e4:	601c      	str	r4, [r3, #0]
 80051e6:	9b06      	ldr	r3, [sp, #24]
 80051e8:	601d      	str	r5, [r3, #0]
 80051ea:	e69b      	b.n	8004f24 <__gethex+0x124>
 80051ec:	4299      	cmp	r1, r3
 80051ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80051f2:	d8d8      	bhi.n	80051a6 <__gethex+0x3a6>
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	459b      	cmp	fp, r3
 80051f8:	db17      	blt.n	800522a <__gethex+0x42a>
 80051fa:	6861      	ldr	r1, [r4, #4]
 80051fc:	9802      	ldr	r0, [sp, #8]
 80051fe:	3101      	adds	r1, #1
 8005200:	f000 f924 	bl	800544c <_Balloc>
 8005204:	4681      	mov	r9, r0
 8005206:	b918      	cbnz	r0, 8005210 <__gethex+0x410>
 8005208:	4602      	mov	r2, r0
 800520a:	2184      	movs	r1, #132	; 0x84
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <__gethex+0x474>)
 800520e:	e6ac      	b.n	8004f6a <__gethex+0x16a>
 8005210:	6922      	ldr	r2, [r4, #16]
 8005212:	f104 010c 	add.w	r1, r4, #12
 8005216:	3202      	adds	r2, #2
 8005218:	0092      	lsls	r2, r2, #2
 800521a:	300c      	adds	r0, #12
 800521c:	f000 f908 	bl	8005430 <memcpy>
 8005220:	4621      	mov	r1, r4
 8005222:	9802      	ldr	r0, [sp, #8]
 8005224:	f000 f952 	bl	80054cc <_Bfree>
 8005228:	464c      	mov	r4, r9
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	2201      	movs	r2, #1
 8005232:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005236:	615a      	str	r2, [r3, #20]
 8005238:	e7bd      	b.n	80051b6 <__gethex+0x3b6>
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	455a      	cmp	r2, fp
 800523e:	dd0b      	ble.n	8005258 <__gethex+0x458>
 8005240:	2101      	movs	r1, #1
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fd74 	bl	8004d30 <rshift>
 8005248:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800524c:	3501      	adds	r5, #1
 800524e:	42ab      	cmp	r3, r5
 8005250:	f6ff aed5 	blt.w	8004ffe <__gethex+0x1fe>
 8005254:	2701      	movs	r7, #1
 8005256:	e7c2      	b.n	80051de <__gethex+0x3de>
 8005258:	f016 061f 	ands.w	r6, r6, #31
 800525c:	d0fa      	beq.n	8005254 <__gethex+0x454>
 800525e:	449a      	add	sl, r3
 8005260:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005264:	f000 f9e8 	bl	8005638 <__hi0bits>
 8005268:	f1c6 0620 	rsb	r6, r6, #32
 800526c:	42b0      	cmp	r0, r6
 800526e:	dbe7      	blt.n	8005240 <__gethex+0x440>
 8005270:	e7f0      	b.n	8005254 <__gethex+0x454>
 8005272:	bf00      	nop
 8005274:	08006fbd 	.word	0x08006fbd

08005278 <L_shift>:
 8005278:	f1c2 0208 	rsb	r2, r2, #8
 800527c:	0092      	lsls	r2, r2, #2
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	f1c2 0620 	rsb	r6, r2, #32
 8005284:	6843      	ldr	r3, [r0, #4]
 8005286:	6804      	ldr	r4, [r0, #0]
 8005288:	fa03 f506 	lsl.w	r5, r3, r6
 800528c:	432c      	orrs	r4, r5
 800528e:	40d3      	lsrs	r3, r2
 8005290:	6004      	str	r4, [r0, #0]
 8005292:	f840 3f04 	str.w	r3, [r0, #4]!
 8005296:	4288      	cmp	r0, r1
 8005298:	d3f4      	bcc.n	8005284 <L_shift+0xc>
 800529a:	bd70      	pop	{r4, r5, r6, pc}

0800529c <__match>:
 800529c:	b530      	push	{r4, r5, lr}
 800529e:	6803      	ldr	r3, [r0, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a6:	b914      	cbnz	r4, 80052ae <__match+0x12>
 80052a8:	6003      	str	r3, [r0, #0]
 80052aa:	2001      	movs	r0, #1
 80052ac:	bd30      	pop	{r4, r5, pc}
 80052ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80052b6:	2d19      	cmp	r5, #25
 80052b8:	bf98      	it	ls
 80052ba:	3220      	addls	r2, #32
 80052bc:	42a2      	cmp	r2, r4
 80052be:	d0f0      	beq.n	80052a2 <__match+0x6>
 80052c0:	2000      	movs	r0, #0
 80052c2:	e7f3      	b.n	80052ac <__match+0x10>

080052c4 <__hexnan>:
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	2500      	movs	r5, #0
 80052ca:	680b      	ldr	r3, [r1, #0]
 80052cc:	4682      	mov	sl, r0
 80052ce:	115e      	asrs	r6, r3, #5
 80052d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052d4:	f013 031f 	ands.w	r3, r3, #31
 80052d8:	bf18      	it	ne
 80052da:	3604      	addne	r6, #4
 80052dc:	1f37      	subs	r7, r6, #4
 80052de:	4690      	mov	r8, r2
 80052e0:	46b9      	mov	r9, r7
 80052e2:	463c      	mov	r4, r7
 80052e4:	46ab      	mov	fp, r5
 80052e6:	b087      	sub	sp, #28
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80052f0:	9502      	str	r5, [sp, #8]
 80052f2:	784a      	ldrb	r2, [r1, #1]
 80052f4:	1c4b      	adds	r3, r1, #1
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	b342      	cbz	r2, 800534c <__hexnan+0x88>
 80052fa:	4610      	mov	r0, r2
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	9204      	str	r2, [sp, #16]
 8005300:	f7ff fd69 	bl	8004dd6 <__hexdig_fun>
 8005304:	2800      	cmp	r0, #0
 8005306:	d14f      	bne.n	80053a8 <__hexnan+0xe4>
 8005308:	9a04      	ldr	r2, [sp, #16]
 800530a:	9905      	ldr	r1, [sp, #20]
 800530c:	2a20      	cmp	r2, #32
 800530e:	d818      	bhi.n	8005342 <__hexnan+0x7e>
 8005310:	9b02      	ldr	r3, [sp, #8]
 8005312:	459b      	cmp	fp, r3
 8005314:	dd13      	ble.n	800533e <__hexnan+0x7a>
 8005316:	454c      	cmp	r4, r9
 8005318:	d206      	bcs.n	8005328 <__hexnan+0x64>
 800531a:	2d07      	cmp	r5, #7
 800531c:	dc04      	bgt.n	8005328 <__hexnan+0x64>
 800531e:	462a      	mov	r2, r5
 8005320:	4649      	mov	r1, r9
 8005322:	4620      	mov	r0, r4
 8005324:	f7ff ffa8 	bl	8005278 <L_shift>
 8005328:	4544      	cmp	r4, r8
 800532a:	d950      	bls.n	80053ce <__hexnan+0x10a>
 800532c:	2300      	movs	r3, #0
 800532e:	f1a4 0904 	sub.w	r9, r4, #4
 8005332:	f844 3c04 	str.w	r3, [r4, #-4]
 8005336:	461d      	mov	r5, r3
 8005338:	464c      	mov	r4, r9
 800533a:	f8cd b008 	str.w	fp, [sp, #8]
 800533e:	9903      	ldr	r1, [sp, #12]
 8005340:	e7d7      	b.n	80052f2 <__hexnan+0x2e>
 8005342:	2a29      	cmp	r2, #41	; 0x29
 8005344:	d156      	bne.n	80053f4 <__hexnan+0x130>
 8005346:	3102      	adds	r1, #2
 8005348:	f8ca 1000 	str.w	r1, [sl]
 800534c:	f1bb 0f00 	cmp.w	fp, #0
 8005350:	d050      	beq.n	80053f4 <__hexnan+0x130>
 8005352:	454c      	cmp	r4, r9
 8005354:	d206      	bcs.n	8005364 <__hexnan+0xa0>
 8005356:	2d07      	cmp	r5, #7
 8005358:	dc04      	bgt.n	8005364 <__hexnan+0xa0>
 800535a:	462a      	mov	r2, r5
 800535c:	4649      	mov	r1, r9
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ff8a 	bl	8005278 <L_shift>
 8005364:	4544      	cmp	r4, r8
 8005366:	d934      	bls.n	80053d2 <__hexnan+0x10e>
 8005368:	4623      	mov	r3, r4
 800536a:	f1a8 0204 	sub.w	r2, r8, #4
 800536e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005372:	429f      	cmp	r7, r3
 8005374:	f842 1f04 	str.w	r1, [r2, #4]!
 8005378:	d2f9      	bcs.n	800536e <__hexnan+0xaa>
 800537a:	1b3b      	subs	r3, r7, r4
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	3304      	adds	r3, #4
 8005382:	3401      	adds	r4, #1
 8005384:	3e03      	subs	r6, #3
 8005386:	42b4      	cmp	r4, r6
 8005388:	bf88      	it	hi
 800538a:	2304      	movhi	r3, #4
 800538c:	2200      	movs	r2, #0
 800538e:	4443      	add	r3, r8
 8005390:	f843 2b04 	str.w	r2, [r3], #4
 8005394:	429f      	cmp	r7, r3
 8005396:	d2fb      	bcs.n	8005390 <__hexnan+0xcc>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	b91b      	cbnz	r3, 80053a4 <__hexnan+0xe0>
 800539c:	4547      	cmp	r7, r8
 800539e:	d127      	bne.n	80053f0 <__hexnan+0x12c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	2005      	movs	r0, #5
 80053a6:	e026      	b.n	80053f6 <__hexnan+0x132>
 80053a8:	3501      	adds	r5, #1
 80053aa:	2d08      	cmp	r5, #8
 80053ac:	f10b 0b01 	add.w	fp, fp, #1
 80053b0:	dd06      	ble.n	80053c0 <__hexnan+0xfc>
 80053b2:	4544      	cmp	r4, r8
 80053b4:	d9c3      	bls.n	800533e <__hexnan+0x7a>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2501      	movs	r5, #1
 80053ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80053be:	3c04      	subs	r4, #4
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	f000 000f 	and.w	r0, r0, #15
 80053c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	e7b7      	b.n	800533e <__hexnan+0x7a>
 80053ce:	2508      	movs	r5, #8
 80053d0:	e7b5      	b.n	800533e <__hexnan+0x7a>
 80053d2:	9b01      	ldr	r3, [sp, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0df      	beq.n	8005398 <__hexnan+0xd4>
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053dc:	f1c3 0320 	rsb	r3, r3, #32
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80053e8:	401a      	ands	r2, r3
 80053ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80053ee:	e7d3      	b.n	8005398 <__hexnan+0xd4>
 80053f0:	3f04      	subs	r7, #4
 80053f2:	e7d1      	b.n	8005398 <__hexnan+0xd4>
 80053f4:	2004      	movs	r0, #4
 80053f6:	b007      	add	sp, #28
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053fc <malloc>:
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <malloc+0xc>)
 80053fe:	4601      	mov	r1, r0
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f000 bd35 	b.w	8005e70 <_malloc_r>
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <__ascii_mbtowc>:
 800540c:	b082      	sub	sp, #8
 800540e:	b901      	cbnz	r1, 8005412 <__ascii_mbtowc+0x6>
 8005410:	a901      	add	r1, sp, #4
 8005412:	b142      	cbz	r2, 8005426 <__ascii_mbtowc+0x1a>
 8005414:	b14b      	cbz	r3, 800542a <__ascii_mbtowc+0x1e>
 8005416:	7813      	ldrb	r3, [r2, #0]
 8005418:	600b      	str	r3, [r1, #0]
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	1e10      	subs	r0, r2, #0
 800541e:	bf18      	it	ne
 8005420:	2001      	movne	r0, #1
 8005422:	b002      	add	sp, #8
 8005424:	4770      	bx	lr
 8005426:	4610      	mov	r0, r2
 8005428:	e7fb      	b.n	8005422 <__ascii_mbtowc+0x16>
 800542a:	f06f 0001 	mvn.w	r0, #1
 800542e:	e7f8      	b.n	8005422 <__ascii_mbtowc+0x16>

08005430 <memcpy>:
 8005430:	440a      	add	r2, r1
 8005432:	4291      	cmp	r1, r2
 8005434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005438:	d100      	bne.n	800543c <memcpy+0xc>
 800543a:	4770      	bx	lr
 800543c:	b510      	push	{r4, lr}
 800543e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005442:	4291      	cmp	r1, r2
 8005444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005448:	d1f9      	bne.n	800543e <memcpy+0xe>
 800544a:	bd10      	pop	{r4, pc}

0800544c <_Balloc>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005450:	4604      	mov	r4, r0
 8005452:	460d      	mov	r5, r1
 8005454:	b976      	cbnz	r6, 8005474 <_Balloc+0x28>
 8005456:	2010      	movs	r0, #16
 8005458:	f7ff ffd0 	bl	80053fc <malloc>
 800545c:	4602      	mov	r2, r0
 800545e:	6260      	str	r0, [r4, #36]	; 0x24
 8005460:	b920      	cbnz	r0, 800546c <_Balloc+0x20>
 8005462:	2166      	movs	r1, #102	; 0x66
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <_Balloc+0x78>)
 8005466:	4818      	ldr	r0, [pc, #96]	; (80054c8 <_Balloc+0x7c>)
 8005468:	f7ff fc32 	bl	8004cd0 <__assert_func>
 800546c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005470:	6006      	str	r6, [r0, #0]
 8005472:	60c6      	str	r6, [r0, #12]
 8005474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005476:	68f3      	ldr	r3, [r6, #12]
 8005478:	b183      	cbz	r3, 800549c <_Balloc+0x50>
 800547a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005482:	b9b8      	cbnz	r0, 80054b4 <_Balloc+0x68>
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f605 	lsl.w	r6, r1, r5
 800548a:	1d72      	adds	r2, r6, #5
 800548c:	4620      	mov	r0, r4
 800548e:	0092      	lsls	r2, r2, #2
 8005490:	f000 fc94 	bl	8005dbc <_calloc_r>
 8005494:	b160      	cbz	r0, 80054b0 <_Balloc+0x64>
 8005496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800549a:	e00e      	b.n	80054ba <_Balloc+0x6e>
 800549c:	2221      	movs	r2, #33	; 0x21
 800549e:	2104      	movs	r1, #4
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fc8b 	bl	8005dbc <_calloc_r>
 80054a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a8:	60f0      	str	r0, [r6, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e4      	bne.n	800547a <_Balloc+0x2e>
 80054b0:	2000      	movs	r0, #0
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	6802      	ldr	r2, [r0, #0]
 80054b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054ba:	2300      	movs	r3, #0
 80054bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054c0:	e7f7      	b.n	80054b2 <_Balloc+0x66>
 80054c2:	bf00      	nop
 80054c4:	08006e08 	.word	0x08006e08
 80054c8:	0800704c 	.word	0x0800704c

080054cc <_Bfree>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	b976      	cbnz	r6, 80054f4 <_Bfree+0x28>
 80054d6:	2010      	movs	r0, #16
 80054d8:	f7ff ff90 	bl	80053fc <malloc>
 80054dc:	4602      	mov	r2, r0
 80054de:	6268      	str	r0, [r5, #36]	; 0x24
 80054e0:	b920      	cbnz	r0, 80054ec <_Bfree+0x20>
 80054e2:	218a      	movs	r1, #138	; 0x8a
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <_Bfree+0x3c>)
 80054e6:	4809      	ldr	r0, [pc, #36]	; (800550c <_Bfree+0x40>)
 80054e8:	f7ff fbf2 	bl	8004cd0 <__assert_func>
 80054ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054f0:	6006      	str	r6, [r0, #0]
 80054f2:	60c6      	str	r6, [r0, #12]
 80054f4:	b13c      	cbz	r4, 8005506 <_Bfree+0x3a>
 80054f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054f8:	6862      	ldr	r2, [r4, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005500:	6021      	str	r1, [r4, #0]
 8005502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	08006e08 	.word	0x08006e08
 800550c:	0800704c 	.word	0x0800704c

08005510 <__multadd>:
 8005510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005514:	4698      	mov	r8, r3
 8005516:	460c      	mov	r4, r1
 8005518:	2300      	movs	r3, #0
 800551a:	690e      	ldr	r6, [r1, #16]
 800551c:	4607      	mov	r7, r0
 800551e:	f101 0014 	add.w	r0, r1, #20
 8005522:	6805      	ldr	r5, [r0, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	b2a9      	uxth	r1, r5
 8005528:	fb02 8101 	mla	r1, r2, r1, r8
 800552c:	0c2d      	lsrs	r5, r5, #16
 800552e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005532:	fb02 c505 	mla	r5, r2, r5, ip
 8005536:	b289      	uxth	r1, r1
 8005538:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800553c:	429e      	cmp	r6, r3
 800553e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005542:	f840 1b04 	str.w	r1, [r0], #4
 8005546:	dcec      	bgt.n	8005522 <__multadd+0x12>
 8005548:	f1b8 0f00 	cmp.w	r8, #0
 800554c:	d022      	beq.n	8005594 <__multadd+0x84>
 800554e:	68a3      	ldr	r3, [r4, #8]
 8005550:	42b3      	cmp	r3, r6
 8005552:	dc19      	bgt.n	8005588 <__multadd+0x78>
 8005554:	6861      	ldr	r1, [r4, #4]
 8005556:	4638      	mov	r0, r7
 8005558:	3101      	adds	r1, #1
 800555a:	f7ff ff77 	bl	800544c <_Balloc>
 800555e:	4605      	mov	r5, r0
 8005560:	b928      	cbnz	r0, 800556e <__multadd+0x5e>
 8005562:	4602      	mov	r2, r0
 8005564:	21b5      	movs	r1, #181	; 0xb5
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <__multadd+0x8c>)
 8005568:	480d      	ldr	r0, [pc, #52]	; (80055a0 <__multadd+0x90>)
 800556a:	f7ff fbb1 	bl	8004cd0 <__assert_func>
 800556e:	6922      	ldr	r2, [r4, #16]
 8005570:	f104 010c 	add.w	r1, r4, #12
 8005574:	3202      	adds	r2, #2
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	300c      	adds	r0, #12
 800557a:	f7ff ff59 	bl	8005430 <memcpy>
 800557e:	4621      	mov	r1, r4
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff ffa3 	bl	80054cc <_Bfree>
 8005586:	462c      	mov	r4, r5
 8005588:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800558c:	3601      	adds	r6, #1
 800558e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005592:	6126      	str	r6, [r4, #16]
 8005594:	4620      	mov	r0, r4
 8005596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800559a:	bf00      	nop
 800559c:	08006fbd 	.word	0x08006fbd
 80055a0:	0800704c 	.word	0x0800704c

080055a4 <__s2b>:
 80055a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a8:	4615      	mov	r5, r2
 80055aa:	2209      	movs	r2, #9
 80055ac:	461f      	mov	r7, r3
 80055ae:	3308      	adds	r3, #8
 80055b0:	460c      	mov	r4, r1
 80055b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80055b6:	4606      	mov	r6, r0
 80055b8:	2201      	movs	r2, #1
 80055ba:	2100      	movs	r1, #0
 80055bc:	429a      	cmp	r2, r3
 80055be:	db09      	blt.n	80055d4 <__s2b+0x30>
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7ff ff43 	bl	800544c <_Balloc>
 80055c6:	b940      	cbnz	r0, 80055da <__s2b+0x36>
 80055c8:	4602      	mov	r2, r0
 80055ca:	21ce      	movs	r1, #206	; 0xce
 80055cc:	4b18      	ldr	r3, [pc, #96]	; (8005630 <__s2b+0x8c>)
 80055ce:	4819      	ldr	r0, [pc, #100]	; (8005634 <__s2b+0x90>)
 80055d0:	f7ff fb7e 	bl	8004cd0 <__assert_func>
 80055d4:	0052      	lsls	r2, r2, #1
 80055d6:	3101      	adds	r1, #1
 80055d8:	e7f0      	b.n	80055bc <__s2b+0x18>
 80055da:	9b08      	ldr	r3, [sp, #32]
 80055dc:	2d09      	cmp	r5, #9
 80055de:	6143      	str	r3, [r0, #20]
 80055e0:	f04f 0301 	mov.w	r3, #1
 80055e4:	6103      	str	r3, [r0, #16]
 80055e6:	dd16      	ble.n	8005616 <__s2b+0x72>
 80055e8:	f104 0909 	add.w	r9, r4, #9
 80055ec:	46c8      	mov	r8, r9
 80055ee:	442c      	add	r4, r5
 80055f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055f4:	4601      	mov	r1, r0
 80055f6:	220a      	movs	r2, #10
 80055f8:	4630      	mov	r0, r6
 80055fa:	3b30      	subs	r3, #48	; 0x30
 80055fc:	f7ff ff88 	bl	8005510 <__multadd>
 8005600:	45a0      	cmp	r8, r4
 8005602:	d1f5      	bne.n	80055f0 <__s2b+0x4c>
 8005604:	f1a5 0408 	sub.w	r4, r5, #8
 8005608:	444c      	add	r4, r9
 800560a:	1b2d      	subs	r5, r5, r4
 800560c:	1963      	adds	r3, r4, r5
 800560e:	42bb      	cmp	r3, r7
 8005610:	db04      	blt.n	800561c <__s2b+0x78>
 8005612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005616:	2509      	movs	r5, #9
 8005618:	340a      	adds	r4, #10
 800561a:	e7f6      	b.n	800560a <__s2b+0x66>
 800561c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005620:	4601      	mov	r1, r0
 8005622:	220a      	movs	r2, #10
 8005624:	4630      	mov	r0, r6
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	f7ff ff72 	bl	8005510 <__multadd>
 800562c:	e7ee      	b.n	800560c <__s2b+0x68>
 800562e:	bf00      	nop
 8005630:	08006fbd 	.word	0x08006fbd
 8005634:	0800704c 	.word	0x0800704c

08005638 <__hi0bits>:
 8005638:	0c02      	lsrs	r2, r0, #16
 800563a:	0412      	lsls	r2, r2, #16
 800563c:	4603      	mov	r3, r0
 800563e:	b9ca      	cbnz	r2, 8005674 <__hi0bits+0x3c>
 8005640:	0403      	lsls	r3, r0, #16
 8005642:	2010      	movs	r0, #16
 8005644:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005648:	bf04      	itt	eq
 800564a:	021b      	lsleq	r3, r3, #8
 800564c:	3008      	addeq	r0, #8
 800564e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005652:	bf04      	itt	eq
 8005654:	011b      	lsleq	r3, r3, #4
 8005656:	3004      	addeq	r0, #4
 8005658:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800565c:	bf04      	itt	eq
 800565e:	009b      	lsleq	r3, r3, #2
 8005660:	3002      	addeq	r0, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	db05      	blt.n	8005672 <__hi0bits+0x3a>
 8005666:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800566a:	f100 0001 	add.w	r0, r0, #1
 800566e:	bf08      	it	eq
 8005670:	2020      	moveq	r0, #32
 8005672:	4770      	bx	lr
 8005674:	2000      	movs	r0, #0
 8005676:	e7e5      	b.n	8005644 <__hi0bits+0xc>

08005678 <__lo0bits>:
 8005678:	6803      	ldr	r3, [r0, #0]
 800567a:	4602      	mov	r2, r0
 800567c:	f013 0007 	ands.w	r0, r3, #7
 8005680:	d00b      	beq.n	800569a <__lo0bits+0x22>
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d422      	bmi.n	80056cc <__lo0bits+0x54>
 8005686:	0798      	lsls	r0, r3, #30
 8005688:	bf49      	itett	mi
 800568a:	085b      	lsrmi	r3, r3, #1
 800568c:	089b      	lsrpl	r3, r3, #2
 800568e:	2001      	movmi	r0, #1
 8005690:	6013      	strmi	r3, [r2, #0]
 8005692:	bf5c      	itt	pl
 8005694:	2002      	movpl	r0, #2
 8005696:	6013      	strpl	r3, [r2, #0]
 8005698:	4770      	bx	lr
 800569a:	b299      	uxth	r1, r3
 800569c:	b909      	cbnz	r1, 80056a2 <__lo0bits+0x2a>
 800569e:	2010      	movs	r0, #16
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80056a6:	bf04      	itt	eq
 80056a8:	0a1b      	lsreq	r3, r3, #8
 80056aa:	3008      	addeq	r0, #8
 80056ac:	0719      	lsls	r1, r3, #28
 80056ae:	bf04      	itt	eq
 80056b0:	091b      	lsreq	r3, r3, #4
 80056b2:	3004      	addeq	r0, #4
 80056b4:	0799      	lsls	r1, r3, #30
 80056b6:	bf04      	itt	eq
 80056b8:	089b      	lsreq	r3, r3, #2
 80056ba:	3002      	addeq	r0, #2
 80056bc:	07d9      	lsls	r1, r3, #31
 80056be:	d403      	bmi.n	80056c8 <__lo0bits+0x50>
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	f100 0001 	add.w	r0, r0, #1
 80056c6:	d003      	beq.n	80056d0 <__lo0bits+0x58>
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4770      	bx	lr
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr
 80056d0:	2020      	movs	r0, #32
 80056d2:	4770      	bx	lr

080056d4 <__i2b>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	460c      	mov	r4, r1
 80056d8:	2101      	movs	r1, #1
 80056da:	f7ff feb7 	bl	800544c <_Balloc>
 80056de:	4602      	mov	r2, r0
 80056e0:	b928      	cbnz	r0, 80056ee <__i2b+0x1a>
 80056e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <__i2b+0x24>)
 80056e8:	4804      	ldr	r0, [pc, #16]	; (80056fc <__i2b+0x28>)
 80056ea:	f7ff faf1 	bl	8004cd0 <__assert_func>
 80056ee:	2301      	movs	r3, #1
 80056f0:	6144      	str	r4, [r0, #20]
 80056f2:	6103      	str	r3, [r0, #16]
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	08006fbd 	.word	0x08006fbd
 80056fc:	0800704c 	.word	0x0800704c

08005700 <__multiply>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	4614      	mov	r4, r2
 8005706:	690a      	ldr	r2, [r1, #16]
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	460d      	mov	r5, r1
 800570c:	429a      	cmp	r2, r3
 800570e:	bfbe      	ittt	lt
 8005710:	460b      	movlt	r3, r1
 8005712:	4625      	movlt	r5, r4
 8005714:	461c      	movlt	r4, r3
 8005716:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800571a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800571e:	68ab      	ldr	r3, [r5, #8]
 8005720:	6869      	ldr	r1, [r5, #4]
 8005722:	eb0a 0709 	add.w	r7, sl, r9
 8005726:	42bb      	cmp	r3, r7
 8005728:	b085      	sub	sp, #20
 800572a:	bfb8      	it	lt
 800572c:	3101      	addlt	r1, #1
 800572e:	f7ff fe8d 	bl	800544c <_Balloc>
 8005732:	b930      	cbnz	r0, 8005742 <__multiply+0x42>
 8005734:	4602      	mov	r2, r0
 8005736:	f240 115d 	movw	r1, #349	; 0x15d
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <__multiply+0x140>)
 800573c:	4841      	ldr	r0, [pc, #260]	; (8005844 <__multiply+0x144>)
 800573e:	f7ff fac7 	bl	8004cd0 <__assert_func>
 8005742:	f100 0614 	add.w	r6, r0, #20
 8005746:	4633      	mov	r3, r6
 8005748:	2200      	movs	r2, #0
 800574a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800574e:	4543      	cmp	r3, r8
 8005750:	d31e      	bcc.n	8005790 <__multiply+0x90>
 8005752:	f105 0c14 	add.w	ip, r5, #20
 8005756:	f104 0314 	add.w	r3, r4, #20
 800575a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800575e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005762:	9202      	str	r2, [sp, #8]
 8005764:	ebac 0205 	sub.w	r2, ip, r5
 8005768:	3a15      	subs	r2, #21
 800576a:	f022 0203 	bic.w	r2, r2, #3
 800576e:	3204      	adds	r2, #4
 8005770:	f105 0115 	add.w	r1, r5, #21
 8005774:	458c      	cmp	ip, r1
 8005776:	bf38      	it	cc
 8005778:	2204      	movcc	r2, #4
 800577a:	9201      	str	r2, [sp, #4]
 800577c:	9a02      	ldr	r2, [sp, #8]
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	429a      	cmp	r2, r3
 8005782:	d808      	bhi.n	8005796 <__multiply+0x96>
 8005784:	2f00      	cmp	r7, #0
 8005786:	dc55      	bgt.n	8005834 <__multiply+0x134>
 8005788:	6107      	str	r7, [r0, #16]
 800578a:	b005      	add	sp, #20
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	f843 2b04 	str.w	r2, [r3], #4
 8005794:	e7db      	b.n	800574e <__multiply+0x4e>
 8005796:	f8b3 a000 	ldrh.w	sl, [r3]
 800579a:	f1ba 0f00 	cmp.w	sl, #0
 800579e:	d020      	beq.n	80057e2 <__multiply+0xe2>
 80057a0:	46b1      	mov	r9, r6
 80057a2:	2200      	movs	r2, #0
 80057a4:	f105 0e14 	add.w	lr, r5, #20
 80057a8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80057ac:	f8d9 b000 	ldr.w	fp, [r9]
 80057b0:	b2a1      	uxth	r1, r4
 80057b2:	fa1f fb8b 	uxth.w	fp, fp
 80057b6:	fb0a b101 	mla	r1, sl, r1, fp
 80057ba:	4411      	add	r1, r2
 80057bc:	f8d9 2000 	ldr.w	r2, [r9]
 80057c0:	0c24      	lsrs	r4, r4, #16
 80057c2:	0c12      	lsrs	r2, r2, #16
 80057c4:	fb0a 2404 	mla	r4, sl, r4, r2
 80057c8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80057cc:	b289      	uxth	r1, r1
 80057ce:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80057d2:	45f4      	cmp	ip, lr
 80057d4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80057d8:	f849 1b04 	str.w	r1, [r9], #4
 80057dc:	d8e4      	bhi.n	80057a8 <__multiply+0xa8>
 80057de:	9901      	ldr	r1, [sp, #4]
 80057e0:	5072      	str	r2, [r6, r1]
 80057e2:	9a03      	ldr	r2, [sp, #12]
 80057e4:	3304      	adds	r3, #4
 80057e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	d01f      	beq.n	8005830 <__multiply+0x130>
 80057f0:	46b6      	mov	lr, r6
 80057f2:	f04f 0a00 	mov.w	sl, #0
 80057f6:	6834      	ldr	r4, [r6, #0]
 80057f8:	f105 0114 	add.w	r1, r5, #20
 80057fc:	880a      	ldrh	r2, [r1, #0]
 80057fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005802:	b2a4      	uxth	r4, r4
 8005804:	fb09 b202 	mla	r2, r9, r2, fp
 8005808:	4492      	add	sl, r2
 800580a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800580e:	f84e 4b04 	str.w	r4, [lr], #4
 8005812:	f851 4b04 	ldr.w	r4, [r1], #4
 8005816:	f8be 2000 	ldrh.w	r2, [lr]
 800581a:	0c24      	lsrs	r4, r4, #16
 800581c:	fb09 2404 	mla	r4, r9, r4, r2
 8005820:	458c      	cmp	ip, r1
 8005822:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005826:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800582a:	d8e7      	bhi.n	80057fc <__multiply+0xfc>
 800582c:	9a01      	ldr	r2, [sp, #4]
 800582e:	50b4      	str	r4, [r6, r2]
 8005830:	3604      	adds	r6, #4
 8005832:	e7a3      	b.n	800577c <__multiply+0x7c>
 8005834:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1a5      	bne.n	8005788 <__multiply+0x88>
 800583c:	3f01      	subs	r7, #1
 800583e:	e7a1      	b.n	8005784 <__multiply+0x84>
 8005840:	08006fbd 	.word	0x08006fbd
 8005844:	0800704c 	.word	0x0800704c

08005848 <__pow5mult>:
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584c:	4615      	mov	r5, r2
 800584e:	f012 0203 	ands.w	r2, r2, #3
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	d007      	beq.n	8005868 <__pow5mult+0x20>
 8005858:	4c25      	ldr	r4, [pc, #148]	; (80058f0 <__pow5mult+0xa8>)
 800585a:	3a01      	subs	r2, #1
 800585c:	2300      	movs	r3, #0
 800585e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005862:	f7ff fe55 	bl	8005510 <__multadd>
 8005866:	4607      	mov	r7, r0
 8005868:	10ad      	asrs	r5, r5, #2
 800586a:	d03d      	beq.n	80058e8 <__pow5mult+0xa0>
 800586c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800586e:	b97c      	cbnz	r4, 8005890 <__pow5mult+0x48>
 8005870:	2010      	movs	r0, #16
 8005872:	f7ff fdc3 	bl	80053fc <malloc>
 8005876:	4602      	mov	r2, r0
 8005878:	6270      	str	r0, [r6, #36]	; 0x24
 800587a:	b928      	cbnz	r0, 8005888 <__pow5mult+0x40>
 800587c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005880:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <__pow5mult+0xac>)
 8005882:	481d      	ldr	r0, [pc, #116]	; (80058f8 <__pow5mult+0xb0>)
 8005884:	f7ff fa24 	bl	8004cd0 <__assert_func>
 8005888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800588c:	6004      	str	r4, [r0, #0]
 800588e:	60c4      	str	r4, [r0, #12]
 8005890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005898:	b94c      	cbnz	r4, 80058ae <__pow5mult+0x66>
 800589a:	f240 2171 	movw	r1, #625	; 0x271
 800589e:	4630      	mov	r0, r6
 80058a0:	f7ff ff18 	bl	80056d4 <__i2b>
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80058ac:	6003      	str	r3, [r0, #0]
 80058ae:	f04f 0900 	mov.w	r9, #0
 80058b2:	07eb      	lsls	r3, r5, #31
 80058b4:	d50a      	bpl.n	80058cc <__pow5mult+0x84>
 80058b6:	4639      	mov	r1, r7
 80058b8:	4622      	mov	r2, r4
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ff20 	bl	8005700 <__multiply>
 80058c0:	4680      	mov	r8, r0
 80058c2:	4639      	mov	r1, r7
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7ff fe01 	bl	80054cc <_Bfree>
 80058ca:	4647      	mov	r7, r8
 80058cc:	106d      	asrs	r5, r5, #1
 80058ce:	d00b      	beq.n	80058e8 <__pow5mult+0xa0>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	b938      	cbnz	r0, 80058e4 <__pow5mult+0x9c>
 80058d4:	4622      	mov	r2, r4
 80058d6:	4621      	mov	r1, r4
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff ff11 	bl	8005700 <__multiply>
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	f8c0 9000 	str.w	r9, [r0]
 80058e4:	4604      	mov	r4, r0
 80058e6:	e7e4      	b.n	80058b2 <__pow5mult+0x6a>
 80058e8:	4638      	mov	r0, r7
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	bf00      	nop
 80058f0:	080071a0 	.word	0x080071a0
 80058f4:	08006e08 	.word	0x08006e08
 80058f8:	0800704c 	.word	0x0800704c

080058fc <__lshift>:
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	460c      	mov	r4, r1
 8005902:	4607      	mov	r7, r0
 8005904:	4691      	mov	r9, r2
 8005906:	6923      	ldr	r3, [r4, #16]
 8005908:	6849      	ldr	r1, [r1, #4]
 800590a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800590e:	68a3      	ldr	r3, [r4, #8]
 8005910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005914:	f108 0601 	add.w	r6, r8, #1
 8005918:	42b3      	cmp	r3, r6
 800591a:	db0b      	blt.n	8005934 <__lshift+0x38>
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff fd95 	bl	800544c <_Balloc>
 8005922:	4605      	mov	r5, r0
 8005924:	b948      	cbnz	r0, 800593a <__lshift+0x3e>
 8005926:	4602      	mov	r2, r0
 8005928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <__lshift+0xd0>)
 800592e:	4828      	ldr	r0, [pc, #160]	; (80059d0 <__lshift+0xd4>)
 8005930:	f7ff f9ce 	bl	8004cd0 <__assert_func>
 8005934:	3101      	adds	r1, #1
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	e7ee      	b.n	8005918 <__lshift+0x1c>
 800593a:	2300      	movs	r3, #0
 800593c:	f100 0114 	add.w	r1, r0, #20
 8005940:	f100 0210 	add.w	r2, r0, #16
 8005944:	4618      	mov	r0, r3
 8005946:	4553      	cmp	r3, sl
 8005948:	db33      	blt.n	80059b2 <__lshift+0xb6>
 800594a:	6920      	ldr	r0, [r4, #16]
 800594c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005950:	f104 0314 	add.w	r3, r4, #20
 8005954:	f019 091f 	ands.w	r9, r9, #31
 8005958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800595c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005960:	d02b      	beq.n	80059ba <__lshift+0xbe>
 8005962:	468a      	mov	sl, r1
 8005964:	2200      	movs	r2, #0
 8005966:	f1c9 0e20 	rsb	lr, r9, #32
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	fa00 f009 	lsl.w	r0, r0, r9
 8005970:	4302      	orrs	r2, r0
 8005972:	f84a 2b04 	str.w	r2, [sl], #4
 8005976:	f853 2b04 	ldr.w	r2, [r3], #4
 800597a:	459c      	cmp	ip, r3
 800597c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005980:	d8f3      	bhi.n	800596a <__lshift+0x6e>
 8005982:	ebac 0304 	sub.w	r3, ip, r4
 8005986:	3b15      	subs	r3, #21
 8005988:	f023 0303 	bic.w	r3, r3, #3
 800598c:	3304      	adds	r3, #4
 800598e:	f104 0015 	add.w	r0, r4, #21
 8005992:	4584      	cmp	ip, r0
 8005994:	bf38      	it	cc
 8005996:	2304      	movcc	r3, #4
 8005998:	50ca      	str	r2, [r1, r3]
 800599a:	b10a      	cbz	r2, 80059a0 <__lshift+0xa4>
 800599c:	f108 0602 	add.w	r6, r8, #2
 80059a0:	3e01      	subs	r6, #1
 80059a2:	4638      	mov	r0, r7
 80059a4:	4621      	mov	r1, r4
 80059a6:	612e      	str	r6, [r5, #16]
 80059a8:	f7ff fd90 	bl	80054cc <_Bfree>
 80059ac:	4628      	mov	r0, r5
 80059ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80059b6:	3301      	adds	r3, #1
 80059b8:	e7c5      	b.n	8005946 <__lshift+0x4a>
 80059ba:	3904      	subs	r1, #4
 80059bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c0:	459c      	cmp	ip, r3
 80059c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80059c6:	d8f9      	bhi.n	80059bc <__lshift+0xc0>
 80059c8:	e7ea      	b.n	80059a0 <__lshift+0xa4>
 80059ca:	bf00      	nop
 80059cc:	08006fbd 	.word	0x08006fbd
 80059d0:	0800704c 	.word	0x0800704c

080059d4 <__mcmp>:
 80059d4:	4603      	mov	r3, r0
 80059d6:	690a      	ldr	r2, [r1, #16]
 80059d8:	6900      	ldr	r0, [r0, #16]
 80059da:	b530      	push	{r4, r5, lr}
 80059dc:	1a80      	subs	r0, r0, r2
 80059de:	d10d      	bne.n	80059fc <__mcmp+0x28>
 80059e0:	3314      	adds	r3, #20
 80059e2:	3114      	adds	r1, #20
 80059e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059f4:	4295      	cmp	r5, r2
 80059f6:	d002      	beq.n	80059fe <__mcmp+0x2a>
 80059f8:	d304      	bcc.n	8005a04 <__mcmp+0x30>
 80059fa:	2001      	movs	r0, #1
 80059fc:	bd30      	pop	{r4, r5, pc}
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d3f4      	bcc.n	80059ec <__mcmp+0x18>
 8005a02:	e7fb      	b.n	80059fc <__mcmp+0x28>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a08:	e7f8      	b.n	80059fc <__mcmp+0x28>
	...

08005a0c <__mdiff>:
 8005a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	4606      	mov	r6, r0
 8005a14:	4611      	mov	r1, r2
 8005a16:	4620      	mov	r0, r4
 8005a18:	4692      	mov	sl, r2
 8005a1a:	f7ff ffdb 	bl	80059d4 <__mcmp>
 8005a1e:	1e05      	subs	r5, r0, #0
 8005a20:	d111      	bne.n	8005a46 <__mdiff+0x3a>
 8005a22:	4629      	mov	r1, r5
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7ff fd11 	bl	800544c <_Balloc>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	b928      	cbnz	r0, 8005a3a <__mdiff+0x2e>
 8005a2e:	f240 2132 	movw	r1, #562	; 0x232
 8005a32:	4b3c      	ldr	r3, [pc, #240]	; (8005b24 <__mdiff+0x118>)
 8005a34:	483c      	ldr	r0, [pc, #240]	; (8005b28 <__mdiff+0x11c>)
 8005a36:	f7ff f94b 	bl	8004cd0 <__assert_func>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a40:	4610      	mov	r0, r2
 8005a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	bfa4      	itt	ge
 8005a48:	4653      	movge	r3, sl
 8005a4a:	46a2      	movge	sl, r4
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005a52:	bfa6      	itte	ge
 8005a54:	461c      	movge	r4, r3
 8005a56:	2500      	movge	r5, #0
 8005a58:	2501      	movlt	r5, #1
 8005a5a:	f7ff fcf7 	bl	800544c <_Balloc>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	b918      	cbnz	r0, 8005a6a <__mdiff+0x5e>
 8005a62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <__mdiff+0x118>)
 8005a68:	e7e4      	b.n	8005a34 <__mdiff+0x28>
 8005a6a:	f100 0814 	add.w	r8, r0, #20
 8005a6e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005a72:	60c5      	str	r5, [r0, #12]
 8005a74:	f04f 0c00 	mov.w	ip, #0
 8005a78:	f10a 0514 	add.w	r5, sl, #20
 8005a7c:	f10a 0010 	add.w	r0, sl, #16
 8005a80:	46c2      	mov	sl, r8
 8005a82:	6926      	ldr	r6, [r4, #16]
 8005a84:	f104 0914 	add.w	r9, r4, #20
 8005a88:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a90:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a98:	fa1f f18b 	uxth.w	r1, fp
 8005a9c:	4461      	add	r1, ip
 8005a9e:	fa1f fc83 	uxth.w	ip, r3
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	eba1 010c 	sub.w	r1, r1, ip
 8005aa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005aac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ab0:	b289      	uxth	r1, r1
 8005ab2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ab6:	454e      	cmp	r6, r9
 8005ab8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005abc:	f84a 3b04 	str.w	r3, [sl], #4
 8005ac0:	d8e6      	bhi.n	8005a90 <__mdiff+0x84>
 8005ac2:	1b33      	subs	r3, r6, r4
 8005ac4:	3b15      	subs	r3, #21
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	3415      	adds	r4, #21
 8005acc:	3304      	adds	r3, #4
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	bf38      	it	cc
 8005ad2:	2304      	movcc	r3, #4
 8005ad4:	441d      	add	r5, r3
 8005ad6:	4443      	add	r3, r8
 8005ad8:	461e      	mov	r6, r3
 8005ada:	462c      	mov	r4, r5
 8005adc:	4574      	cmp	r4, lr
 8005ade:	d30e      	bcc.n	8005afe <__mdiff+0xf2>
 8005ae0:	f10e 0103 	add.w	r1, lr, #3
 8005ae4:	1b49      	subs	r1, r1, r5
 8005ae6:	f021 0103 	bic.w	r1, r1, #3
 8005aea:	3d03      	subs	r5, #3
 8005aec:	45ae      	cmp	lr, r5
 8005aee:	bf38      	it	cc
 8005af0:	2100      	movcc	r1, #0
 8005af2:	4419      	add	r1, r3
 8005af4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005af8:	b18b      	cbz	r3, 8005b1e <__mdiff+0x112>
 8005afa:	6117      	str	r7, [r2, #16]
 8005afc:	e7a0      	b.n	8005a40 <__mdiff+0x34>
 8005afe:	f854 8b04 	ldr.w	r8, [r4], #4
 8005b02:	fa1f f188 	uxth.w	r1, r8
 8005b06:	4461      	add	r1, ip
 8005b08:	1408      	asrs	r0, r1, #16
 8005b0a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005b0e:	b289      	uxth	r1, r1
 8005b10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b18:	f846 1b04 	str.w	r1, [r6], #4
 8005b1c:	e7de      	b.n	8005adc <__mdiff+0xd0>
 8005b1e:	3f01      	subs	r7, #1
 8005b20:	e7e8      	b.n	8005af4 <__mdiff+0xe8>
 8005b22:	bf00      	nop
 8005b24:	08006fbd 	.word	0x08006fbd
 8005b28:	0800704c 	.word	0x0800704c

08005b2c <__ulp>:
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <__ulp+0x48>)
 8005b2e:	400b      	ands	r3, r1
 8005b30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dd02      	ble.n	8005b3e <__ulp+0x12>
 8005b38:	2000      	movs	r0, #0
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4770      	bx	lr
 8005b3e:	425b      	negs	r3, r3
 8005b40:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005b50:	da04      	bge.n	8005b5c <__ulp+0x30>
 8005b52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b56:	fa43 f102 	asr.w	r1, r3, r2
 8005b5a:	4770      	bx	lr
 8005b5c:	f1a2 0314 	sub.w	r3, r2, #20
 8005b60:	2b1e      	cmp	r3, #30
 8005b62:	bfd6      	itet	le
 8005b64:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005b68:	2301      	movgt	r3, #1
 8005b6a:	fa22 f303 	lsrle.w	r3, r2, r3
 8005b6e:	4618      	mov	r0, r3
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	7ff00000 	.word	0x7ff00000

08005b78 <__b2d>:
 8005b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b7c:	6907      	ldr	r7, [r0, #16]
 8005b7e:	f100 0914 	add.w	r9, r0, #20
 8005b82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005b86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005b8a:	f1a7 0804 	sub.w	r8, r7, #4
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff fd52 	bl	8005638 <__hi0bits>
 8005b94:	f1c0 0320 	rsb	r3, r0, #32
 8005b98:	280a      	cmp	r0, #10
 8005b9a:	600b      	str	r3, [r1, #0]
 8005b9c:	491f      	ldr	r1, [pc, #124]	; (8005c1c <__b2d+0xa4>)
 8005b9e:	dc17      	bgt.n	8005bd0 <__b2d+0x58>
 8005ba0:	45c1      	cmp	r9, r8
 8005ba2:	bf28      	it	cs
 8005ba4:	2200      	movcs	r2, #0
 8005ba6:	f1c0 0c0b 	rsb	ip, r0, #11
 8005baa:	fa26 f30c 	lsr.w	r3, r6, ip
 8005bae:	bf38      	it	cc
 8005bb0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005bb4:	ea43 0501 	orr.w	r5, r3, r1
 8005bb8:	f100 0315 	add.w	r3, r0, #21
 8005bbc:	fa06 f303 	lsl.w	r3, r6, r3
 8005bc0:	fa22 f20c 	lsr.w	r2, r2, ip
 8005bc4:	ea43 0402 	orr.w	r4, r3, r2
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bd0:	45c1      	cmp	r9, r8
 8005bd2:	bf2e      	itee	cs
 8005bd4:	2200      	movcs	r2, #0
 8005bd6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005bda:	f1a7 0808 	subcc.w	r8, r7, #8
 8005bde:	f1b0 030b 	subs.w	r3, r0, #11
 8005be2:	d016      	beq.n	8005c12 <__b2d+0x9a>
 8005be4:	f1c3 0720 	rsb	r7, r3, #32
 8005be8:	fa22 f107 	lsr.w	r1, r2, r7
 8005bec:	45c8      	cmp	r8, r9
 8005bee:	fa06 f603 	lsl.w	r6, r6, r3
 8005bf2:	ea46 0601 	orr.w	r6, r6, r1
 8005bf6:	bf94      	ite	ls
 8005bf8:	2100      	movls	r1, #0
 8005bfa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005bfe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005c02:	fa02 f003 	lsl.w	r0, r2, r3
 8005c06:	40f9      	lsrs	r1, r7
 8005c08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c0c:	ea40 0401 	orr.w	r4, r0, r1
 8005c10:	e7da      	b.n	8005bc8 <__b2d+0x50>
 8005c12:	4614      	mov	r4, r2
 8005c14:	ea46 0501 	orr.w	r5, r6, r1
 8005c18:	e7d6      	b.n	8005bc8 <__b2d+0x50>
 8005c1a:	bf00      	nop
 8005c1c:	3ff00000 	.word	0x3ff00000

08005c20 <__d2b>:
 8005c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c24:	2101      	movs	r1, #1
 8005c26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c2a:	4690      	mov	r8, r2
 8005c2c:	461d      	mov	r5, r3
 8005c2e:	f7ff fc0d 	bl	800544c <_Balloc>
 8005c32:	4604      	mov	r4, r0
 8005c34:	b930      	cbnz	r0, 8005c44 <__d2b+0x24>
 8005c36:	4602      	mov	r2, r0
 8005c38:	f240 310a 	movw	r1, #778	; 0x30a
 8005c3c:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <__d2b+0xb0>)
 8005c3e:	4825      	ldr	r0, [pc, #148]	; (8005cd4 <__d2b+0xb4>)
 8005c40:	f7ff f846 	bl	8004cd0 <__assert_func>
 8005c44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005c48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c4c:	bb2d      	cbnz	r5, 8005c9a <__d2b+0x7a>
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	f1b8 0300 	subs.w	r3, r8, #0
 8005c54:	d026      	beq.n	8005ca4 <__d2b+0x84>
 8005c56:	4668      	mov	r0, sp
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	f7ff fd0d 	bl	8005678 <__lo0bits>
 8005c5e:	9900      	ldr	r1, [sp, #0]
 8005c60:	b1f0      	cbz	r0, 8005ca0 <__d2b+0x80>
 8005c62:	9a01      	ldr	r2, [sp, #4]
 8005c64:	f1c0 0320 	rsb	r3, r0, #32
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	40c2      	lsrs	r2, r0
 8005c70:	6163      	str	r3, [r4, #20]
 8005c72:	9201      	str	r2, [sp, #4]
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bf14      	ite	ne
 8005c7a:	2102      	movne	r1, #2
 8005c7c:	2101      	moveq	r1, #1
 8005c7e:	61a3      	str	r3, [r4, #24]
 8005c80:	6121      	str	r1, [r4, #16]
 8005c82:	b1c5      	cbz	r5, 8005cb6 <__d2b+0x96>
 8005c84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c88:	4405      	add	r5, r0
 8005c8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c8e:	603d      	str	r5, [r7, #0]
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	4620      	mov	r0, r4
 8005c94:	b002      	add	sp, #8
 8005c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c9e:	e7d6      	b.n	8005c4e <__d2b+0x2e>
 8005ca0:	6161      	str	r1, [r4, #20]
 8005ca2:	e7e7      	b.n	8005c74 <__d2b+0x54>
 8005ca4:	a801      	add	r0, sp, #4
 8005ca6:	f7ff fce7 	bl	8005678 <__lo0bits>
 8005caa:	2101      	movs	r1, #1
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	6121      	str	r1, [r4, #16]
 8005cb0:	6163      	str	r3, [r4, #20]
 8005cb2:	3020      	adds	r0, #32
 8005cb4:	e7e5      	b.n	8005c82 <__d2b+0x62>
 8005cb6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005cba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cbe:	6038      	str	r0, [r7, #0]
 8005cc0:	6918      	ldr	r0, [r3, #16]
 8005cc2:	f7ff fcb9 	bl	8005638 <__hi0bits>
 8005cc6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005cca:	6031      	str	r1, [r6, #0]
 8005ccc:	e7e1      	b.n	8005c92 <__d2b+0x72>
 8005cce:	bf00      	nop
 8005cd0:	08006fbd 	.word	0x08006fbd
 8005cd4:	0800704c 	.word	0x0800704c

08005cd8 <__ratio>:
 8005cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	4688      	mov	r8, r1
 8005cde:	4669      	mov	r1, sp
 8005ce0:	4681      	mov	r9, r0
 8005ce2:	f7ff ff49 	bl	8005b78 <__b2d>
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	4640      	mov	r0, r8
 8005cee:	a901      	add	r1, sp, #4
 8005cf0:	f7ff ff42 	bl	8005b78 <__b2d>
 8005cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cfc:	468b      	mov	fp, r1
 8005cfe:	eba3 0c02 	sub.w	ip, r3, r2
 8005d02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bfd5      	itete	le
 8005d10:	460a      	movle	r2, r1
 8005d12:	462a      	movgt	r2, r5
 8005d14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005d18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005d1c:	bfd8      	it	le
 8005d1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005d22:	465b      	mov	r3, fp
 8005d24:	4602      	mov	r2, r0
 8005d26:	4639      	mov	r1, r7
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7fa fdb3 	bl	8000894 <__aeabi_ddiv>
 8005d2e:	b003      	add	sp, #12
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d34 <__copybits>:
 8005d34:	3901      	subs	r1, #1
 8005d36:	b570      	push	{r4, r5, r6, lr}
 8005d38:	1149      	asrs	r1, r1, #5
 8005d3a:	6914      	ldr	r4, [r2, #16]
 8005d3c:	3101      	adds	r1, #1
 8005d3e:	f102 0314 	add.w	r3, r2, #20
 8005d42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d4a:	1f05      	subs	r5, r0, #4
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d30c      	bcc.n	8005d6a <__copybits+0x36>
 8005d50:	1aa3      	subs	r3, r4, r2
 8005d52:	3b11      	subs	r3, #17
 8005d54:	f023 0303 	bic.w	r3, r3, #3
 8005d58:	3211      	adds	r2, #17
 8005d5a:	42a2      	cmp	r2, r4
 8005d5c:	bf88      	it	hi
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	4418      	add	r0, r3
 8005d62:	2300      	movs	r3, #0
 8005d64:	4288      	cmp	r0, r1
 8005d66:	d305      	bcc.n	8005d74 <__copybits+0x40>
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d72:	e7eb      	b.n	8005d4c <__copybits+0x18>
 8005d74:	f840 3b04 	str.w	r3, [r0], #4
 8005d78:	e7f4      	b.n	8005d64 <__copybits+0x30>

08005d7a <__any_on>:
 8005d7a:	f100 0214 	add.w	r2, r0, #20
 8005d7e:	6900      	ldr	r0, [r0, #16]
 8005d80:	114b      	asrs	r3, r1, #5
 8005d82:	4298      	cmp	r0, r3
 8005d84:	b510      	push	{r4, lr}
 8005d86:	db11      	blt.n	8005dac <__any_on+0x32>
 8005d88:	dd0a      	ble.n	8005da0 <__any_on+0x26>
 8005d8a:	f011 011f 	ands.w	r1, r1, #31
 8005d8e:	d007      	beq.n	8005da0 <__any_on+0x26>
 8005d90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d94:	fa24 f001 	lsr.w	r0, r4, r1
 8005d98:	fa00 f101 	lsl.w	r1, r0, r1
 8005d9c:	428c      	cmp	r4, r1
 8005d9e:	d10b      	bne.n	8005db8 <__any_on+0x3e>
 8005da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d803      	bhi.n	8005db0 <__any_on+0x36>
 8005da8:	2000      	movs	r0, #0
 8005daa:	bd10      	pop	{r4, pc}
 8005dac:	4603      	mov	r3, r0
 8005dae:	e7f7      	b.n	8005da0 <__any_on+0x26>
 8005db0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0f5      	beq.n	8005da4 <__any_on+0x2a>
 8005db8:	2001      	movs	r0, #1
 8005dba:	e7f6      	b.n	8005daa <__any_on+0x30>

08005dbc <_calloc_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	fb02 f501 	mul.w	r5, r2, r1
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f000 f854 	bl	8005e70 <_malloc_r>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	b118      	cbz	r0, 8005dd4 <_calloc_r+0x18>
 8005dcc:	462a      	mov	r2, r5
 8005dce:	2100      	movs	r1, #0
 8005dd0:	f7fe f866 	bl	8003ea0 <memset>
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}

08005dd8 <_free_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4605      	mov	r5, r0
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d043      	beq.n	8005e68 <_free_r+0x90>
 8005de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de4:	1f0c      	subs	r4, r1, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfb8      	it	lt
 8005dea:	18e4      	addlt	r4, r4, r3
 8005dec:	f000 feb2 	bl	8006b54 <__malloc_lock>
 8005df0:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <_free_r+0x94>)
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	4610      	mov	r0, r2
 8005df6:	b933      	cbnz	r3, 8005e06 <_free_r+0x2e>
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	6014      	str	r4, [r2, #0]
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e02:	f000 bead 	b.w	8006b60 <__malloc_unlock>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d90a      	bls.n	8005e20 <_free_r+0x48>
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	1862      	adds	r2, r4, r1
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	bf01      	itttt	eq
 8005e12:	681a      	ldreq	r2, [r3, #0]
 8005e14:	685b      	ldreq	r3, [r3, #4]
 8005e16:	1852      	addeq	r2, r2, r1
 8005e18:	6022      	streq	r2, [r4, #0]
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	e7ed      	b.n	8005dfc <_free_r+0x24>
 8005e20:	461a      	mov	r2, r3
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	b10b      	cbz	r3, 8005e2a <_free_r+0x52>
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	d9fa      	bls.n	8005e20 <_free_r+0x48>
 8005e2a:	6811      	ldr	r1, [r2, #0]
 8005e2c:	1850      	adds	r0, r2, r1
 8005e2e:	42a0      	cmp	r0, r4
 8005e30:	d10b      	bne.n	8005e4a <_free_r+0x72>
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	4401      	add	r1, r0
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	4283      	cmp	r3, r0
 8005e3a:	6011      	str	r1, [r2, #0]
 8005e3c:	d1de      	bne.n	8005dfc <_free_r+0x24>
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4401      	add	r1, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	6053      	str	r3, [r2, #4]
 8005e48:	e7d8      	b.n	8005dfc <_free_r+0x24>
 8005e4a:	d902      	bls.n	8005e52 <_free_r+0x7a>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	e7d4      	b.n	8005dfc <_free_r+0x24>
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	1821      	adds	r1, r4, r0
 8005e56:	428b      	cmp	r3, r1
 8005e58:	bf01      	itttt	eq
 8005e5a:	6819      	ldreq	r1, [r3, #0]
 8005e5c:	685b      	ldreq	r3, [r3, #4]
 8005e5e:	1809      	addeq	r1, r1, r0
 8005e60:	6021      	streq	r1, [r4, #0]
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	6054      	str	r4, [r2, #4]
 8005e66:	e7c9      	b.n	8005dfc <_free_r+0x24>
 8005e68:	bd38      	pop	{r3, r4, r5, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000250 	.word	0x20000250

08005e70 <_malloc_r>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	1ccd      	adds	r5, r1, #3
 8005e74:	f025 0503 	bic.w	r5, r5, #3
 8005e78:	3508      	adds	r5, #8
 8005e7a:	2d0c      	cmp	r5, #12
 8005e7c:	bf38      	it	cc
 8005e7e:	250c      	movcc	r5, #12
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	4606      	mov	r6, r0
 8005e84:	db01      	blt.n	8005e8a <_malloc_r+0x1a>
 8005e86:	42a9      	cmp	r1, r5
 8005e88:	d903      	bls.n	8005e92 <_malloc_r+0x22>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	2000      	movs	r0, #0
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	f000 fe5f 	bl	8006b54 <__malloc_lock>
 8005e96:	4921      	ldr	r1, [pc, #132]	; (8005f1c <_malloc_r+0xac>)
 8005e98:	680a      	ldr	r2, [r1, #0]
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	b99c      	cbnz	r4, 8005ec6 <_malloc_r+0x56>
 8005e9e:	4f20      	ldr	r7, [pc, #128]	; (8005f20 <_malloc_r+0xb0>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b923      	cbnz	r3, 8005eae <_malloc_r+0x3e>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 fb30 	bl	800650c <_sbrk_r>
 8005eac:	6038      	str	r0, [r7, #0]
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 fb2b 	bl	800650c <_sbrk_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d123      	bne.n	8005f02 <_malloc_r+0x92>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	f000 fe4e 	bl	8006b60 <__malloc_unlock>
 8005ec4:	e7e3      	b.n	8005e8e <_malloc_r+0x1e>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	1b5b      	subs	r3, r3, r5
 8005eca:	d417      	bmi.n	8005efc <_malloc_r+0x8c>
 8005ecc:	2b0b      	cmp	r3, #11
 8005ece:	d903      	bls.n	8005ed8 <_malloc_r+0x68>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	441c      	add	r4, r3
 8005ed4:	6025      	str	r5, [r4, #0]
 8005ed6:	e004      	b.n	8005ee2 <_malloc_r+0x72>
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	42a2      	cmp	r2, r4
 8005edc:	bf0c      	ite	eq
 8005ede:	600b      	streq	r3, [r1, #0]
 8005ee0:	6053      	strne	r3, [r2, #4]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 fe3c 	bl	8006b60 <__malloc_unlock>
 8005ee8:	f104 000b 	add.w	r0, r4, #11
 8005eec:	1d23      	adds	r3, r4, #4
 8005eee:	f020 0007 	bic.w	r0, r0, #7
 8005ef2:	1ac2      	subs	r2, r0, r3
 8005ef4:	d0cc      	beq.n	8005e90 <_malloc_r+0x20>
 8005ef6:	1a1b      	subs	r3, r3, r0
 8005ef8:	50a3      	str	r3, [r4, r2]
 8005efa:	e7c9      	b.n	8005e90 <_malloc_r+0x20>
 8005efc:	4622      	mov	r2, r4
 8005efe:	6864      	ldr	r4, [r4, #4]
 8005f00:	e7cc      	b.n	8005e9c <_malloc_r+0x2c>
 8005f02:	1cc4      	adds	r4, r0, #3
 8005f04:	f024 0403 	bic.w	r4, r4, #3
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d0e3      	beq.n	8005ed4 <_malloc_r+0x64>
 8005f0c:	1a21      	subs	r1, r4, r0
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f000 fafc 	bl	800650c <_sbrk_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d1dd      	bne.n	8005ed4 <_malloc_r+0x64>
 8005f18:	e7cf      	b.n	8005eba <_malloc_r+0x4a>
 8005f1a:	bf00      	nop
 8005f1c:	20000250 	.word	0x20000250
 8005f20:	20000254 	.word	0x20000254

08005f24 <__sfputc_r>:
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	b410      	push	{r4}
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	6093      	str	r3, [r2, #8]
 8005f2e:	da07      	bge.n	8005f40 <__sfputc_r+0x1c>
 8005f30:	6994      	ldr	r4, [r2, #24]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	db01      	blt.n	8005f3a <__sfputc_r+0x16>
 8005f36:	290a      	cmp	r1, #10
 8005f38:	d102      	bne.n	8005f40 <__sfputc_r+0x1c>
 8005f3a:	bc10      	pop	{r4}
 8005f3c:	f000 bb08 	b.w	8006550 <__swbuf_r>
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	1c58      	adds	r0, r3, #1
 8005f44:	6010      	str	r0, [r2, #0]
 8005f46:	7019      	strb	r1, [r3, #0]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	bc10      	pop	{r4}
 8005f4c:	4770      	bx	lr

08005f4e <__sfputs_r>:
 8005f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f50:	4606      	mov	r6, r0
 8005f52:	460f      	mov	r7, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	18d5      	adds	r5, r2, r3
 8005f58:	42ac      	cmp	r4, r5
 8005f5a:	d101      	bne.n	8005f60 <__sfputs_r+0x12>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e007      	b.n	8005f70 <__sfputs_r+0x22>
 8005f60:	463a      	mov	r2, r7
 8005f62:	4630      	mov	r0, r6
 8005f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f68:	f7ff ffdc 	bl	8005f24 <__sfputc_r>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d1f3      	bne.n	8005f58 <__sfputs_r+0xa>
 8005f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f74 <_vfiprintf_r>:
 8005f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	4606      	mov	r6, r0
 8005f80:	b09d      	sub	sp, #116	; 0x74
 8005f82:	b118      	cbz	r0, 8005f8c <_vfiprintf_r+0x18>
 8005f84:	6983      	ldr	r3, [r0, #24]
 8005f86:	b90b      	cbnz	r3, 8005f8c <_vfiprintf_r+0x18>
 8005f88:	f000 fcd2 	bl	8006930 <__sinit>
 8005f8c:	4b89      	ldr	r3, [pc, #548]	; (80061b4 <_vfiprintf_r+0x240>)
 8005f8e:	429d      	cmp	r5, r3
 8005f90:	d11b      	bne.n	8005fca <_vfiprintf_r+0x56>
 8005f92:	6875      	ldr	r5, [r6, #4]
 8005f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	d405      	bmi.n	8005fa6 <_vfiprintf_r+0x32>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	059a      	lsls	r2, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_vfiprintf_r+0x32>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa2:	f000 fd63 	bl	8006a6c <__retarget_lock_acquire_recursive>
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	071b      	lsls	r3, r3, #28
 8005faa:	d501      	bpl.n	8005fb0 <_vfiprintf_r+0x3c>
 8005fac:	692b      	ldr	r3, [r5, #16]
 8005fae:	b9eb      	cbnz	r3, 8005fec <_vfiprintf_r+0x78>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 fb2c 	bl	8006610 <__swsetup_r>
 8005fb8:	b1c0      	cbz	r0, 8005fec <_vfiprintf_r+0x78>
 8005fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fbc:	07dc      	lsls	r4, r3, #31
 8005fbe:	d50e      	bpl.n	8005fde <_vfiprintf_r+0x6a>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc4:	b01d      	add	sp, #116	; 0x74
 8005fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fca:	4b7b      	ldr	r3, [pc, #492]	; (80061b8 <_vfiprintf_r+0x244>)
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	d101      	bne.n	8005fd4 <_vfiprintf_r+0x60>
 8005fd0:	68b5      	ldr	r5, [r6, #8]
 8005fd2:	e7df      	b.n	8005f94 <_vfiprintf_r+0x20>
 8005fd4:	4b79      	ldr	r3, [pc, #484]	; (80061bc <_vfiprintf_r+0x248>)
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf08      	it	eq
 8005fda:	68f5      	ldreq	r5, [r6, #12]
 8005fdc:	e7da      	b.n	8005f94 <_vfiprintf_r+0x20>
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	0598      	lsls	r0, r3, #22
 8005fe2:	d4ed      	bmi.n	8005fc0 <_vfiprintf_r+0x4c>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe6:	f000 fd42 	bl	8006a6e <__retarget_lock_release_recursive>
 8005fea:	e7e9      	b.n	8005fc0 <_vfiprintf_r+0x4c>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff6:	2330      	movs	r3, #48	; 0x30
 8005ff8:	f04f 0901 	mov.w	r9, #1
 8005ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006000:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80061c0 <_vfiprintf_r+0x24c>
 8006004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006008:	4623      	mov	r3, r4
 800600a:	469a      	mov	sl, r3
 800600c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006010:	b10a      	cbz	r2, 8006016 <_vfiprintf_r+0xa2>
 8006012:	2a25      	cmp	r2, #37	; 0x25
 8006014:	d1f9      	bne.n	800600a <_vfiprintf_r+0x96>
 8006016:	ebba 0b04 	subs.w	fp, sl, r4
 800601a:	d00b      	beq.n	8006034 <_vfiprintf_r+0xc0>
 800601c:	465b      	mov	r3, fp
 800601e:	4622      	mov	r2, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ff93 	bl	8005f4e <__sfputs_r>
 8006028:	3001      	adds	r0, #1
 800602a:	f000 80aa 	beq.w	8006182 <_vfiprintf_r+0x20e>
 800602e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006030:	445a      	add	r2, fp
 8006032:	9209      	str	r2, [sp, #36]	; 0x24
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a2 	beq.w	8006182 <_vfiprintf_r+0x20e>
 800603e:	2300      	movs	r3, #0
 8006040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006048:	f10a 0a01 	add.w	sl, sl, #1
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006054:	931a      	str	r3, [sp, #104]	; 0x68
 8006056:	4654      	mov	r4, sl
 8006058:	2205      	movs	r2, #5
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	4858      	ldr	r0, [pc, #352]	; (80061c0 <_vfiprintf_r+0x24c>)
 8006060:	f000 fd6a 	bl	8006b38 <memchr>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	b9d8      	cbnz	r0, 80060a0 <_vfiprintf_r+0x12c>
 8006068:	06d1      	lsls	r1, r2, #27
 800606a:	bf44      	itt	mi
 800606c:	2320      	movmi	r3, #32
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	bf44      	itt	mi
 8006076:	232b      	movmi	r3, #43	; 0x2b
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607c:	f89a 3000 	ldrb.w	r3, [sl]
 8006080:	2b2a      	cmp	r3, #42	; 0x2a
 8006082:	d015      	beq.n	80060b0 <_vfiprintf_r+0x13c>
 8006084:	4654      	mov	r4, sl
 8006086:	2000      	movs	r0, #0
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	9a07      	ldr	r2, [sp, #28]
 800608e:	4621      	mov	r1, r4
 8006090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006094:	3b30      	subs	r3, #48	; 0x30
 8006096:	2b09      	cmp	r3, #9
 8006098:	d94e      	bls.n	8006138 <_vfiprintf_r+0x1c4>
 800609a:	b1b0      	cbz	r0, 80060ca <_vfiprintf_r+0x156>
 800609c:	9207      	str	r2, [sp, #28]
 800609e:	e014      	b.n	80060ca <_vfiprintf_r+0x156>
 80060a0:	eba0 0308 	sub.w	r3, r0, r8
 80060a4:	fa09 f303 	lsl.w	r3, r9, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	46a2      	mov	sl, r4
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	e7d2      	b.n	8006056 <_vfiprintf_r+0xe2>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfbb      	ittet	lt
 80060bc:	425b      	neglt	r3, r3
 80060be:	f042 0202 	orrlt.w	r2, r2, #2
 80060c2:	9307      	strge	r3, [sp, #28]
 80060c4:	9307      	strlt	r3, [sp, #28]
 80060c6:	bfb8      	it	lt
 80060c8:	9204      	strlt	r2, [sp, #16]
 80060ca:	7823      	ldrb	r3, [r4, #0]
 80060cc:	2b2e      	cmp	r3, #46	; 0x2e
 80060ce:	d10c      	bne.n	80060ea <_vfiprintf_r+0x176>
 80060d0:	7863      	ldrb	r3, [r4, #1]
 80060d2:	2b2a      	cmp	r3, #42	; 0x2a
 80060d4:	d135      	bne.n	8006142 <_vfiprintf_r+0x1ce>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3402      	adds	r4, #2
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	9203      	str	r2, [sp, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bfb8      	it	lt
 80060e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80061d0 <_vfiprintf_r+0x25c>
 80060ee:	2203      	movs	r2, #3
 80060f0:	4650      	mov	r0, sl
 80060f2:	7821      	ldrb	r1, [r4, #0]
 80060f4:	f000 fd20 	bl	8006b38 <memchr>
 80060f8:	b140      	cbz	r0, 800610c <_vfiprintf_r+0x198>
 80060fa:	2340      	movs	r3, #64	; 0x40
 80060fc:	eba0 000a 	sub.w	r0, r0, sl
 8006100:	fa03 f000 	lsl.w	r0, r3, r0
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	3401      	adds	r4, #1
 8006108:	4303      	orrs	r3, r0
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	2206      	movs	r2, #6
 8006112:	482c      	ldr	r0, [pc, #176]	; (80061c4 <_vfiprintf_r+0x250>)
 8006114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006118:	f000 fd0e 	bl	8006b38 <memchr>
 800611c:	2800      	cmp	r0, #0
 800611e:	d03f      	beq.n	80061a0 <_vfiprintf_r+0x22c>
 8006120:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <_vfiprintf_r+0x254>)
 8006122:	bb1b      	cbnz	r3, 800616c <_vfiprintf_r+0x1f8>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	3307      	adds	r3, #7
 8006128:	f023 0307 	bic.w	r3, r3, #7
 800612c:	3308      	adds	r3, #8
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	443b      	add	r3, r7
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
 8006136:	e767      	b.n	8006008 <_vfiprintf_r+0x94>
 8006138:	460c      	mov	r4, r1
 800613a:	2001      	movs	r0, #1
 800613c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006140:	e7a5      	b.n	800608e <_vfiprintf_r+0x11a>
 8006142:	2300      	movs	r3, #0
 8006144:	f04f 0c0a 	mov.w	ip, #10
 8006148:	4619      	mov	r1, r3
 800614a:	3401      	adds	r4, #1
 800614c:	9305      	str	r3, [sp, #20]
 800614e:	4620      	mov	r0, r4
 8006150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006154:	3a30      	subs	r2, #48	; 0x30
 8006156:	2a09      	cmp	r2, #9
 8006158:	d903      	bls.n	8006162 <_vfiprintf_r+0x1ee>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0c5      	beq.n	80060ea <_vfiprintf_r+0x176>
 800615e:	9105      	str	r1, [sp, #20]
 8006160:	e7c3      	b.n	80060ea <_vfiprintf_r+0x176>
 8006162:	4604      	mov	r4, r0
 8006164:	2301      	movs	r3, #1
 8006166:	fb0c 2101 	mla	r1, ip, r1, r2
 800616a:	e7f0      	b.n	800614e <_vfiprintf_r+0x1da>
 800616c:	ab03      	add	r3, sp, #12
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	462a      	mov	r2, r5
 8006172:	4630      	mov	r0, r6
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <_vfiprintf_r+0x258>)
 8006176:	a904      	add	r1, sp, #16
 8006178:	f3af 8000 	nop.w
 800617c:	4607      	mov	r7, r0
 800617e:	1c78      	adds	r0, r7, #1
 8006180:	d1d6      	bne.n	8006130 <_vfiprintf_r+0x1bc>
 8006182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006184:	07d9      	lsls	r1, r3, #31
 8006186:	d405      	bmi.n	8006194 <_vfiprintf_r+0x220>
 8006188:	89ab      	ldrh	r3, [r5, #12]
 800618a:	059a      	lsls	r2, r3, #22
 800618c:	d402      	bmi.n	8006194 <_vfiprintf_r+0x220>
 800618e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006190:	f000 fc6d 	bl	8006a6e <__retarget_lock_release_recursive>
 8006194:	89ab      	ldrh	r3, [r5, #12]
 8006196:	065b      	lsls	r3, r3, #25
 8006198:	f53f af12 	bmi.w	8005fc0 <_vfiprintf_r+0x4c>
 800619c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619e:	e711      	b.n	8005fc4 <_vfiprintf_r+0x50>
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	462a      	mov	r2, r5
 80061a6:	4630      	mov	r0, r6
 80061a8:	4b08      	ldr	r3, [pc, #32]	; (80061cc <_vfiprintf_r+0x258>)
 80061aa:	a904      	add	r1, sp, #16
 80061ac:	f000 f882 	bl	80062b4 <_printf_i>
 80061b0:	e7e4      	b.n	800617c <_vfiprintf_r+0x208>
 80061b2:	bf00      	nop
 80061b4:	08007200 	.word	0x08007200
 80061b8:	08007220 	.word	0x08007220
 80061bc:	080071e0 	.word	0x080071e0
 80061c0:	080071ac 	.word	0x080071ac
 80061c4:	080071b6 	.word	0x080071b6
 80061c8:	00000000 	.word	0x00000000
 80061cc:	08005f4f 	.word	0x08005f4f
 80061d0:	080071b2 	.word	0x080071b2

080061d4 <_printf_common>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	4616      	mov	r6, r2
 80061da:	4699      	mov	r9, r3
 80061dc:	688a      	ldr	r2, [r1, #8]
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	4607      	mov	r7, r0
 80061e2:	4293      	cmp	r3, r2
 80061e4:	bfb8      	it	lt
 80061e6:	4613      	movlt	r3, r2
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ee:	460c      	mov	r4, r1
 80061f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f4:	b10a      	cbz	r2, 80061fa <_printf_common+0x26>
 80061f6:	3301      	adds	r3, #1
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	6833      	ldrmi	r3, [r6, #0]
 8006202:	3302      	addmi	r3, #2
 8006204:	6033      	strmi	r3, [r6, #0]
 8006206:	6825      	ldr	r5, [r4, #0]
 8006208:	f015 0506 	ands.w	r5, r5, #6
 800620c:	d106      	bne.n	800621c <_printf_common+0x48>
 800620e:	f104 0a19 	add.w	sl, r4, #25
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	6832      	ldr	r2, [r6, #0]
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	42ab      	cmp	r3, r5
 800621a:	dc28      	bgt.n	800626e <_printf_common+0x9a>
 800621c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006220:	1e13      	subs	r3, r2, #0
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	bf18      	it	ne
 8006226:	2301      	movne	r3, #1
 8006228:	0692      	lsls	r2, r2, #26
 800622a:	d42d      	bmi.n	8006288 <_printf_common+0xb4>
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d020      	beq.n	800627c <_printf_common+0xa8>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	68e5      	ldr	r5, [r4, #12]
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	2b04      	cmp	r3, #4
 8006244:	bf18      	it	ne
 8006246:	2500      	movne	r5, #0
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	f04f 0600 	mov.w	r6, #0
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	bf08      	it	eq
 8006252:	1aad      	subeq	r5, r5, r2
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	bf08      	it	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	4293      	cmp	r3, r2
 800625e:	bfc4      	itt	gt
 8006260:	1a9b      	subgt	r3, r3, r2
 8006262:	18ed      	addgt	r5, r5, r3
 8006264:	341a      	adds	r4, #26
 8006266:	42b5      	cmp	r5, r6
 8006268:	d11a      	bne.n	80062a0 <_printf_common+0xcc>
 800626a:	2000      	movs	r0, #0
 800626c:	e008      	b.n	8006280 <_printf_common+0xac>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4649      	mov	r1, r9
 8006274:	4638      	mov	r0, r7
 8006276:	47c0      	blx	r8
 8006278:	3001      	adds	r0, #1
 800627a:	d103      	bne.n	8006284 <_printf_common+0xb0>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	3501      	adds	r5, #1
 8006286:	e7c4      	b.n	8006212 <_printf_common+0x3e>
 8006288:	2030      	movs	r0, #48	; 0x30
 800628a:	18e1      	adds	r1, r4, r3
 800628c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006296:	4422      	add	r2, r4
 8006298:	3302      	adds	r3, #2
 800629a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800629e:	e7c5      	b.n	800622c <_printf_common+0x58>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	4649      	mov	r1, r9
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa8>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d9      	b.n	8006266 <_printf_common+0x92>
	...

080062b4 <_printf_i>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	7e27      	ldrb	r7, [r4, #24]
 80062bc:	4691      	mov	r9, r2
 80062be:	2f78      	cmp	r7, #120	; 0x78
 80062c0:	4680      	mov	r8, r0
 80062c2:	469a      	mov	sl, r3
 80062c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ca:	d807      	bhi.n	80062dc <_printf_i+0x28>
 80062cc:	2f62      	cmp	r7, #98	; 0x62
 80062ce:	d80a      	bhi.n	80062e6 <_printf_i+0x32>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f000 80d9 	beq.w	8006488 <_printf_i+0x1d4>
 80062d6:	2f58      	cmp	r7, #88	; 0x58
 80062d8:	f000 80a4 	beq.w	8006424 <_printf_i+0x170>
 80062dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062e4:	e03a      	b.n	800635c <_printf_i+0xa8>
 80062e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ea:	2b15      	cmp	r3, #21
 80062ec:	d8f6      	bhi.n	80062dc <_printf_i+0x28>
 80062ee:	a001      	add	r0, pc, #4	; (adr r0, 80062f4 <_printf_i+0x40>)
 80062f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	08006361 	.word	0x08006361
 80062fc:	080062dd 	.word	0x080062dd
 8006300:	080062dd 	.word	0x080062dd
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	08006361 	.word	0x08006361
 8006310:	080062dd 	.word	0x080062dd
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	0800646f 	.word	0x0800646f
 8006324:	08006391 	.word	0x08006391
 8006328:	08006451 	.word	0x08006451
 800632c:	080062dd 	.word	0x080062dd
 8006330:	080062dd 	.word	0x080062dd
 8006334:	08006491 	.word	0x08006491
 8006338:	080062dd 	.word	0x080062dd
 800633c:	08006391 	.word	0x08006391
 8006340:	080062dd 	.word	0x080062dd
 8006344:	080062dd 	.word	0x080062dd
 8006348:	08006459 	.word	0x08006459
 800634c:	680b      	ldr	r3, [r1, #0]
 800634e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	600a      	str	r2, [r1, #0]
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e0a4      	b.n	80064aa <_printf_i+0x1f6>
 8006360:	6825      	ldr	r5, [r4, #0]
 8006362:	6808      	ldr	r0, [r1, #0]
 8006364:	062e      	lsls	r6, r5, #24
 8006366:	f100 0304 	add.w	r3, r0, #4
 800636a:	d50a      	bpl.n	8006382 <_printf_i+0xce>
 800636c:	6805      	ldr	r5, [r0, #0]
 800636e:	600b      	str	r3, [r1, #0]
 8006370:	2d00      	cmp	r5, #0
 8006372:	da03      	bge.n	800637c <_printf_i+0xc8>
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	426d      	negs	r5, r5
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	230a      	movs	r3, #10
 800637e:	485e      	ldr	r0, [pc, #376]	; (80064f8 <_printf_i+0x244>)
 8006380:	e019      	b.n	80063b6 <_printf_i+0x102>
 8006382:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006386:	6805      	ldr	r5, [r0, #0]
 8006388:	600b      	str	r3, [r1, #0]
 800638a:	bf18      	it	ne
 800638c:	b22d      	sxthne	r5, r5
 800638e:	e7ef      	b.n	8006370 <_printf_i+0xbc>
 8006390:	680b      	ldr	r3, [r1, #0]
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	1d18      	adds	r0, r3, #4
 8006396:	6008      	str	r0, [r1, #0]
 8006398:	0628      	lsls	r0, r5, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xec>
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0xf2>
 80063a0:	0669      	lsls	r1, r5, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xe8>
 80063a4:	881d      	ldrh	r5, [r3, #0]
 80063a6:	2f6f      	cmp	r7, #111	; 0x6f
 80063a8:	bf0c      	ite	eq
 80063aa:	2308      	moveq	r3, #8
 80063ac:	230a      	movne	r3, #10
 80063ae:	4852      	ldr	r0, [pc, #328]	; (80064f8 <_printf_i+0x244>)
 80063b0:	2100      	movs	r1, #0
 80063b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063b6:	6866      	ldr	r6, [r4, #4]
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	bfa8      	it	ge
 80063bc:	6821      	ldrge	r1, [r4, #0]
 80063be:	60a6      	str	r6, [r4, #8]
 80063c0:	bfa4      	itt	ge
 80063c2:	f021 0104 	bicge.w	r1, r1, #4
 80063c6:	6021      	strge	r1, [r4, #0]
 80063c8:	b90d      	cbnz	r5, 80063ce <_printf_i+0x11a>
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	d04d      	beq.n	800646a <_printf_i+0x1b6>
 80063ce:	4616      	mov	r6, r2
 80063d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80063d4:	fb03 5711 	mls	r7, r3, r1, r5
 80063d8:	5dc7      	ldrb	r7, [r0, r7]
 80063da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063de:	462f      	mov	r7, r5
 80063e0:	42bb      	cmp	r3, r7
 80063e2:	460d      	mov	r5, r1
 80063e4:	d9f4      	bls.n	80063d0 <_printf_i+0x11c>
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d10b      	bne.n	8006402 <_printf_i+0x14e>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	07df      	lsls	r7, r3, #31
 80063ee:	d508      	bpl.n	8006402 <_printf_i+0x14e>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	6861      	ldr	r1, [r4, #4]
 80063f4:	4299      	cmp	r1, r3
 80063f6:	bfde      	ittt	le
 80063f8:	2330      	movle	r3, #48	; 0x30
 80063fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063fe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006402:	1b92      	subs	r2, r2, r6
 8006404:	6122      	str	r2, [r4, #16]
 8006406:	464b      	mov	r3, r9
 8006408:	4621      	mov	r1, r4
 800640a:	4640      	mov	r0, r8
 800640c:	f8cd a000 	str.w	sl, [sp]
 8006410:	aa03      	add	r2, sp, #12
 8006412:	f7ff fedf 	bl	80061d4 <_printf_common>
 8006416:	3001      	adds	r0, #1
 8006418:	d14c      	bne.n	80064b4 <_printf_i+0x200>
 800641a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800641e:	b004      	add	sp, #16
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	4834      	ldr	r0, [pc, #208]	; (80064f8 <_printf_i+0x244>)
 8006426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800642a:	680e      	ldr	r6, [r1, #0]
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006432:	061f      	lsls	r7, r3, #24
 8006434:	600e      	str	r6, [r1, #0]
 8006436:	d514      	bpl.n	8006462 <_printf_i+0x1ae>
 8006438:	07d9      	lsls	r1, r3, #31
 800643a:	bf44      	itt	mi
 800643c:	f043 0320 	orrmi.w	r3, r3, #32
 8006440:	6023      	strmi	r3, [r4, #0]
 8006442:	b91d      	cbnz	r5, 800644c <_printf_i+0x198>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	2310      	movs	r3, #16
 800644e:	e7af      	b.n	80063b0 <_printf_i+0xfc>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f043 0320 	orr.w	r3, r3, #32
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	2378      	movs	r3, #120	; 0x78
 800645a:	4828      	ldr	r0, [pc, #160]	; (80064fc <_printf_i+0x248>)
 800645c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006460:	e7e3      	b.n	800642a <_printf_i+0x176>
 8006462:	065e      	lsls	r6, r3, #25
 8006464:	bf48      	it	mi
 8006466:	b2ad      	uxthmi	r5, r5
 8006468:	e7e6      	b.n	8006438 <_printf_i+0x184>
 800646a:	4616      	mov	r6, r2
 800646c:	e7bb      	b.n	80063e6 <_printf_i+0x132>
 800646e:	680b      	ldr	r3, [r1, #0]
 8006470:	6826      	ldr	r6, [r4, #0]
 8006472:	1d1d      	adds	r5, r3, #4
 8006474:	6960      	ldr	r0, [r4, #20]
 8006476:	600d      	str	r5, [r1, #0]
 8006478:	0635      	lsls	r5, r6, #24
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	d501      	bpl.n	8006482 <_printf_i+0x1ce>
 800647e:	6018      	str	r0, [r3, #0]
 8006480:	e002      	b.n	8006488 <_printf_i+0x1d4>
 8006482:	0671      	lsls	r1, r6, #25
 8006484:	d5fb      	bpl.n	800647e <_printf_i+0x1ca>
 8006486:	8018      	strh	r0, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	4616      	mov	r6, r2
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	e7ba      	b.n	8006406 <_printf_i+0x152>
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	600a      	str	r2, [r1, #0]
 8006496:	681e      	ldr	r6, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4630      	mov	r0, r6
 800649c:	6862      	ldr	r2, [r4, #4]
 800649e:	f000 fb4b 	bl	8006b38 <memchr>
 80064a2:	b108      	cbz	r0, 80064a8 <_printf_i+0x1f4>
 80064a4:	1b80      	subs	r0, r0, r6
 80064a6:	6060      	str	r0, [r4, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2300      	movs	r3, #0
 80064ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b2:	e7a8      	b.n	8006406 <_printf_i+0x152>
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	47d0      	blx	sl
 80064be:	3001      	adds	r0, #1
 80064c0:	d0ab      	beq.n	800641a <_printf_i+0x166>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	079b      	lsls	r3, r3, #30
 80064c6:	d413      	bmi.n	80064f0 <_printf_i+0x23c>
 80064c8:	68e0      	ldr	r0, [r4, #12]
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	4298      	cmp	r0, r3
 80064ce:	bfb8      	it	lt
 80064d0:	4618      	movlt	r0, r3
 80064d2:	e7a4      	b.n	800641e <_printf_i+0x16a>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4632      	mov	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	47d0      	blx	sl
 80064de:	3001      	adds	r0, #1
 80064e0:	d09b      	beq.n	800641a <_printf_i+0x166>
 80064e2:	3501      	adds	r5, #1
 80064e4:	68e3      	ldr	r3, [r4, #12]
 80064e6:	9903      	ldr	r1, [sp, #12]
 80064e8:	1a5b      	subs	r3, r3, r1
 80064ea:	42ab      	cmp	r3, r5
 80064ec:	dcf2      	bgt.n	80064d4 <_printf_i+0x220>
 80064ee:	e7eb      	b.n	80064c8 <_printf_i+0x214>
 80064f0:	2500      	movs	r5, #0
 80064f2:	f104 0619 	add.w	r6, r4, #25
 80064f6:	e7f5      	b.n	80064e4 <_printf_i+0x230>
 80064f8:	080071bd 	.word	0x080071bd
 80064fc:	080071ce 	.word	0x080071ce

08006500 <nan>:
 8006500:	2000      	movs	r0, #0
 8006502:	4901      	ldr	r1, [pc, #4]	; (8006508 <nan+0x8>)
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	7ff80000 	.word	0x7ff80000

0800650c <_sbrk_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	2300      	movs	r3, #0
 8006510:	4d05      	ldr	r5, [pc, #20]	; (8006528 <_sbrk_r+0x1c>)
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	f7fb f972 	bl	8001800 <_sbrk>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_sbrk_r+0x1a>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_sbrk_r+0x1a>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	20000354 	.word	0x20000354

0800652c <strncmp>:
 800652c:	b510      	push	{r4, lr}
 800652e:	b16a      	cbz	r2, 800654c <strncmp+0x20>
 8006530:	3901      	subs	r1, #1
 8006532:	1884      	adds	r4, r0, r2
 8006534:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006538:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800653c:	4293      	cmp	r3, r2
 800653e:	d103      	bne.n	8006548 <strncmp+0x1c>
 8006540:	42a0      	cmp	r0, r4
 8006542:	d001      	beq.n	8006548 <strncmp+0x1c>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f5      	bne.n	8006534 <strncmp+0x8>
 8006548:	1a98      	subs	r0, r3, r2
 800654a:	bd10      	pop	{r4, pc}
 800654c:	4610      	mov	r0, r2
 800654e:	e7fc      	b.n	800654a <strncmp+0x1e>

08006550 <__swbuf_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	460e      	mov	r6, r1
 8006554:	4614      	mov	r4, r2
 8006556:	4605      	mov	r5, r0
 8006558:	b118      	cbz	r0, 8006562 <__swbuf_r+0x12>
 800655a:	6983      	ldr	r3, [r0, #24]
 800655c:	b90b      	cbnz	r3, 8006562 <__swbuf_r+0x12>
 800655e:	f000 f9e7 	bl	8006930 <__sinit>
 8006562:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <__swbuf_r+0x98>)
 8006564:	429c      	cmp	r4, r3
 8006566:	d12b      	bne.n	80065c0 <__swbuf_r+0x70>
 8006568:	686c      	ldr	r4, [r5, #4]
 800656a:	69a3      	ldr	r3, [r4, #24]
 800656c:	60a3      	str	r3, [r4, #8]
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	071a      	lsls	r2, r3, #28
 8006572:	d52f      	bpl.n	80065d4 <__swbuf_r+0x84>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	b36b      	cbz	r3, 80065d4 <__swbuf_r+0x84>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	b2f6      	uxtb	r6, r6
 800657e:	1ac0      	subs	r0, r0, r3
 8006580:	6963      	ldr	r3, [r4, #20]
 8006582:	4637      	mov	r7, r6
 8006584:	4283      	cmp	r3, r0
 8006586:	dc04      	bgt.n	8006592 <__swbuf_r+0x42>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f93c 	bl	8006808 <_fflush_r>
 8006590:	bb30      	cbnz	r0, 80065e0 <__swbuf_r+0x90>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	3001      	adds	r0, #1
 8006596:	3b01      	subs	r3, #1
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	701e      	strb	r6, [r3, #0]
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	4283      	cmp	r3, r0
 80065a6:	d004      	beq.n	80065b2 <__swbuf_r+0x62>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	07db      	lsls	r3, r3, #31
 80065ac:	d506      	bpl.n	80065bc <__swbuf_r+0x6c>
 80065ae:	2e0a      	cmp	r6, #10
 80065b0:	d104      	bne.n	80065bc <__swbuf_r+0x6c>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f927 	bl	8006808 <_fflush_r>
 80065ba:	b988      	cbnz	r0, 80065e0 <__swbuf_r+0x90>
 80065bc:	4638      	mov	r0, r7
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <__swbuf_r+0x9c>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d101      	bne.n	80065ca <__swbuf_r+0x7a>
 80065c6:	68ac      	ldr	r4, [r5, #8]
 80065c8:	e7cf      	b.n	800656a <__swbuf_r+0x1a>
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <__swbuf_r+0xa0>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	bf08      	it	eq
 80065d0:	68ec      	ldreq	r4, [r5, #12]
 80065d2:	e7ca      	b.n	800656a <__swbuf_r+0x1a>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f81a 	bl	8006610 <__swsetup_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0cb      	beq.n	8006578 <__swbuf_r+0x28>
 80065e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065e4:	e7ea      	b.n	80065bc <__swbuf_r+0x6c>
 80065e6:	bf00      	nop
 80065e8:	08007200 	.word	0x08007200
 80065ec:	08007220 	.word	0x08007220
 80065f0:	080071e0 	.word	0x080071e0

080065f4 <__ascii_wctomb>:
 80065f4:	4603      	mov	r3, r0
 80065f6:	4608      	mov	r0, r1
 80065f8:	b141      	cbz	r1, 800660c <__ascii_wctomb+0x18>
 80065fa:	2aff      	cmp	r2, #255	; 0xff
 80065fc:	d904      	bls.n	8006608 <__ascii_wctomb+0x14>
 80065fe:	228a      	movs	r2, #138	; 0x8a
 8006600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	4770      	bx	lr
 8006608:	2001      	movs	r0, #1
 800660a:	700a      	strb	r2, [r1, #0]
 800660c:	4770      	bx	lr
	...

08006610 <__swsetup_r>:
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <__swsetup_r+0xcc>)
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	681d      	ldr	r5, [r3, #0]
 8006616:	4606      	mov	r6, r0
 8006618:	460c      	mov	r4, r1
 800661a:	b125      	cbz	r5, 8006626 <__swsetup_r+0x16>
 800661c:	69ab      	ldr	r3, [r5, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__swsetup_r+0x16>
 8006620:	4628      	mov	r0, r5
 8006622:	f000 f985 	bl	8006930 <__sinit>
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <__swsetup_r+0xd0>)
 8006628:	429c      	cmp	r4, r3
 800662a:	d10f      	bne.n	800664c <__swsetup_r+0x3c>
 800662c:	686c      	ldr	r4, [r5, #4]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d42c      	bmi.n	8006692 <__swsetup_r+0x82>
 8006638:	06dd      	lsls	r5, r3, #27
 800663a:	d411      	bmi.n	8006660 <__swsetup_r+0x50>
 800663c:	2309      	movs	r3, #9
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	e03e      	b.n	80066ca <__swsetup_r+0xba>
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <__swsetup_r+0xd4>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d101      	bne.n	8006656 <__swsetup_r+0x46>
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	e7eb      	b.n	800662e <__swsetup_r+0x1e>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <__swsetup_r+0xd8>)
 8006658:	429c      	cmp	r4, r3
 800665a:	bf08      	it	eq
 800665c:	68ec      	ldreq	r4, [r5, #12]
 800665e:	e7e6      	b.n	800662e <__swsetup_r+0x1e>
 8006660:	0758      	lsls	r0, r3, #29
 8006662:	d512      	bpl.n	800668a <__swsetup_r+0x7a>
 8006664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006666:	b141      	cbz	r1, 800667a <__swsetup_r+0x6a>
 8006668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x66>
 8006670:	4630      	mov	r0, r6
 8006672:	f7ff fbb1 	bl	8005dd8 <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	; 0x34
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0308 	orr.w	r3, r3, #8
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	b94b      	cbnz	r3, 80066aa <__swsetup_r+0x9a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d003      	beq.n	80066aa <__swsetup_r+0x9a>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 fa07 	bl	8006ab8 <__smakebuf_r>
 80066aa:	89a0      	ldrh	r0, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	f010 0301 	ands.w	r3, r0, #1
 80066b4:	d00a      	beq.n	80066cc <__swsetup_r+0xbc>
 80066b6:	2300      	movs	r3, #0
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	425b      	negs	r3, r3
 80066be:	61a3      	str	r3, [r4, #24]
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	b943      	cbnz	r3, 80066d6 <__swsetup_r+0xc6>
 80066c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066c8:	d1ba      	bne.n	8006640 <__swsetup_r+0x30>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	0781      	lsls	r1, r0, #30
 80066ce:	bf58      	it	pl
 80066d0:	6963      	ldrpl	r3, [r4, #20]
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	e7f4      	b.n	80066c0 <__swsetup_r+0xb0>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e7f7      	b.n	80066ca <__swsetup_r+0xba>
 80066da:	bf00      	nop
 80066dc:	2000000c 	.word	0x2000000c
 80066e0:	08007200 	.word	0x08007200
 80066e4:	08007220 	.word	0x08007220
 80066e8:	080071e0 	.word	0x080071e0

080066ec <abort>:
 80066ec:	2006      	movs	r0, #6
 80066ee:	b508      	push	{r3, lr}
 80066f0:	f000 fa64 	bl	8006bbc <raise>
 80066f4:	2001      	movs	r0, #1
 80066f6:	f7fb f810 	bl	800171a <_exit>
	...

080066fc <__sflush_r>:
 80066fc:	898a      	ldrh	r2, [r1, #12]
 80066fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006702:	4605      	mov	r5, r0
 8006704:	0710      	lsls	r0, r2, #28
 8006706:	460c      	mov	r4, r1
 8006708:	d458      	bmi.n	80067bc <__sflush_r+0xc0>
 800670a:	684b      	ldr	r3, [r1, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dc05      	bgt.n	800671c <__sflush_r+0x20>
 8006710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	dc02      	bgt.n	800671c <__sflush_r+0x20>
 8006716:	2000      	movs	r0, #0
 8006718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800671e:	2e00      	cmp	r6, #0
 8006720:	d0f9      	beq.n	8006716 <__sflush_r+0x1a>
 8006722:	2300      	movs	r3, #0
 8006724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006728:	682f      	ldr	r7, [r5, #0]
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	d032      	beq.n	8006794 <__sflush_r+0x98>
 800672e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	075a      	lsls	r2, r3, #29
 8006734:	d505      	bpl.n	8006742 <__sflush_r+0x46>
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	1ac0      	subs	r0, r0, r3
 800673a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800673c:	b10b      	cbz	r3, 8006742 <__sflush_r+0x46>
 800673e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006740:	1ac0      	subs	r0, r0, r3
 8006742:	2300      	movs	r3, #0
 8006744:	4602      	mov	r2, r0
 8006746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006748:	4628      	mov	r0, r5
 800674a:	6a21      	ldr	r1, [r4, #32]
 800674c:	47b0      	blx	r6
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	d106      	bne.n	8006762 <__sflush_r+0x66>
 8006754:	6829      	ldr	r1, [r5, #0]
 8006756:	291d      	cmp	r1, #29
 8006758:	d82c      	bhi.n	80067b4 <__sflush_r+0xb8>
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <__sflush_r+0x108>)
 800675c:	40ca      	lsrs	r2, r1
 800675e:	07d6      	lsls	r6, r2, #31
 8006760:	d528      	bpl.n	80067b4 <__sflush_r+0xb8>
 8006762:	2200      	movs	r2, #0
 8006764:	6062      	str	r2, [r4, #4]
 8006766:	6922      	ldr	r2, [r4, #16]
 8006768:	04d9      	lsls	r1, r3, #19
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	d504      	bpl.n	8006778 <__sflush_r+0x7c>
 800676e:	1c42      	adds	r2, r0, #1
 8006770:	d101      	bne.n	8006776 <__sflush_r+0x7a>
 8006772:	682b      	ldr	r3, [r5, #0]
 8006774:	b903      	cbnz	r3, 8006778 <__sflush_r+0x7c>
 8006776:	6560      	str	r0, [r4, #84]	; 0x54
 8006778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800677a:	602f      	str	r7, [r5, #0]
 800677c:	2900      	cmp	r1, #0
 800677e:	d0ca      	beq.n	8006716 <__sflush_r+0x1a>
 8006780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006784:	4299      	cmp	r1, r3
 8006786:	d002      	beq.n	800678e <__sflush_r+0x92>
 8006788:	4628      	mov	r0, r5
 800678a:	f7ff fb25 	bl	8005dd8 <_free_r>
 800678e:	2000      	movs	r0, #0
 8006790:	6360      	str	r0, [r4, #52]	; 0x34
 8006792:	e7c1      	b.n	8006718 <__sflush_r+0x1c>
 8006794:	6a21      	ldr	r1, [r4, #32]
 8006796:	2301      	movs	r3, #1
 8006798:	4628      	mov	r0, r5
 800679a:	47b0      	blx	r6
 800679c:	1c41      	adds	r1, r0, #1
 800679e:	d1c7      	bne.n	8006730 <__sflush_r+0x34>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0c4      	beq.n	8006730 <__sflush_r+0x34>
 80067a6:	2b1d      	cmp	r3, #29
 80067a8:	d001      	beq.n	80067ae <__sflush_r+0xb2>
 80067aa:	2b16      	cmp	r3, #22
 80067ac:	d101      	bne.n	80067b2 <__sflush_r+0xb6>
 80067ae:	602f      	str	r7, [r5, #0]
 80067b0:	e7b1      	b.n	8006716 <__sflush_r+0x1a>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	e7ad      	b.n	8006718 <__sflush_r+0x1c>
 80067bc:	690f      	ldr	r7, [r1, #16]
 80067be:	2f00      	cmp	r7, #0
 80067c0:	d0a9      	beq.n	8006716 <__sflush_r+0x1a>
 80067c2:	0793      	lsls	r3, r2, #30
 80067c4:	bf18      	it	ne
 80067c6:	2300      	movne	r3, #0
 80067c8:	680e      	ldr	r6, [r1, #0]
 80067ca:	bf08      	it	eq
 80067cc:	694b      	ldreq	r3, [r1, #20]
 80067ce:	eba6 0807 	sub.w	r8, r6, r7
 80067d2:	600f      	str	r7, [r1, #0]
 80067d4:	608b      	str	r3, [r1, #8]
 80067d6:	f1b8 0f00 	cmp.w	r8, #0
 80067da:	dd9c      	ble.n	8006716 <__sflush_r+0x1a>
 80067dc:	4643      	mov	r3, r8
 80067de:	463a      	mov	r2, r7
 80067e0:	4628      	mov	r0, r5
 80067e2:	6a21      	ldr	r1, [r4, #32]
 80067e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067e6:	47b0      	blx	r6
 80067e8:	2800      	cmp	r0, #0
 80067ea:	dc06      	bgt.n	80067fa <__sflush_r+0xfe>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	e78e      	b.n	8006718 <__sflush_r+0x1c>
 80067fa:	4407      	add	r7, r0
 80067fc:	eba8 0800 	sub.w	r8, r8, r0
 8006800:	e7e9      	b.n	80067d6 <__sflush_r+0xda>
 8006802:	bf00      	nop
 8006804:	20400001 	.word	0x20400001

08006808 <_fflush_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	4605      	mov	r5, r0
 800680e:	460c      	mov	r4, r1
 8006810:	b913      	cbnz	r3, 8006818 <_fflush_r+0x10>
 8006812:	2500      	movs	r5, #0
 8006814:	4628      	mov	r0, r5
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	b118      	cbz	r0, 8006822 <_fflush_r+0x1a>
 800681a:	6983      	ldr	r3, [r0, #24]
 800681c:	b90b      	cbnz	r3, 8006822 <_fflush_r+0x1a>
 800681e:	f000 f887 	bl	8006930 <__sinit>
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <_fflush_r+0x6c>)
 8006824:	429c      	cmp	r4, r3
 8006826:	d11b      	bne.n	8006860 <_fflush_r+0x58>
 8006828:	686c      	ldr	r4, [r5, #4]
 800682a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0ef      	beq.n	8006812 <_fflush_r+0xa>
 8006832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006834:	07d0      	lsls	r0, r2, #31
 8006836:	d404      	bmi.n	8006842 <_fflush_r+0x3a>
 8006838:	0599      	lsls	r1, r3, #22
 800683a:	d402      	bmi.n	8006842 <_fflush_r+0x3a>
 800683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683e:	f000 f915 	bl	8006a6c <__retarget_lock_acquire_recursive>
 8006842:	4628      	mov	r0, r5
 8006844:	4621      	mov	r1, r4
 8006846:	f7ff ff59 	bl	80066fc <__sflush_r>
 800684a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800684c:	4605      	mov	r5, r0
 800684e:	07da      	lsls	r2, r3, #31
 8006850:	d4e0      	bmi.n	8006814 <_fflush_r+0xc>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	059b      	lsls	r3, r3, #22
 8006856:	d4dd      	bmi.n	8006814 <_fflush_r+0xc>
 8006858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685a:	f000 f908 	bl	8006a6e <__retarget_lock_release_recursive>
 800685e:	e7d9      	b.n	8006814 <_fflush_r+0xc>
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_fflush_r+0x70>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d101      	bne.n	800686a <_fflush_r+0x62>
 8006866:	68ac      	ldr	r4, [r5, #8]
 8006868:	e7df      	b.n	800682a <_fflush_r+0x22>
 800686a:	4b04      	ldr	r3, [pc, #16]	; (800687c <_fflush_r+0x74>)
 800686c:	429c      	cmp	r4, r3
 800686e:	bf08      	it	eq
 8006870:	68ec      	ldreq	r4, [r5, #12]
 8006872:	e7da      	b.n	800682a <_fflush_r+0x22>
 8006874:	08007200 	.word	0x08007200
 8006878:	08007220 	.word	0x08007220
 800687c:	080071e0 	.word	0x080071e0

08006880 <std>:
 8006880:	2300      	movs	r3, #0
 8006882:	b510      	push	{r4, lr}
 8006884:	4604      	mov	r4, r0
 8006886:	e9c0 3300 	strd	r3, r3, [r0]
 800688a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800688e:	6083      	str	r3, [r0, #8]
 8006890:	8181      	strh	r1, [r0, #12]
 8006892:	6643      	str	r3, [r0, #100]	; 0x64
 8006894:	81c2      	strh	r2, [r0, #14]
 8006896:	6183      	str	r3, [r0, #24]
 8006898:	4619      	mov	r1, r3
 800689a:	2208      	movs	r2, #8
 800689c:	305c      	adds	r0, #92	; 0x5c
 800689e:	f7fd faff 	bl	8003ea0 <memset>
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <std+0x38>)
 80068a4:	6224      	str	r4, [r4, #32]
 80068a6:	6263      	str	r3, [r4, #36]	; 0x24
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <std+0x3c>)
 80068aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <std+0x40>)
 80068ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <std+0x44>)
 80068b2:	6323      	str	r3, [r4, #48]	; 0x30
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	bf00      	nop
 80068b8:	08006bf5 	.word	0x08006bf5
 80068bc:	08006c17 	.word	0x08006c17
 80068c0:	08006c4f 	.word	0x08006c4f
 80068c4:	08006c73 	.word	0x08006c73

080068c8 <_cleanup_r>:
 80068c8:	4901      	ldr	r1, [pc, #4]	; (80068d0 <_cleanup_r+0x8>)
 80068ca:	f000 b8af 	b.w	8006a2c <_fwalk_reent>
 80068ce:	bf00      	nop
 80068d0:	08006809 	.word	0x08006809

080068d4 <__sfmoreglue>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	2568      	movs	r5, #104	; 0x68
 80068d8:	1e4a      	subs	r2, r1, #1
 80068da:	4355      	muls	r5, r2
 80068dc:	460e      	mov	r6, r1
 80068de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068e2:	f7ff fac5 	bl	8005e70 <_malloc_r>
 80068e6:	4604      	mov	r4, r0
 80068e8:	b140      	cbz	r0, 80068fc <__sfmoreglue+0x28>
 80068ea:	2100      	movs	r1, #0
 80068ec:	e9c0 1600 	strd	r1, r6, [r0]
 80068f0:	300c      	adds	r0, #12
 80068f2:	60a0      	str	r0, [r4, #8]
 80068f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068f8:	f7fd fad2 	bl	8003ea0 <memset>
 80068fc:	4620      	mov	r0, r4
 80068fe:	bd70      	pop	{r4, r5, r6, pc}

08006900 <__sfp_lock_acquire>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__sfp_lock_acquire+0x8>)
 8006902:	f000 b8b3 	b.w	8006a6c <__retarget_lock_acquire_recursive>
 8006906:	bf00      	nop
 8006908:	20000350 	.word	0x20000350

0800690c <__sfp_lock_release>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__sfp_lock_release+0x8>)
 800690e:	f000 b8ae 	b.w	8006a6e <__retarget_lock_release_recursive>
 8006912:	bf00      	nop
 8006914:	20000350 	.word	0x20000350

08006918 <__sinit_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__sinit_lock_acquire+0x8>)
 800691a:	f000 b8a7 	b.w	8006a6c <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	2000034b 	.word	0x2000034b

08006924 <__sinit_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__sinit_lock_release+0x8>)
 8006926:	f000 b8a2 	b.w	8006a6e <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	2000034b 	.word	0x2000034b

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	f7ff fff0 	bl	8006918 <__sinit_lock_acquire>
 8006938:	69a3      	ldr	r3, [r4, #24]
 800693a:	b11b      	cbz	r3, 8006944 <__sinit+0x14>
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f7ff bff0 	b.w	8006924 <__sinit_lock_release>
 8006944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006948:	6523      	str	r3, [r4, #80]	; 0x50
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <__sinit+0x68>)
 800694c:	4a13      	ldr	r2, [pc, #76]	; (800699c <__sinit+0x6c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	62a2      	str	r2, [r4, #40]	; 0x28
 8006952:	42a3      	cmp	r3, r4
 8006954:	bf08      	it	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	4620      	mov	r0, r4
 800695a:	bf08      	it	eq
 800695c:	61a3      	streq	r3, [r4, #24]
 800695e:	f000 f81f 	bl	80069a0 <__sfp>
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f81b 	bl	80069a0 <__sfp>
 800696a:	60a0      	str	r0, [r4, #8]
 800696c:	4620      	mov	r0, r4
 800696e:	f000 f817 	bl	80069a0 <__sfp>
 8006972:	2200      	movs	r2, #0
 8006974:	2104      	movs	r1, #4
 8006976:	60e0      	str	r0, [r4, #12]
 8006978:	6860      	ldr	r0, [r4, #4]
 800697a:	f7ff ff81 	bl	8006880 <std>
 800697e:	2201      	movs	r2, #1
 8006980:	2109      	movs	r1, #9
 8006982:	68a0      	ldr	r0, [r4, #8]
 8006984:	f7ff ff7c 	bl	8006880 <std>
 8006988:	2202      	movs	r2, #2
 800698a:	2112      	movs	r1, #18
 800698c:	68e0      	ldr	r0, [r4, #12]
 800698e:	f7ff ff77 	bl	8006880 <std>
 8006992:	2301      	movs	r3, #1
 8006994:	61a3      	str	r3, [r4, #24]
 8006996:	e7d1      	b.n	800693c <__sinit+0xc>
 8006998:	08006da4 	.word	0x08006da4
 800699c:	080068c9 	.word	0x080068c9

080069a0 <__sfp>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	4607      	mov	r7, r0
 80069a4:	f7ff ffac 	bl	8006900 <__sfp_lock_acquire>
 80069a8:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <__sfp+0x84>)
 80069aa:	681e      	ldr	r6, [r3, #0]
 80069ac:	69b3      	ldr	r3, [r6, #24]
 80069ae:	b913      	cbnz	r3, 80069b6 <__sfp+0x16>
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff ffbd 	bl	8006930 <__sinit>
 80069b6:	3648      	adds	r6, #72	; 0x48
 80069b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069bc:	3b01      	subs	r3, #1
 80069be:	d503      	bpl.n	80069c8 <__sfp+0x28>
 80069c0:	6833      	ldr	r3, [r6, #0]
 80069c2:	b30b      	cbz	r3, 8006a08 <__sfp+0x68>
 80069c4:	6836      	ldr	r6, [r6, #0]
 80069c6:	e7f7      	b.n	80069b8 <__sfp+0x18>
 80069c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069cc:	b9d5      	cbnz	r5, 8006a04 <__sfp+0x64>
 80069ce:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <__sfp+0x88>)
 80069d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069d4:	60e3      	str	r3, [r4, #12]
 80069d6:	6665      	str	r5, [r4, #100]	; 0x64
 80069d8:	f000 f847 	bl	8006a6a <__retarget_lock_init_recursive>
 80069dc:	f7ff ff96 	bl	800690c <__sfp_lock_release>
 80069e0:	2208      	movs	r2, #8
 80069e2:	4629      	mov	r1, r5
 80069e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069ec:	6025      	str	r5, [r4, #0]
 80069ee:	61a5      	str	r5, [r4, #24]
 80069f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069f4:	f7fd fa54 	bl	8003ea0 <memset>
 80069f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a00:	4620      	mov	r0, r4
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	3468      	adds	r4, #104	; 0x68
 8006a06:	e7d9      	b.n	80069bc <__sfp+0x1c>
 8006a08:	2104      	movs	r1, #4
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff ff62 	bl	80068d4 <__sfmoreglue>
 8006a10:	4604      	mov	r4, r0
 8006a12:	6030      	str	r0, [r6, #0]
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d1d5      	bne.n	80069c4 <__sfp+0x24>
 8006a18:	f7ff ff78 	bl	800690c <__sfp_lock_release>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	e7ee      	b.n	8006a00 <__sfp+0x60>
 8006a22:	bf00      	nop
 8006a24:	08006da4 	.word	0x08006da4
 8006a28:	ffff0001 	.word	0xffff0001

08006a2c <_fwalk_reent>:
 8006a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a30:	4606      	mov	r6, r0
 8006a32:	4688      	mov	r8, r1
 8006a34:	2700      	movs	r7, #0
 8006a36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8006a42:	d505      	bpl.n	8006a50 <_fwalk_reent+0x24>
 8006a44:	6824      	ldr	r4, [r4, #0]
 8006a46:	2c00      	cmp	r4, #0
 8006a48:	d1f7      	bne.n	8006a3a <_fwalk_reent+0xe>
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a50:	89ab      	ldrh	r3, [r5, #12]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d907      	bls.n	8006a66 <_fwalk_reent+0x3a>
 8006a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	d003      	beq.n	8006a66 <_fwalk_reent+0x3a>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4630      	mov	r0, r6
 8006a62:	47c0      	blx	r8
 8006a64:	4307      	orrs	r7, r0
 8006a66:	3568      	adds	r5, #104	; 0x68
 8006a68:	e7e9      	b.n	8006a3e <_fwalk_reent+0x12>

08006a6a <__retarget_lock_init_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <__retarget_lock_acquire_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <__retarget_lock_release_recursive>:
 8006a6e:	4770      	bx	lr

08006a70 <__swhatbuf_r>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	460e      	mov	r6, r1
 8006a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a78:	4614      	mov	r4, r2
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	b096      	sub	sp, #88	; 0x58
 8006a80:	da07      	bge.n	8006a92 <__swhatbuf_r+0x22>
 8006a82:	2300      	movs	r3, #0
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	89b3      	ldrh	r3, [r6, #12]
 8006a88:	061a      	lsls	r2, r3, #24
 8006a8a:	d410      	bmi.n	8006aae <__swhatbuf_r+0x3e>
 8006a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a90:	e00e      	b.n	8006ab0 <__swhatbuf_r+0x40>
 8006a92:	466a      	mov	r2, sp
 8006a94:	f000 f914 	bl	8006cc0 <_fstat_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	dbf2      	blt.n	8006a82 <__swhatbuf_r+0x12>
 8006a9c:	9a01      	ldr	r2, [sp, #4]
 8006a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aa6:	425a      	negs	r2, r3
 8006aa8:	415a      	adcs	r2, r3
 8006aaa:	602a      	str	r2, [r5, #0]
 8006aac:	e7ee      	b.n	8006a8c <__swhatbuf_r+0x1c>
 8006aae:	2340      	movs	r3, #64	; 0x40
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	b016      	add	sp, #88	; 0x58
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}

08006ab8 <__smakebuf_r>:
 8006ab8:	898b      	ldrh	r3, [r1, #12]
 8006aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006abc:	079d      	lsls	r5, r3, #30
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	d507      	bpl.n	8006ad4 <__smakebuf_r+0x1c>
 8006ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	2301      	movs	r3, #1
 8006ace:	6163      	str	r3, [r4, #20]
 8006ad0:	b002      	add	sp, #8
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	466a      	mov	r2, sp
 8006ad6:	ab01      	add	r3, sp, #4
 8006ad8:	f7ff ffca 	bl	8006a70 <__swhatbuf_r>
 8006adc:	9900      	ldr	r1, [sp, #0]
 8006ade:	4605      	mov	r5, r0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7ff f9c5 	bl	8005e70 <_malloc_r>
 8006ae6:	b948      	cbnz	r0, 8006afc <__smakebuf_r+0x44>
 8006ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d4ef      	bmi.n	8006ad0 <__smakebuf_r+0x18>
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	e7e3      	b.n	8006ac4 <__smakebuf_r+0xc>
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <__smakebuf_r+0x7c>)
 8006afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	6020      	str	r0, [r4, #0]
 8006b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	9b00      	ldr	r3, [sp, #0]
 8006b0c:	6120      	str	r0, [r4, #16]
 8006b0e:	6163      	str	r3, [r4, #20]
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	b15b      	cbz	r3, 8006b2c <__smakebuf_r+0x74>
 8006b14:	4630      	mov	r0, r6
 8006b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b1a:	f000 f8e3 	bl	8006ce4 <_isatty_r>
 8006b1e:	b128      	cbz	r0, 8006b2c <__smakebuf_r+0x74>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	89a0      	ldrh	r0, [r4, #12]
 8006b2e:	4305      	orrs	r5, r0
 8006b30:	81a5      	strh	r5, [r4, #12]
 8006b32:	e7cd      	b.n	8006ad0 <__smakebuf_r+0x18>
 8006b34:	080068c9 	.word	0x080068c9

08006b38 <memchr>:
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	b2c9      	uxtb	r1, r1
 8006b3e:	4402      	add	r2, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	d101      	bne.n	8006b4a <memchr+0x12>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e003      	b.n	8006b52 <memchr+0x1a>
 8006b4a:	7804      	ldrb	r4, [r0, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	428c      	cmp	r4, r1
 8006b50:	d1f6      	bne.n	8006b40 <memchr+0x8>
 8006b52:	bd10      	pop	{r4, pc}

08006b54 <__malloc_lock>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__malloc_lock+0x8>)
 8006b56:	f7ff bf89 	b.w	8006a6c <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	2000034c 	.word	0x2000034c

08006b60 <__malloc_unlock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_unlock+0x8>)
 8006b62:	f7ff bf84 	b.w	8006a6e <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	2000034c 	.word	0x2000034c

08006b6c <_raise_r>:
 8006b6c:	291f      	cmp	r1, #31
 8006b6e:	b538      	push	{r3, r4, r5, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	460d      	mov	r5, r1
 8006b74:	d904      	bls.n	8006b80 <_raise_r+0x14>
 8006b76:	2316      	movs	r3, #22
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b82:	b112      	cbz	r2, 8006b8a <_raise_r+0x1e>
 8006b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b88:	b94b      	cbnz	r3, 8006b9e <_raise_r+0x32>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 f830 	bl	8006bf0 <_getpid_r>
 8006b90:	462a      	mov	r2, r5
 8006b92:	4601      	mov	r1, r0
 8006b94:	4620      	mov	r0, r4
 8006b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9a:	f000 b817 	b.w	8006bcc <_kill_r>
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d00a      	beq.n	8006bb8 <_raise_r+0x4c>
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	d103      	bne.n	8006bae <_raise_r+0x42>
 8006ba6:	2316      	movs	r3, #22
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	2001      	movs	r0, #1
 8006bac:	e7e7      	b.n	8006b7e <_raise_r+0x12>
 8006bae:	2400      	movs	r4, #0
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bb6:	4798      	blx	r3
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e7e0      	b.n	8006b7e <_raise_r+0x12>

08006bbc <raise>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <raise+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f7ff bfd3 	b.w	8006b6c <_raise_r>
 8006bc6:	bf00      	nop
 8006bc8:	2000000c 	.word	0x2000000c

08006bcc <_kill_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4d06      	ldr	r5, [pc, #24]	; (8006bec <_kill_r+0x20>)
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f7fa fd8e 	bl	80016fa <_kill>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d102      	bne.n	8006be8 <_kill_r+0x1c>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b103      	cbz	r3, 8006be8 <_kill_r+0x1c>
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	20000354 	.word	0x20000354

08006bf0 <_getpid_r>:
 8006bf0:	f7fa bd7c 	b.w	80016ec <_getpid>

08006bf4 <__sread>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	f000 f894 	bl	8006d28 <_read_r>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	bfab      	itete	ge
 8006c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c06:	89a3      	ldrhlt	r3, [r4, #12]
 8006c08:	181b      	addge	r3, r3, r0
 8006c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c0e:	bfac      	ite	ge
 8006c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c12:	81a3      	strhlt	r3, [r4, #12]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__swrite>:
 8006c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	898b      	ldrh	r3, [r1, #12]
 8006c1e:	4605      	mov	r5, r0
 8006c20:	05db      	lsls	r3, r3, #23
 8006c22:	460c      	mov	r4, r1
 8006c24:	4616      	mov	r6, r2
 8006c26:	d505      	bpl.n	8006c34 <__swrite+0x1e>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c30:	f000 f868 	bl	8006d04 <_lseek_r>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	4632      	mov	r2, r6
 8006c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	463b      	mov	r3, r7
 8006c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4a:	f000 b817 	b.w	8006c7c <_write_r>

08006c4e <__sseek>:
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	460c      	mov	r4, r1
 8006c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c56:	f000 f855 	bl	8006d04 <_lseek_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	bf15      	itete	ne
 8006c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c6a:	81a3      	strheq	r3, [r4, #12]
 8006c6c:	bf18      	it	ne
 8006c6e:	81a3      	strhne	r3, [r4, #12]
 8006c70:	bd10      	pop	{r4, pc}

08006c72 <__sclose>:
 8006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c76:	f000 b813 	b.w	8006ca0 <_close_r>
	...

08006c7c <_write_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	2200      	movs	r2, #0
 8006c86:	4d05      	ldr	r5, [pc, #20]	; (8006c9c <_write_r+0x20>)
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fa fd6c 	bl	8001768 <_write>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_write_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_write_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000354 	.word	0x20000354

08006ca0 <_close_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4d05      	ldr	r5, [pc, #20]	; (8006cbc <_close_r+0x1c>)
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa fd78 	bl	80017a0 <_close>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_close_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_close_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000354 	.word	0x20000354

08006cc0 <_fstat_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4d06      	ldr	r5, [pc, #24]	; (8006ce0 <_fstat_r+0x20>)
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	f7fa fd72 	bl	80017b6 <_fstat>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d102      	bne.n	8006cdc <_fstat_r+0x1c>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	b103      	cbz	r3, 8006cdc <_fstat_r+0x1c>
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000354 	.word	0x20000354

08006ce4 <_isatty_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4d05      	ldr	r5, [pc, #20]	; (8006d00 <_isatty_r+0x1c>)
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	f7fa fd70 	bl	80017d4 <_isatty>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_isatty_r+0x1a>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_isatty_r+0x1a>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	20000354 	.word	0x20000354

08006d04 <_lseek_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4d05      	ldr	r5, [pc, #20]	; (8006d24 <_lseek_r+0x20>)
 8006d10:	602a      	str	r2, [r5, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fa fd68 	bl	80017e8 <_lseek>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_lseek_r+0x1e>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_lseek_r+0x1e>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20000354 	.word	0x20000354

08006d28 <_read_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	2200      	movs	r2, #0
 8006d32:	4d05      	ldr	r5, [pc, #20]	; (8006d48 <_read_r+0x20>)
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f7fa fcf9 	bl	800172e <_read>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_read_r+0x1e>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_read_r+0x1e>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	20000354 	.word	0x20000354

08006d4c <_init>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr

08006d58 <_fini>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr
