
driveControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080070f8  080070f8  000170f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080075d0  080075d0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075d0  080075d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080075d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e0  080077b8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080077b8  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1f2  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  0002d3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b13  00000000  00000000  00030d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d667  00000000  00000000  00049813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb94  00000000  00000000  00056e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2a0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  000e2a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080070dc 	.word	0x080070dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080070dc 	.word	0x080070dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_d2lz>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	460c      	mov	r4, r1
 8000fac:	4605      	mov	r5, r0
 8000fae:	4621      	mov	r1, r4
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f7ff fdb5 	bl	8000b24 <__aeabi_dcmplt>
 8000fba:	b928      	cbnz	r0, 8000fc8 <__aeabi_d2lz+0x20>
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc4:	f000 b80a 	b.w	8000fdc <__aeabi_d2ulz>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fce:	f000 f805 	bl	8000fdc <__aeabi_d2ulz>
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd8:	bd38      	pop	{r3, r4, r5, pc}
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2ulz>:
 8000fdc:	b5d0      	push	{r4, r6, r7, lr}
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__aeabi_d2ulz+0x34>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fb2b 	bl	8000640 <__aeabi_dmul>
 8000fea:	f7ff fdc3 	bl	8000b74 <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff faac 	bl	800054c <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <__aeabi_d2ulz+0x38>)
 8000ff8:	f7ff fb22 	bl	8000640 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f964 	bl	80002d0 <__aeabi_dsub>
 8001008:	f7ff fdb4 	bl	8000b74 <__aeabi_d2uiz>
 800100c:	4621      	mov	r1, r4
 800100e:	bdd0      	pop	{r4, r6, r7, pc}
 8001010:	3df00000 	.word	0x3df00000
 8001014:	41f00000 	.word	0x41f00000

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fe1c 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f94c 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fab6 	bl	8001594 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001028:	f000 f98e 	bl	8001348 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800102c:	f000 fa88 	bl	8001540 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001030:	f000 fa38 	bl	80014a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <main+0x44>)
 8001036:	f001 fe13 	bl	8002c60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <main+0x48>)
 800103c:	f001 fe10 	bl	8002c60 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Right Motor PWM Control
 8001040:	2100      	movs	r1, #0
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <main+0x48>)
 8001044:	f001 feb6 	bl	8002db4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Left Motor PWM Control
 8001048:	2104      	movs	r1, #4
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <main+0x48>)
 800104c:	f001 feb2 	bl	8002db4 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 8001050:	2212      	movs	r2, #18
 8001052:	4904      	ldr	r1, [pc, #16]	; (8001064 <main+0x4c>)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <main+0x50>)
 8001056:	f002 fdaf 	bl	8003bb8 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800105a:	e7fe      	b.n	800105a <main+0x42>
 800105c:	200002a0 	.word	0x200002a0
 8001060:	20000244 	.word	0x20000244
 8001064:	200001fc 	.word	0x200001fc
 8001068:	200002e8 	.word	0x200002e8

0800106c <HAL_UART_RxCpltCallback>:
	}
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 8001074:	2212      	movs	r2, #18
 8001076:	4904      	ldr	r1, [pc, #16]	; (8001088 <HAL_UART_RxCpltCallback+0x1c>)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <HAL_UART_RxCpltCallback+0x20>)
 800107a:	f002 fd9d 	bl	8003bb8 <HAL_UART_Receive_IT>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001fc 	.word	0x200001fc
 800108c:	200002e8 	.word	0x200002e8

08001090 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/* Every Ts interrupt */
	int pwmToSet = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
	if(htim == &htim2){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a68      	ldr	r2, [pc, #416]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f040 80c9 	bne.w	8001238 <HAL_TIM_PeriodElapsedCallback+0x1a8>

		//prbs(); //Process identification


		tempJoystickVal = (char *)RxBuffer;
 80010a6:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010a8:	4a67      	ldr	r2, [pc, #412]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010aa:	601a      	str	r2, [r3, #0]
		tempStrToFloat = strtok(tempJoystickVal, ",");
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4966      	ldr	r1, [pc, #408]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fee8 	bl	8004e88 <strtok>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010bc:	6013      	str	r3, [r2, #0]
		leftJoystickValue = atof(tempStrToFloat);
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 f884 	bl	80041d0 <atof>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd70 	bl	8000bb4 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010d8:	6013      	str	r3, [r2, #0]
		tempStrToFloat = strtok(NULL, ",");
 80010da:	495c      	ldr	r1, [pc, #368]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010dc:	2000      	movs	r0, #0
 80010de:	f003 fed3 	bl	8004e88 <strtok>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a5a      	ldr	r2, [pc, #360]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010e6:	6013      	str	r3, [r2, #0]
		rightJoystickValue = atof(tempStrToFloat);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f86f 	bl	80041d0 <atof>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd5b 	bl	8000bb4 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a55      	ldr	r2, [pc, #340]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001102:	6013      	str	r3, [r2, #0]
		tempStrToFloat = strtok(NULL, ",");
 8001104:	4951      	ldr	r1, [pc, #324]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001106:	2000      	movs	r0, #0
 8001108:	f003 febe 	bl	8004e88 <strtok>
 800110c:	4603      	mov	r3, r0
 800110e:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001110:	6013      	str	r3, [r2, #0]
		leftMotorDirection = atoi(tempStrToFloat);
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 f85d 	bl	80041d6 <atoi>
 800111c:	4603      	mov	r3, r0
 800111e:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001120:	6013      	str	r3, [r2, #0]
		tempStrToFloat = strtok(NULL, ",");
 8001122:	494a      	ldr	r1, [pc, #296]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001124:	2000      	movs	r0, #0
 8001126:	f003 feaf 	bl	8004e88 <strtok>
 800112a:	4603      	mov	r3, r0
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800112e:	6013      	str	r3, [r2, #0]
		rightMotorDirection = atoi(tempStrToFloat);
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 f84e 	bl	80041d6 <atoi>
 800113a:	4603      	mov	r3, r0
 800113c:	4a48      	ldr	r2, [pc, #288]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800113e:	6013      	str	r3, [r2, #0]

		setLeftMotorDirection(leftMotorDirection);
 8001140:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fafb 	bl	8001740 <setLeftMotorDirection>
		setRightMotorDirection(rightMotorDirection);
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fb22 	bl	8001798 <setRightMotorDirection>

		setRightMotorPWM((int)(rightJoystickValue*1000));
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4942      	ldr	r1, [pc, #264]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f800 	bl	8000160 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fefa 	bl	8000f5c <__aeabi_f2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	4618      	mov	r0, r3
 800116c:	f000 faa4 	bl	80016b8 <setRightMotorPWM>
		setLeftMotorPWM((int)(leftJoystickValue*1000));
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	493b      	ldr	r1, [pc, #236]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001176:	4618      	mov	r0, r3
 8001178:	f7fe fff2 	bl	8000160 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feec 	bl	8000f5c <__aeabi_f2iz>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa82 	bl	8001690 <setLeftMotorPWM>

		if(leftJoystickValue > 0){
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f04f 0100 	mov.w	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fed7 	bl	8000f48 <__aeabi_fcmpgt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x152>
			pwmToSet = getRightMotorPWM();
 80011a0:	f000 fab6 	bl	8001710 <getRightMotorPWM>
 80011a4:	60f8      	str	r0, [r7, #12]
			pwmToSet -= pwmToSet*leftJoystickValue;
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f7ff fe0e 	bl	8000dc8 <__aeabi_i2f>
 80011ac:	4602      	mov	r2, r0
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f7fe ffd3 	bl	8000160 <__aeabi_fmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461c      	mov	r4, r3
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fe02 	bl	8000dc8 <__aeabi_i2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4621      	mov	r1, r4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fd47 	bl	8000c5c <__aeabi_fsub>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fec3 	bl	8000f5c <__aeabi_f2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	60fb      	str	r3, [r7, #12]
			setRightMotorPWM(pwmToSet);
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 fa6c 	bl	80016b8 <setRightMotorPWM>

		noMsLeft++;
		noMsRight++;
		*/
	}
}
 80011e0:	e02a      	b.n	8001238 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		}else if(leftJoystickValue < 0){
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f04f 0100 	mov.w	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe8e 	bl	8000f0c <__aeabi_fcmplt>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x168>
}
 80011f6:	e01f      	b.n	8001238 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			pwmToSet = getLeftMotorPWM();
 80011f8:	f000 fa72 	bl	80016e0 <getLeftMotorPWM>
 80011fc:	60f8      	str	r0, [r7, #12]
			pwmToSet -= pwmToSet*leftJoystickValue;
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fde2 	bl	8000dc8 <__aeabi_i2f>
 8001204:	4602      	mov	r2, r0
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4610      	mov	r0, r2
 800120e:	f7fe ffa7 	bl	8000160 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fdd6 	bl	8000dc8 <__aeabi_i2f>
 800121c:	4603      	mov	r3, r0
 800121e:	4621      	mov	r1, r4
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd1b 	bl	8000c5c <__aeabi_fsub>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fe97 	bl	8000f5c <__aeabi_f2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	60fb      	str	r3, [r7, #12]
			setLeftMotorPWM(pwmToSet);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fa2c 	bl	8001690 <setLeftMotorPWM>
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	200002a0 	.word	0x200002a0
 8001244:	2000023c 	.word	0x2000023c
 8001248:	200001fc 	.word	0x200001fc
 800124c:	08007108 	.word	0x08007108
 8001250:	20000240 	.word	0x20000240
 8001254:	20000210 	.word	0x20000210
 8001258:	20000214 	.word	0x20000214
 800125c:	20000218 	.word	0x20000218
 8001260:	2000021c 	.word	0x2000021c
 8001264:	447a0000 	.word	0x447a0000

08001268 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RightMotorOpto_Pin){
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001278:	d107      	bne.n	800128a <HAL_GPIO_EXTI_Callback+0x22>

		nGapsRight++;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_GPIO_EXTI_Callback+0x44>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_GPIO_EXTI_Callback+0x44>)
 8001282:	6013      	str	r3, [r2, #0]
		noMsRight = 0;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

	}

	if(GPIO_Pin == LeftMotorOpto_Pin){
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b80      	cmp	r3, #128	; 0x80
 800128e:	d107      	bne.n	80012a0 <HAL_GPIO_EXTI_Callback+0x38>


		nGapsLeft++;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001298:	6013      	str	r3, [r2, #0]
		noMsLeft = 0;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
	}
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000224 	.word	0x20000224
 80012b0:	2000022c 	.word	0x2000022c
 80012b4:	20000220 	.word	0x20000220
 80012b8:	20000228 	.word	0x20000228

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	; 0x40
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2228      	movs	r2, #40	; 0x28
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 ffb2 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f841 	bl	800238c <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001310:	f000 f9b8 	bl	8001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001318:	2302      	movs	r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f001 faac 	bl	800288c <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800133a:	f000 f9a3 	bl	8001684 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3740      	adds	r7, #64	; 0x40
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b096      	sub	sp, #88	; 0x58
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2220      	movs	r2, #32
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f002 ff57 	bl	8004234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <MX_TIM1_Init+0x154>)
 8001388:	4a45      	ldr	r2, [pc, #276]	; (80014a0 <MX_TIM1_Init+0x158>)
 800138a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <MX_TIM1_Init+0x154>)
 800138e:	2247      	movs	r2, #71	; 0x47
 8001390:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <MX_TIM1_Init+0x154>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_TIM1_Init+0x154>)
 800139a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <MX_TIM1_Init+0x154>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_TIM1_Init+0x154>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <MX_TIM1_Init+0x154>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b2:	483a      	ldr	r0, [pc, #232]	; (800149c <MX_TIM1_Init+0x154>)
 80013b4:	f001 fc04 	bl	8002bc0 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013be:	f000 f961 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013cc:	4619      	mov	r1, r3
 80013ce:	4833      	ldr	r0, [pc, #204]	; (800149c <MX_TIM1_Init+0x154>)
 80013d0:	f001 ff58 	bl	8003284 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013da:	f000 f953 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013de:	482f      	ldr	r0, [pc, #188]	; (800149c <MX_TIM1_Init+0x154>)
 80013e0:	f001 fc90 	bl	8002d04 <HAL_TIM_PWM_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ea:	f000 f94b 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fa:	4619      	mov	r1, r3
 80013fc:	4827      	ldr	r0, [pc, #156]	; (800149c <MX_TIM1_Init+0x154>)
 80013fe:	f002 facd 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001408:	f000 f93c 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140c:	2360      	movs	r3, #96	; 0x60
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001410:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	481a      	ldr	r0, [pc, #104]	; (800149c <MX_TIM1_Init+0x154>)
 8001434:	f001 fe68 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800143e:	f000 f921 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	2204      	movs	r2, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_TIM1_Init+0x154>)
 800144c:	f001 fe5c 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001456:	f000 f915 	bl	8001684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800146e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM1_Init+0x154>)
 800147e:	f002 faeb 	bl	8003a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001488:	f000 f8fc 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM1_Init+0x154>)
 800148e:	f000 fa21 	bl	80018d4 <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3758      	adds	r7, #88	; 0x58
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000244 	.word	0x20000244
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM2_Init+0x98>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_TIM2_Init+0x98>)
 80014ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80014ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_TIM2_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999; // 0.1 SECOND TS --------------------- //
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM2_Init+0x98>)
 80014d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80014dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_TIM2_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_TIM2_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM2_Init+0x98>)
 80014ec:	f001 fb68 	bl	8002bc0 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014f6:	f000 f8c5 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM2_Init+0x98>)
 8001508:	f001 febc 	bl	8003284 <HAL_TIM_ConfigClockSource>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001512:	f000 f8b7 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM2_Init+0x98>)
 8001524:	f002 fa3a 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800152e:	f000 f8a9 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002a0 	.word	0x200002a0

08001540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART2_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001578:	f002 fad1 	bl	8003b1e <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f87f 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002e8 	.word	0x200002e8
 8001590:	40004400 	.word	0x40004400

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a31      	ldr	r2, [pc, #196]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015ae:	f043 0320 	orr.w	r3, r3, #32
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_GPIO_Init+0xe0>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 410c 	mov.w	r1, #35840	; 0x8c00
 80015f6:	4820      	ldr	r0, [pc, #128]	; (8001678 <MX_GPIO_Init+0xe4>)
 80015f8:	f000 fe98 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2108      	movs	r1, #8
 8001600:	481e      	ldr	r0, [pc, #120]	; (800167c <MX_GPIO_Init+0xe8>)
 8001602:	f000 fe93 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorDriverIN1_Pin MotorDriverIN2_Pin MotorDriverIN3_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN1_Pin|MotorDriverIN2_Pin|MotorDriverIN3_Pin;
 8001606:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800160a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2302      	movs	r3, #2
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	4816      	ldr	r0, [pc, #88]	; (8001678 <MX_GPIO_Init+0xe4>)
 8001620:	f000 fd00 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorDriverIN4_Pin */
  GPIO_InitStruct.Pin = MotorDriverIN4_Pin;
 8001624:	2308      	movs	r3, #8
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MotorDriverIN4_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <MX_GPIO_Init+0xe8>)
 800163c:	f000 fcf2 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftMotorOpto_Pin RightMotorOpto_Pin */
  GPIO_InitStruct.Pin = LeftMotorOpto_Pin|RightMotorOpto_Pin;
 8001640:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_GPIO_Init+0xec>)
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_GPIO_Init+0xe8>)
 8001656:	f000 fce5 	bl	8002024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2017      	movs	r0, #23
 8001660:	f000 fc33 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001664:	2017      	movs	r0, #23
 8001666:	f000 fc4c 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	10110000 	.word	0x10110000

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <setLeftMotorPWM>:

volatile int leftPWM;
volatile int rightPWM;


void setLeftMotorPWM(int pwmPercentage){
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	TIM1->CCR2 = pwmPercentage * 10;
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <setLeftMotorPWM+0x24>)
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40012c00 	.word	0x40012c00

080016b8 <setRightMotorPWM>:

void setRightMotorPWM(int pwmPercentage){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = pwmPercentage * 10;
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <setRightMotorPWM+0x24>)
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <getLeftMotorPWM>:

int getLeftMotorPWM(){
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	leftPWM = TIM1->CCR2 / 10;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <getLeftMotorPWM+0x24>)
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <getLeftMotorPWM+0x28>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <getLeftMotorPWM+0x2c>)
 80016f4:	601a      	str	r2, [r3, #0]
	return (leftPWM);
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <getLeftMotorPWM+0x2c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40012c00 	.word	0x40012c00
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	20000328 	.word	0x20000328

08001710 <getRightMotorPWM>:

int getRightMotorPWM(){
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	rightPWM = TIM1->CCR1 / 10;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <getRightMotorPWM+0x24>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <getRightMotorPWM+0x28>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	08db      	lsrs	r3, r3, #3
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <getRightMotorPWM+0x2c>)
 8001724:	601a      	str	r2, [r3, #0]
	return (rightPWM);
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <getRightMotorPWM+0x2c>)
 8001728:	681b      	ldr	r3, [r3, #0]
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40012c00 	.word	0x40012c00
 8001738:	cccccccd 	.word	0xcccccccd
 800173c:	2000032c 	.word	0x2000032c

08001740 <setLeftMotorDirection>:

// 0 - forward; 1 - backward
void setLeftMotorDirection(int direction){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <setLeftMotorDirection+0x28>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <setLeftMotorDirection+0x54>)
 8001756:	f000 fde9 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <setLeftMotorDirection+0x54>)
 8001762:	f000 fde3 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
	}else{
		Error_Handler();
	}
}
 8001766:	e011      	b.n	800178c <setLeftMotorDirection+0x4c>
	}else if(direction == 1){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10c      	bne.n	8001788 <setLeftMotorDirection+0x48>
		HAL_GPIO_WritePin(MotorDriverIN1_GPIO_Port, MotorDriverIN1_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <setLeftMotorDirection+0x54>)
 8001776:	f000 fdd9 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN2_GPIO_Port, MotorDriverIN2_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <setLeftMotorDirection+0x54>)
 8001782:	f000 fdd3 	bl	800232c <HAL_GPIO_WritePin>
}
 8001786:	e001      	b.n	800178c <setLeftMotorDirection+0x4c>
		Error_Handler();
 8001788:	f7ff ff7c 	bl	8001684 <Error_Handler>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010800 	.word	0x40010800

08001798 <setRightMotorDirection>:

void setRightMotorDirection(int direction){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if(direction == 0){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10b      	bne.n	80017be <setRightMotorDirection+0x26>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <setRightMotorDirection+0x50>)
 80017ae:	f000 fdbd 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <setRightMotorDirection+0x54>)
 80017b8:	f000 fdb8 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
	}else{
		Error_Handler();
	}
}
 80017bc:	e010      	b.n	80017e0 <setRightMotorDirection+0x48>
	}else if(direction == 1){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10b      	bne.n	80017dc <setRightMotorDirection+0x44>
		HAL_GPIO_WritePin(MotorDriverIN3_GPIO_Port, MotorDriverIN3_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <setRightMotorDirection+0x50>)
 80017cc:	f000 fdae 	bl	800232c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorDriverIN4_GPIO_Port, MotorDriverIN4_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2108      	movs	r1, #8
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <setRightMotorDirection+0x54>)
 80017d6:	f000 fda9 	bl	800232c <HAL_GPIO_WritePin>
}
 80017da:	e001      	b.n	80017e0 <setRightMotorDirection+0x48>
		Error_Handler();
 80017dc:	f7ff ff52 	bl	8001684 <Error_Handler>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00

080017f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_MspInit+0x5c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x5c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_MspInit+0x60>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_MspInit+0x60>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_TIM_Base_MspInit+0x78>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d114      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a19      	ldr	r2, [pc, #100]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 800186c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2019      	movs	r0, #25
 8001884:	f000 fb21 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001888:	2019      	movs	r0, #25
 800188a:	f000 fb3a 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	e018      	b.n	80018c2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001898:	d113      	bne.n	80018c2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_TIM_Base_MspInit+0x7c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	201c      	movs	r0, #28
 80018b8:	f000 fb07 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018bc:	201c      	movs	r0, #28
 80018be:	f000 fb20 	bl	8001f02 <HAL_NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_TIM_MspPostInit+0x5c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d118      	bne.n	8001926 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_TIM_MspPostInit+0x60>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_TIM_MspPostInit+0x60>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_TIM_MspPostInit+0x60>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RightMotorPWM_Pin|LeftMotorPWM_Pin;
 800190c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_TIM_MspPostInit+0x64>)
 8001922:	f000 fb7f 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40012c00 	.word	0x40012c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40010800 	.word	0x40010800

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d137      	bne.n	80019cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 8001962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001966:	61d3      	str	r3, [r2, #28]
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800198c:	2304      	movs	r3, #4
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	480f      	ldr	r0, [pc, #60]	; (80019dc <HAL_UART_MspInit+0xa0>)
 80019a0:	f000 fb40 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019a4:	2308      	movs	r3, #8
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_UART_MspInit+0xa0>)
 80019b8:	f000 fb34 	bl	8002024 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2026      	movs	r0, #38	; 0x26
 80019c2:	f000 fa82 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c6:	2026      	movs	r0, #38	; 0x26
 80019c8:	f000 fa9b 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a26:	f000 f95d 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a32:	2080      	movs	r0, #128	; 0x80
 8001a34:	f000 fc92 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a3c:	f000 fc8e 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <TIM1_UP_IRQHandler+0x10>)
 8001a4a:	f001 fa55 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000244 	.word	0x20000244

08001a58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <TIM2_IRQHandler+0x10>)
 8001a5e:	f001 fa4b 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002a0 	.word	0x200002a0

08001a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <USART2_IRQHandler+0x10>)
 8001a72:	f002 f8f5 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002e8 	.word	0x200002e8

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_kill>:

int _kill(int pid, int sig)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a98:	f002 fba2 	bl	80041e0 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2216      	movs	r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
	return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_exit>:

void _exit (int status)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffe7 	bl	8001a8e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ac0:	e7fe      	b.n	8001ac0 <_exit+0x12>

08001ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00a      	b.n	8001aea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	4601      	mov	r1, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <_read+0x12>
	}

return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e009      	b.n	8001b22 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf1      	blt.n	8001b0e <_write+0x12>
	}
	return len;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_close>:

int _close(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_isatty>:

int _isatty(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f002 fb0c 	bl	80041e0 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20005000 	.word	0x20005000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	20000230 	.word	0x20000230
 8001bfc:	20000348 	.word	0x20000348

08001c00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c0e:	e003      	b.n	8001c18 <LoopCopyDataInit>

08001c10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c16:	3104      	adds	r1, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c18:	480a      	ldr	r0, [pc, #40]	; (8001c44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c20:	d3f6      	bcc.n	8001c10 <CopyDataInit>
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c24:	e002      	b.n	8001c2c <LoopFillZerobss>

08001c26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c28:	f842 3b04 	str.w	r3, [r2], #4

08001c2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c30:	d3f9      	bcc.n	8001c26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c32:	f7ff ffe5 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f002 fad9 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c3a:	f7ff f9ed 	bl	8001018 <main>
  bx lr
 8001c3e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c40:	080075d8 	.word	0x080075d8
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c48:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c4c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c50:	20000344 	.word	0x20000344

08001c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC1_2_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_Init+0x28>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_Init+0x28>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f923 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f808 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fdbc 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_InitTick+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f93b 	bl	8001f1e <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc0:	f000 f903 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <HAL_InitTick+0x5c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_IncTick+0x1c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_IncTick+0x20>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_IncTick+0x20>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000330 	.word	0x20000330

08001d08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_GetTick+0x10>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000330 	.word	0x20000330

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <__NVIC_EnableIRQ+0x34>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e94:	f7ff ff90 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff2d 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff42 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff90 	bl	8001e0c <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5f 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff35 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d005      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2204      	movs	r2, #4
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e051      	b.n	8001ffe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 020e 	bic.w	r2, r2, #14
 8001f68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a22      	ldr	r2, [pc, #136]	; (8002008 <HAL_DMA_Abort_IT+0xd0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d029      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0xa0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_DMA_Abort_IT+0xd4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d022      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x9c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_DMA_Abort_IT+0xd8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d01a      	beq.n	8001fce <HAL_DMA_Abort_IT+0x96>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_DMA_Abort_IT+0xdc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d012      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x90>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_DMA_Abort_IT+0xe0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00a      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x8a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1a      	ldr	r2, [pc, #104]	; (800201c <HAL_DMA_Abort_IT+0xe4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d102      	bne.n	8001fbc <HAL_DMA_Abort_IT+0x84>
 8001fb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fba:	e00e      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc0:	e00b      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc6:	e008      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	e005      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd2:	e002      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_Abort_IT+0xa2>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_DMA_Abort_IT+0xe8>)
 8001fdc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
    } 
  }
  return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40020008 	.word	0x40020008
 800200c:	4002001c 	.word	0x4002001c
 8002010:	40020030 	.word	0x40020030
 8002014:	40020044 	.word	0x40020044
 8002018:	40020058 	.word	0x40020058
 800201c:	4002006c 	.word	0x4002006c
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b08b      	sub	sp, #44	; 0x2c
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e169      	b.n	800230c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002038:	2201      	movs	r2, #1
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8158 	bne.w	8002306 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a9a      	ldr	r2, [pc, #616]	; (80022c4 <HAL_GPIO_Init+0x2a0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d05e      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002060:	4a98      	ldr	r2, [pc, #608]	; (80022c4 <HAL_GPIO_Init+0x2a0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d875      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002066:	4a98      	ldr	r2, [pc, #608]	; (80022c8 <HAL_GPIO_Init+0x2a4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d058      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 800206c:	4a96      	ldr	r2, [pc, #600]	; (80022c8 <HAL_GPIO_Init+0x2a4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d86f      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002072:	4a96      	ldr	r2, [pc, #600]	; (80022cc <HAL_GPIO_Init+0x2a8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d052      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002078:	4a94      	ldr	r2, [pc, #592]	; (80022cc <HAL_GPIO_Init+0x2a8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d869      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800207e:	4a94      	ldr	r2, [pc, #592]	; (80022d0 <HAL_GPIO_Init+0x2ac>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04c      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002084:	4a92      	ldr	r2, [pc, #584]	; (80022d0 <HAL_GPIO_Init+0x2ac>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d863      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800208a:	4a92      	ldr	r2, [pc, #584]	; (80022d4 <HAL_GPIO_Init+0x2b0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d046      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002090:	4a90      	ldr	r2, [pc, #576]	; (80022d4 <HAL_GPIO_Init+0x2b0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d85d      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002096:	2b12      	cmp	r3, #18
 8002098:	d82a      	bhi.n	80020f0 <HAL_GPIO_Init+0xcc>
 800209a:	2b12      	cmp	r3, #18
 800209c:	d859      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800209e:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <HAL_GPIO_Init+0x80>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	0800211f 	.word	0x0800211f
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	0800210b 	.word	0x0800210b
 80020b0:	0800214d 	.word	0x0800214d
 80020b4:	08002153 	.word	0x08002153
 80020b8:	08002153 	.word	0x08002153
 80020bc:	08002153 	.word	0x08002153
 80020c0:	08002153 	.word	0x08002153
 80020c4:	08002153 	.word	0x08002153
 80020c8:	08002153 	.word	0x08002153
 80020cc:	08002153 	.word	0x08002153
 80020d0:	08002153 	.word	0x08002153
 80020d4:	08002153 	.word	0x08002153
 80020d8:	08002153 	.word	0x08002153
 80020dc:	08002153 	.word	0x08002153
 80020e0:	08002153 	.word	0x08002153
 80020e4:	08002153 	.word	0x08002153
 80020e8:	08002101 	.word	0x08002101
 80020ec:	08002115 	.word	0x08002115
 80020f0:	4a79      	ldr	r2, [pc, #484]	; (80022d8 <HAL_GPIO_Init+0x2b4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020f6:	e02c      	b.n	8002152 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e029      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	3304      	adds	r3, #4
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e024      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	3308      	adds	r3, #8
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e01f      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	330c      	adds	r3, #12
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e01a      	b.n	8002154 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002126:	2304      	movs	r3, #4
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e013      	b.n	8002154 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002134:	2308      	movs	r3, #8
 8002136:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	611a      	str	r2, [r3, #16]
          break;
 800213e:	e009      	b.n	8002154 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002140:	2308      	movs	r3, #8
 8002142:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	615a      	str	r2, [r3, #20]
          break;
 800214a:	e003      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x130>
          break;
 8002152:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d801      	bhi.n	800215e <HAL_GPIO_Init+0x13a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_Init+0x13e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d802      	bhi.n	8002170 <HAL_GPIO_Init+0x14c>
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	e002      	b.n	8002176 <HAL_GPIO_Init+0x152>
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3b08      	subs	r3, #8
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	210f      	movs	r1, #15
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	6a39      	ldr	r1, [r7, #32]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80b1 	beq.w	8002306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <HAL_GPIO_Init+0x2b8>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_GPIO_Init+0x2b8>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_GPIO_Init+0x2b8>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021bc:	4a48      	ldr	r2, [pc, #288]	; (80022e0 <HAL_GPIO_Init+0x2bc>)
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <HAL_GPIO_Init+0x2c0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_Init+0x1ec>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3f      	ldr	r2, [pc, #252]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_Init+0x1e8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3e      	ldr	r2, [pc, #248]	; (80022ec <HAL_GPIO_Init+0x2c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x1e4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3d      	ldr	r2, [pc, #244]	; (80022f0 <HAL_GPIO_Init+0x2cc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_Init+0x1e0>
 8002200:	2303      	movs	r3, #3
 8002202:	e006      	b.n	8002212 <HAL_GPIO_Init+0x1ee>
 8002204:	2304      	movs	r3, #4
 8002206:	e004      	b.n	8002212 <HAL_GPIO_Init+0x1ee>
 8002208:	2302      	movs	r3, #2
 800220a:	e002      	b.n	8002212 <HAL_GPIO_Init+0x1ee>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_GPIO_Init+0x1ee>
 8002210:	2300      	movs	r3, #0
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002222:	492f      	ldr	r1, [pc, #188]	; (80022e0 <HAL_GPIO_Init+0x2bc>)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	492c      	ldr	r1, [pc, #176]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	43db      	mvns	r3, r3
 8002252:	4928      	ldr	r1, [pc, #160]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002254:	4013      	ands	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4922      	ldr	r1, [pc, #136]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	43db      	mvns	r3, r3
 800227a:	491e      	ldr	r1, [pc, #120]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800227c:	4013      	ands	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4918      	ldr	r1, [pc, #96]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4914      	ldr	r1, [pc, #80]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d021      	beq.n	80022f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
 80022c0:	e021      	b.n	8002306 <HAL_GPIO_Init+0x2e2>
 80022c2:	bf00      	nop
 80022c4:	10320000 	.word	0x10320000
 80022c8:	10310000 	.word	0x10310000
 80022cc:	10220000 	.word	0x10220000
 80022d0:	10210000 	.word	0x10210000
 80022d4:	10120000 	.word	0x10120000
 80022d8:	10110000 	.word	0x10110000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40010800 	.word	0x40010800
 80022e8:	40010c00 	.word	0x40010c00
 80022ec:	40011000 	.word	0x40011000
 80022f0:	40011400 	.word	0x40011400
 80022f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_GPIO_Init+0x304>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	43db      	mvns	r3, r3
 8002300:	4909      	ldr	r1, [pc, #36]	; (8002328 <HAL_GPIO_Init+0x304>)
 8002302:	4013      	ands	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	3301      	adds	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f ae8e 	bne.w	8002038 <HAL_GPIO_Init+0x14>
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	372c      	adds	r7, #44	; 0x2c
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff74 	bl	8001268 <HAL_GPIO_EXTI_Callback>
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e26c      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e246      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x76>
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xbc>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fc4e 	bl	8001d08 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fc4a 	bl	8001d08 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1fa      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe4>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fc3a 	bl	8001d08 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fc36 	bl	8001d08 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1e6      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x10c>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1ba      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff fbef 	bl	8001d08 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff fbeb 	bl	8001d08 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e19b      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff fbce 	bl	8001d08 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fbca 	bl	8001d08 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e17a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03a      	beq.n	8002610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7ff fbae 	bl	8001d08 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff fbaa 	bl	8001d08 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e15a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 fad8 	bl	8002b84 <RCC_Delay>
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fb94 	bl	8001d08 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fb90 	bl	8001d08 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d908      	bls.n	8002604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e140      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	42420000 	.word	0x42420000
 8002600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b9e      	ldr	r3, [pc, #632]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e9      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a6 	beq.w	800276a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b97      	ldr	r3, [pc, #604]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b94      	ldr	r3, [pc, #592]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a93      	ldr	r2, [pc, #588]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b8e      	ldr	r3, [pc, #568]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb51 	bl	8001d08 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fb4d 	bl	8001d08 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0fd      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002690:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a72      	ldr	r2, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x356>
 80026c8:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b64      	ldr	r3, [pc, #400]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a63      	ldr	r2, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fb01 	bl	8001d08 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fafd 	bl	8001d08 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0ab      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x37e>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff faeb 	bl	8001d08 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fae7 	bl	8001d08 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e095      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8081 	beq.w	8002876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d061      	beq.n	8002844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d146      	bne.n	8002816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fabb 	bl	8001d08 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fab7 	bl	8001d08 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e067      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	430b      	orrs	r3, r1
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fa8b 	bl	8001d08 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fa87 	bl	8001d08 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e037      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
 8002814:	e02f      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa74 	bl	8001d08 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fa70 	bl	8001d08 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e020      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x498>
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060

0800288c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d0      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d910      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4965      	ldr	r1, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d040      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d115      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e073      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06b      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4936      	ldr	r1, [pc, #216]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f9c4 	bl	8001d08 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7ff f9c0 	bl	8001d08 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e053      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d210      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4922      	ldr	r1, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1d0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f922 	bl	8001c84 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	0800711c 	.word	0x0800711c
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b490      	push	{r4, r7}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a68:	1d3c      	adds	r4, r7, #4
 8002a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a70:	f240 2301 	movw	r3, #513	; 0x201
 8002a74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8002a9e:	e02d      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	623b      	str	r3, [r7, #32]
      break;
 8002aa4:	e02d      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ab8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0c5b      	lsrs	r3, r3, #17
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ade:	fb02 f203 	mul.w	r2, r2, r3
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc90      	pop	{r4, r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	0800710c 	.word	0x0800710c
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200
 8002b1c:	003d0900 	.word	0x003d0900

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800712c 	.word	0x0800712c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800712c 	.word	0x0800712c

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCC_Delay+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <RCC_Delay+0x38>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba0:	bf00      	nop
  }
  while (Delay --);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <RCC_Delay+0x1c>
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fe34 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fc28 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e03a      	b.n	8002cee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIM_Base_Start_IT+0x98>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_TIM_Base_Start_IT+0x9c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d010      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	e007      	b.n	8002cec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f839 	bl	8002da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fb86 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x24>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e022      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d109      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x3e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e015      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x58>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e05e      	b.n	8002ee4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x82>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	e013      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x92>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e44:	e00b      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0xa2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e54:	e003      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fd74 	bl	8003954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_TIM_PWM_Start+0x138>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d107      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_TIM_PWM_Start+0x138>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_TIM_PWM_Start+0x13c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_TIM_PWM_Start+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d010      	beq.n	8002ee2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	e007      	b.n	8002ee2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800

08002ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0202 	mvn.w	r2, #2
 8002f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa6f 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa62 	bl	800340c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa71 	bl	8003430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0204 	mvn.w	r2, #4
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa45 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa38 	bl	800340c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fa47 	bl	8003430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0208 	mvn.w	r2, #8
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa1b 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa0e 	bl	800340c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa1d 	bl	8003430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2208      	movs	r2, #8
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9f1 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9e4 	bl	800340c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f9f3 	bl	8003430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0201 	mvn.w	r2, #1
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f80a 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fd32 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f9b7 	bl	8003442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0220 	mvn.w	r2, #32
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fcfd 	bl	8003afa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e0ac      	b.n	800327c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	f200 809f 	bhi.w	8003270 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800316d 	.word	0x0800316d
 800313c:	08003271 	.word	0x08003271
 8003140:	08003271 	.word	0x08003271
 8003144:	08003271 	.word	0x08003271
 8003148:	080031ad 	.word	0x080031ad
 800314c:	08003271 	.word	0x08003271
 8003150:	08003271 	.word	0x08003271
 8003154:	08003271 	.word	0x08003271
 8003158:	080031ef 	.word	0x080031ef
 800315c:	08003271 	.word	0x08003271
 8003160:	08003271 	.word	0x08003271
 8003164:	08003271 	.word	0x08003271
 8003168:	0800322f 	.word	0x0800322f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f9d0 	bl	8003518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0208 	orr.w	r2, r2, #8
 8003186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
      break;
 80031aa:	e062      	b.n	8003272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fa16 	bl	80035e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
      break;
 80031ec:	e041      	b.n	8003272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fa5f 	bl	80036b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0208 	orr.w	r2, r2, #8
 8003208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0204 	bic.w	r2, r2, #4
 8003218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69d9      	ldr	r1, [r3, #28]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	61da      	str	r2, [r3, #28]
      break;
 800322c:	e021      	b.n	8003272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 faa9 	bl	800378c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
      break;
 800326e:	e000      	b.n	8003272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003270:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIM_ConfigClockSource+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e0b3      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x180>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d4:	d03e      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0xd0>
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032da:	f200 8087 	bhi.w	80033ec <HAL_TIM_ConfigClockSource+0x168>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	f000 8085 	beq.w	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	d87f      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d01a      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0xa2>
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d87b      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d050      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x116>
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d877      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d03c      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xf6>
 8003300:	2b50      	cmp	r3, #80	; 0x50
 8003302:	d873      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d058      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x136>
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d86f      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d064      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x156>
 8003310:	2b30      	cmp	r3, #48	; 0x30
 8003312:	d86b      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d060      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x156>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d867      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05c      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x156>
 8003320:	2b10      	cmp	r3, #16
 8003322:	d05a      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003324:	e062      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f000 faee 	bl	8003916 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003348:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
      break;
 8003352:	e04e      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f000 fad7 	bl	8003916 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003376:	609a      	str	r2, [r3, #8]
      break;
 8003378:	e03b      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fa4e 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2150      	movs	r1, #80	; 0x50
 8003392:	4618      	mov	r0, r3
 8003394:	f000 faa5 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 8003398:	e02b      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 fa6c 	bl	8003884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2160      	movs	r1, #96	; 0x60
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa95 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 80033b8:	e01b      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fa2e 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa85 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e00b      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f000 fa7c 	bl	80038e2 <TIM_ITRx_SetConfig>
        break;
 80033ea:	e002      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <TIM_Base_SetConfig+0xb8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a26      	ldr	r2, [pc, #152]	; (8003510 <TIM_Base_SetConfig+0xbc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a25      	ldr	r2, [pc, #148]	; (8003514 <TIM_Base_SetConfig+0xc0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <TIM_Base_SetConfig+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d007      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <TIM_Base_SetConfig+0xbc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <TIM_Base_SetConfig+0xc0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <TIM_Base_SetConfig+0xb8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	615a      	str	r2, [r3, #20]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800

08003518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 0302 	bic.w	r3, r3, #2
 8003560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <TIM_OC1_SetConfig+0xc8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10c      	bne.n	800358e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0308 	bic.w	r3, r3, #8
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <TIM_OC1_SetConfig+0xc8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d111      	bne.n	80035ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0320 	bic.w	r3, r3, #32
 800362e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC2_SetConfig+0xd0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10d      	bne.n	8003660 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <TIM_OC2_SetConfig+0xd0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d113      	bne.n	8003690 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800366e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <TIM_OC3_SetConfig+0xd0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10d      	bne.n	8003732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <TIM_OC3_SetConfig+0xd0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00

0800378c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	031b      	lsls	r3, r3, #12
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <TIM_OC4_SetConfig+0x98>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d109      	bne.n	8003800 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	031b      	lsls	r3, r3, #12
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f043 0307 	orr.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	609a      	str	r2, [r3, #8]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e046      	b.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d009      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800

08003a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e03d      	b.n	8003af0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e03f      	b.n	8003bb0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd fef9 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2224      	movs	r2, #36	; 0x24
 8003b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 faa6 	bl	80040b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d140      	bne.n	8003c54 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_UART_Receive_IT+0x26>
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e039      	b.n	8003c56 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Receive_IT+0x38>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e032      	b.n	8003c56 <HAL_UART_Receive_IT+0x9e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2222      	movs	r2, #34	; 0x22
 8003c14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x52>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f982 	bl	8003fb4 <UART_Receive_IT>
      return;
 8003cb0:	e0d0      	b.n	8003e54 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80b0 	beq.w	8003e1a <HAL_UART_IRQHandler+0x1ba>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x70>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80a5 	beq.w	8003e1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x90>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f043 0201 	orr.w	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_UART_IRQHandler+0xb0>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f043 0202 	orr.w	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_UART_IRQHandler+0xd0>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	f043 0204 	orr.w	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <HAL_UART_IRQHandler+0xfa>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <HAL_UART_IRQHandler+0xee>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d077      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_UART_IRQHandler+0x11c>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f91c 	bl	8003fb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_UART_IRQHandler+0x144>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d031      	beq.n	8003e08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f86d 	bl	8003e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <HAL_UART_IRQHandler+0x1fc>)
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe f8ab 	bl	8001f38 <HAL_DMA_Abort_IT>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d016      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df2:	4610      	mov	r0, r2
 8003df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	e00e      	b.n	8003e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f83a 	bl	8003e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfe:	e00a      	b.n	8003e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f836 	bl	8003e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e06:	e006      	b.n	8003e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f832 	bl	8003e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e14:	e01d      	b.n	8003e52 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e16:	bf00      	nop
    return;
 8003e18:	e01b      	b.n	8003e52 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1d6>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f859 	bl	8003ee6 <UART_Transmit_IT>
    return;
 8003e34:	e00e      	b.n	8003e54 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_UART_IRQHandler+0x1f4>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f89a 	bl	8003f84 <UART_EndTransmit_IT>
    return;
 8003e50:	e000      	b.n	8003e54 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003e52:	bf00      	nop
  }
}
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08003ebf 	.word	0x08003ebf

08003e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ffca 	bl	8003e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b21      	cmp	r3, #33	; 0x21
 8003ef8:	d13e      	bne.n	8003f78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d114      	bne.n	8003f2e <UART_Transmit_IT+0x48>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e008      	b.n	8003f40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	1c59      	adds	r1, r3, #1
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6211      	str	r1, [r2, #32]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff5b 	bl	8003e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b22      	cmp	r3, #34	; 0x22
 8003fc6:	d170      	bne.n	80040aa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d117      	bne.n	8004002 <UART_Receive_IT+0x4e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8004000:	e026      	b.n	8004050 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d007      	beq.n	8004026 <UART_Receive_IT+0x72>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <UART_Receive_IT+0x80>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e008      	b.n	8004046 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004060:	2b00      	cmp	r3, #0
 8004062:	d120      	bne.n	80040a6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0220 	bic.w	r2, r2, #32
 8004072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc ffe5 	bl	800106c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e002      	b.n	80040ac <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ee:	f023 030c 	bic.w	r3, r3, #12
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <UART_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800411c:	f7fe fd1e 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	e002      	b.n	800412a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004124:	f7fe fd06 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4a22      	ldr	r2, [pc, #136]	; (80041cc <UART_SetConfig+0x118>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	0119      	lsls	r1, r3, #4
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <UART_SetConfig+0x118>)
 8004162:	fba3 0302 	umull	r0, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2064      	movs	r0, #100	; 0x64
 800416a:	fb00 f303 	mul.w	r3, r0, r3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <UART_SetConfig+0x118>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	4419      	add	r1, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fbb2 f2f3 	udiv	r2, r2, r3
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <UART_SetConfig+0x118>)
 800419a:	fba3 0302 	umull	r0, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2064      	movs	r0, #100	; 0x64
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	3332      	adds	r3, #50	; 0x32
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <UART_SetConfig+0x118>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	440a      	add	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40013800 	.word	0x40013800
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <atof>:
 80041d0:	2100      	movs	r1, #0
 80041d2:	f000 be4d 	b.w	8004e70 <strtod>

080041d6 <atoi>:
 80041d6:	220a      	movs	r2, #10
 80041d8:	2100      	movs	r1, #0
 80041da:	f000 bf37 	b.w	800504c <strtol>
	...

080041e0 <__errno>:
 80041e0:	4b01      	ldr	r3, [pc, #4]	; (80041e8 <__errno+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	2600      	movs	r6, #0
 80041f0:	4d0c      	ldr	r5, [pc, #48]	; (8004224 <__libc_init_array+0x38>)
 80041f2:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	f002 ff6e 	bl	80070dc <_init>
 8004200:	2600      	movs	r6, #0
 8004202:	4d0a      	ldr	r5, [pc, #40]	; (800422c <__libc_init_array+0x40>)
 8004204:	4c0a      	ldr	r4, [pc, #40]	; (8004230 <__libc_init_array+0x44>)
 8004206:	1b64      	subs	r4, r4, r5
 8004208:	10a4      	asrs	r4, r4, #2
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	080075d0 	.word	0x080075d0
 8004228:	080075d0 	.word	0x080075d0
 800422c:	080075d0 	.word	0x080075d0
 8004230:	080075d4 	.word	0x080075d4

08004234 <memset>:
 8004234:	4603      	mov	r3, r0
 8004236:	4402      	add	r2, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <sulp>:
 8004244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004248:	460f      	mov	r7, r1
 800424a:	4690      	mov	r8, r2
 800424c:	f001 fe36 	bl	8005ebc <__ulp>
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	f1b8 0f00 	cmp.w	r8, #0
 8004258:	d011      	beq.n	800427e <sulp+0x3a>
 800425a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800425e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd0b      	ble.n	800427e <sulp+0x3a>
 8004266:	2400      	movs	r4, #0
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800426e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f7fc f9e3 	bl	8000640 <__aeabi_dmul>
 800427a:	4604      	mov	r4, r0
 800427c:	460d      	mov	r5, r1
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004288 <_strtod_l>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	469b      	mov	fp, r3
 800428e:	2300      	movs	r3, #0
 8004290:	b0a1      	sub	sp, #132	; 0x84
 8004292:	931c      	str	r3, [sp, #112]	; 0x70
 8004294:	4ba1      	ldr	r3, [pc, #644]	; (800451c <_strtod_l+0x294>)
 8004296:	4682      	mov	sl, r0
 8004298:	681f      	ldr	r7, [r3, #0]
 800429a:	460e      	mov	r6, r1
 800429c:	4638      	mov	r0, r7
 800429e:	9217      	str	r2, [sp, #92]	; 0x5c
 80042a0:	f7fb ff56 	bl	8000150 <strlen>
 80042a4:	f04f 0800 	mov.w	r8, #0
 80042a8:	4604      	mov	r4, r0
 80042aa:	f04f 0900 	mov.w	r9, #0
 80042ae:	961b      	str	r6, [sp, #108]	; 0x6c
 80042b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	2a2b      	cmp	r2, #43	; 0x2b
 80042b6:	d04c      	beq.n	8004352 <_strtod_l+0xca>
 80042b8:	d83a      	bhi.n	8004330 <_strtod_l+0xa8>
 80042ba:	2a0d      	cmp	r2, #13
 80042bc:	d833      	bhi.n	8004326 <_strtod_l+0x9e>
 80042be:	2a08      	cmp	r2, #8
 80042c0:	d833      	bhi.n	800432a <_strtod_l+0xa2>
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d03d      	beq.n	8004342 <_strtod_l+0xba>
 80042c6:	2300      	movs	r3, #0
 80042c8:	930c      	str	r3, [sp, #48]	; 0x30
 80042ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80042cc:	782b      	ldrb	r3, [r5, #0]
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	f040 80af 	bne.w	8004432 <_strtod_l+0x1aa>
 80042d4:	786b      	ldrb	r3, [r5, #1]
 80042d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042da:	2b58      	cmp	r3, #88	; 0x58
 80042dc:	d16c      	bne.n	80043b8 <_strtod_l+0x130>
 80042de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042e0:	4650      	mov	r0, sl
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	ab1c      	add	r3, sp, #112	; 0x70
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4a8d      	ldr	r2, [pc, #564]	; (8004520 <_strtod_l+0x298>)
 80042ea:	f8cd b008 	str.w	fp, [sp, #8]
 80042ee:	ab1d      	add	r3, sp, #116	; 0x74
 80042f0:	a91b      	add	r1, sp, #108	; 0x6c
 80042f2:	f000 ff4d 	bl	8005190 <__gethex>
 80042f6:	f010 0607 	ands.w	r6, r0, #7
 80042fa:	4604      	mov	r4, r0
 80042fc:	d005      	beq.n	800430a <_strtod_l+0x82>
 80042fe:	2e06      	cmp	r6, #6
 8004300:	d129      	bne.n	8004356 <_strtod_l+0xce>
 8004302:	2300      	movs	r3, #0
 8004304:	3501      	adds	r5, #1
 8004306:	951b      	str	r5, [sp, #108]	; 0x6c
 8004308:	930c      	str	r3, [sp, #48]	; 0x30
 800430a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 8596 	bne.w	8004e3e <_strtod_l+0xbb6>
 8004312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004314:	b1d3      	cbz	r3, 800434c <_strtod_l+0xc4>
 8004316:	4642      	mov	r2, r8
 8004318:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	b021      	add	sp, #132	; 0x84
 8004322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004326:	2a20      	cmp	r2, #32
 8004328:	d1cd      	bne.n	80042c6 <_strtod_l+0x3e>
 800432a:	3301      	adds	r3, #1
 800432c:	931b      	str	r3, [sp, #108]	; 0x6c
 800432e:	e7bf      	b.n	80042b0 <_strtod_l+0x28>
 8004330:	2a2d      	cmp	r2, #45	; 0x2d
 8004332:	d1c8      	bne.n	80042c6 <_strtod_l+0x3e>
 8004334:	2201      	movs	r2, #1
 8004336:	920c      	str	r2, [sp, #48]	; 0x30
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	921b      	str	r2, [sp, #108]	; 0x6c
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1c3      	bne.n	80042ca <_strtod_l+0x42>
 8004342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004344:	961b      	str	r6, [sp, #108]	; 0x6c
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 8577 	bne.w	8004e3a <_strtod_l+0xbb2>
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	e7e4      	b.n	800431c <_strtod_l+0x94>
 8004352:	2200      	movs	r2, #0
 8004354:	e7ef      	b.n	8004336 <_strtod_l+0xae>
 8004356:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004358:	b13a      	cbz	r2, 800436a <_strtod_l+0xe2>
 800435a:	2135      	movs	r1, #53	; 0x35
 800435c:	a81e      	add	r0, sp, #120	; 0x78
 800435e:	f001 feb1 	bl	80060c4 <__copybits>
 8004362:	4650      	mov	r0, sl
 8004364:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004366:	f001 fa79 	bl	800585c <_Bfree>
 800436a:	3e01      	subs	r6, #1
 800436c:	2e05      	cmp	r6, #5
 800436e:	d807      	bhi.n	8004380 <_strtod_l+0xf8>
 8004370:	e8df f006 	tbb	[pc, r6]
 8004374:	1d180b0e 	.word	0x1d180b0e
 8004378:	030e      	.short	0x030e
 800437a:	f04f 0900 	mov.w	r9, #0
 800437e:	46c8      	mov	r8, r9
 8004380:	0721      	lsls	r1, r4, #28
 8004382:	d5c2      	bpl.n	800430a <_strtod_l+0x82>
 8004384:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004388:	e7bf      	b.n	800430a <_strtod_l+0x82>
 800438a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800438e:	e7f7      	b.n	8004380 <_strtod_l+0xf8>
 8004390:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004392:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800439a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800439e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80043a2:	e7ed      	b.n	8004380 <_strtod_l+0xf8>
 80043a4:	f04f 0800 	mov.w	r8, #0
 80043a8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004524 <_strtod_l+0x29c>
 80043ac:	e7e8      	b.n	8004380 <_strtod_l+0xf8>
 80043ae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80043b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80043b6:	e7e3      	b.n	8004380 <_strtod_l+0xf8>
 80043b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d0f9      	beq.n	80043b8 <_strtod_l+0x130>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0a0      	beq.n	800430a <_strtod_l+0x82>
 80043c8:	2301      	movs	r3, #1
 80043ca:	9307      	str	r3, [sp, #28]
 80043cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043ce:	220a      	movs	r2, #10
 80043d0:	9308      	str	r3, [sp, #32]
 80043d2:	2300      	movs	r3, #0
 80043d4:	469b      	mov	fp, r3
 80043d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80043da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80043dc:	7805      	ldrb	r5, [r0, #0]
 80043de:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80043e2:	b2d9      	uxtb	r1, r3
 80043e4:	2909      	cmp	r1, #9
 80043e6:	d926      	bls.n	8004436 <_strtod_l+0x1ae>
 80043e8:	4622      	mov	r2, r4
 80043ea:	4639      	mov	r1, r7
 80043ec:	f002 fa66 	bl	80068bc <strncmp>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d032      	beq.n	800445a <_strtod_l+0x1d2>
 80043f4:	2000      	movs	r0, #0
 80043f6:	462b      	mov	r3, r5
 80043f8:	465c      	mov	r4, fp
 80043fa:	4602      	mov	r2, r0
 80043fc:	9004      	str	r0, [sp, #16]
 80043fe:	2b65      	cmp	r3, #101	; 0x65
 8004400:	d001      	beq.n	8004406 <_strtod_l+0x17e>
 8004402:	2b45      	cmp	r3, #69	; 0x45
 8004404:	d113      	bne.n	800442e <_strtod_l+0x1a6>
 8004406:	b91c      	cbnz	r4, 8004410 <_strtod_l+0x188>
 8004408:	9b07      	ldr	r3, [sp, #28]
 800440a:	4303      	orrs	r3, r0
 800440c:	d099      	beq.n	8004342 <_strtod_l+0xba>
 800440e:	2400      	movs	r4, #0
 8004410:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004412:	1c73      	adds	r3, r6, #1
 8004414:	931b      	str	r3, [sp, #108]	; 0x6c
 8004416:	7873      	ldrb	r3, [r6, #1]
 8004418:	2b2b      	cmp	r3, #43	; 0x2b
 800441a:	d078      	beq.n	800450e <_strtod_l+0x286>
 800441c:	2b2d      	cmp	r3, #45	; 0x2d
 800441e:	d07b      	beq.n	8004518 <_strtod_l+0x290>
 8004420:	2700      	movs	r7, #0
 8004422:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004426:	2909      	cmp	r1, #9
 8004428:	f240 8082 	bls.w	8004530 <_strtod_l+0x2a8>
 800442c:	961b      	str	r6, [sp, #108]	; 0x6c
 800442e:	2500      	movs	r5, #0
 8004430:	e09e      	b.n	8004570 <_strtod_l+0x2e8>
 8004432:	2300      	movs	r3, #0
 8004434:	e7c9      	b.n	80043ca <_strtod_l+0x142>
 8004436:	f1bb 0f08 	cmp.w	fp, #8
 800443a:	bfd5      	itete	le
 800443c:	9906      	ldrle	r1, [sp, #24]
 800443e:	9905      	ldrgt	r1, [sp, #20]
 8004440:	fb02 3301 	mlale	r3, r2, r1, r3
 8004444:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004448:	f100 0001 	add.w	r0, r0, #1
 800444c:	bfd4      	ite	le
 800444e:	9306      	strle	r3, [sp, #24]
 8004450:	9305      	strgt	r3, [sp, #20]
 8004452:	f10b 0b01 	add.w	fp, fp, #1
 8004456:	901b      	str	r0, [sp, #108]	; 0x6c
 8004458:	e7bf      	b.n	80043da <_strtod_l+0x152>
 800445a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800445c:	191a      	adds	r2, r3, r4
 800445e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004460:	5d1b      	ldrb	r3, [r3, r4]
 8004462:	f1bb 0f00 	cmp.w	fp, #0
 8004466:	d036      	beq.n	80044d6 <_strtod_l+0x24e>
 8004468:	465c      	mov	r4, fp
 800446a:	9004      	str	r0, [sp, #16]
 800446c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004470:	2a09      	cmp	r2, #9
 8004472:	d912      	bls.n	800449a <_strtod_l+0x212>
 8004474:	2201      	movs	r2, #1
 8004476:	e7c2      	b.n	80043fe <_strtod_l+0x176>
 8004478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800447a:	3001      	adds	r0, #1
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	2b30      	cmp	r3, #48	; 0x30
 8004484:	d0f8      	beq.n	8004478 <_strtod_l+0x1f0>
 8004486:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800448a:	2a08      	cmp	r2, #8
 800448c:	f200 84dc 	bhi.w	8004e48 <_strtod_l+0xbc0>
 8004490:	9004      	str	r0, [sp, #16]
 8004492:	2000      	movs	r0, #0
 8004494:	4604      	mov	r4, r0
 8004496:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004498:	9208      	str	r2, [sp, #32]
 800449a:	3b30      	subs	r3, #48	; 0x30
 800449c:	f100 0201 	add.w	r2, r0, #1
 80044a0:	d013      	beq.n	80044ca <_strtod_l+0x242>
 80044a2:	9904      	ldr	r1, [sp, #16]
 80044a4:	1905      	adds	r5, r0, r4
 80044a6:	4411      	add	r1, r2
 80044a8:	9104      	str	r1, [sp, #16]
 80044aa:	4622      	mov	r2, r4
 80044ac:	210a      	movs	r1, #10
 80044ae:	42aa      	cmp	r2, r5
 80044b0:	d113      	bne.n	80044da <_strtod_l+0x252>
 80044b2:	1822      	adds	r2, r4, r0
 80044b4:	2a08      	cmp	r2, #8
 80044b6:	f104 0401 	add.w	r4, r4, #1
 80044ba:	4404      	add	r4, r0
 80044bc:	dc1b      	bgt.n	80044f6 <_strtod_l+0x26e>
 80044be:	220a      	movs	r2, #10
 80044c0:	9906      	ldr	r1, [sp, #24]
 80044c2:	fb02 3301 	mla	r3, r2, r1, r3
 80044c6:	9306      	str	r3, [sp, #24]
 80044c8:	2200      	movs	r2, #0
 80044ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044cc:	4610      	mov	r0, r2
 80044ce:	1c59      	adds	r1, r3, #1
 80044d0:	911b      	str	r1, [sp, #108]	; 0x6c
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	e7ca      	b.n	800446c <_strtod_l+0x1e4>
 80044d6:	4658      	mov	r0, fp
 80044d8:	e7d3      	b.n	8004482 <_strtod_l+0x1fa>
 80044da:	2a08      	cmp	r2, #8
 80044dc:	dc04      	bgt.n	80044e8 <_strtod_l+0x260>
 80044de:	9f06      	ldr	r7, [sp, #24]
 80044e0:	434f      	muls	r7, r1
 80044e2:	9706      	str	r7, [sp, #24]
 80044e4:	3201      	adds	r2, #1
 80044e6:	e7e2      	b.n	80044ae <_strtod_l+0x226>
 80044e8:	1c57      	adds	r7, r2, #1
 80044ea:	2f10      	cmp	r7, #16
 80044ec:	bfde      	ittt	le
 80044ee:	9f05      	ldrle	r7, [sp, #20]
 80044f0:	434f      	mulle	r7, r1
 80044f2:	9705      	strle	r7, [sp, #20]
 80044f4:	e7f6      	b.n	80044e4 <_strtod_l+0x25c>
 80044f6:	2c10      	cmp	r4, #16
 80044f8:	bfdf      	itttt	le
 80044fa:	220a      	movle	r2, #10
 80044fc:	9905      	ldrle	r1, [sp, #20]
 80044fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8004502:	9305      	strle	r3, [sp, #20]
 8004504:	e7e0      	b.n	80044c8 <_strtod_l+0x240>
 8004506:	2300      	movs	r3, #0
 8004508:	2201      	movs	r2, #1
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	e77c      	b.n	8004408 <_strtod_l+0x180>
 800450e:	2700      	movs	r7, #0
 8004510:	1cb3      	adds	r3, r6, #2
 8004512:	931b      	str	r3, [sp, #108]	; 0x6c
 8004514:	78b3      	ldrb	r3, [r6, #2]
 8004516:	e784      	b.n	8004422 <_strtod_l+0x19a>
 8004518:	2701      	movs	r7, #1
 800451a:	e7f9      	b.n	8004510 <_strtod_l+0x288>
 800451c:	080073c8 	.word	0x080073c8
 8004520:	08007144 	.word	0x08007144
 8004524:	7ff00000 	.word	0x7ff00000
 8004528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	911b      	str	r1, [sp, #108]	; 0x6c
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b30      	cmp	r3, #48	; 0x30
 8004532:	d0f9      	beq.n	8004528 <_strtod_l+0x2a0>
 8004534:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004538:	2908      	cmp	r1, #8
 800453a:	f63f af78 	bhi.w	800442e <_strtod_l+0x1a6>
 800453e:	f04f 0e0a 	mov.w	lr, #10
 8004542:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004548:	9309      	str	r3, [sp, #36]	; 0x24
 800454a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004556:	2d09      	cmp	r5, #9
 8004558:	d935      	bls.n	80045c6 <_strtod_l+0x33e>
 800455a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800455c:	1b49      	subs	r1, r1, r5
 800455e:	2908      	cmp	r1, #8
 8004560:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004564:	dc02      	bgt.n	800456c <_strtod_l+0x2e4>
 8004566:	4565      	cmp	r5, ip
 8004568:	bfa8      	it	ge
 800456a:	4665      	movge	r5, ip
 800456c:	b107      	cbz	r7, 8004570 <_strtod_l+0x2e8>
 800456e:	426d      	negs	r5, r5
 8004570:	2c00      	cmp	r4, #0
 8004572:	d14c      	bne.n	800460e <_strtod_l+0x386>
 8004574:	9907      	ldr	r1, [sp, #28]
 8004576:	4301      	orrs	r1, r0
 8004578:	f47f aec7 	bne.w	800430a <_strtod_l+0x82>
 800457c:	2a00      	cmp	r2, #0
 800457e:	f47f aee0 	bne.w	8004342 <_strtod_l+0xba>
 8004582:	2b69      	cmp	r3, #105	; 0x69
 8004584:	d026      	beq.n	80045d4 <_strtod_l+0x34c>
 8004586:	dc23      	bgt.n	80045d0 <_strtod_l+0x348>
 8004588:	2b49      	cmp	r3, #73	; 0x49
 800458a:	d023      	beq.n	80045d4 <_strtod_l+0x34c>
 800458c:	2b4e      	cmp	r3, #78	; 0x4e
 800458e:	f47f aed8 	bne.w	8004342 <_strtod_l+0xba>
 8004592:	499c      	ldr	r1, [pc, #624]	; (8004804 <_strtod_l+0x57c>)
 8004594:	a81b      	add	r0, sp, #108	; 0x6c
 8004596:	f001 f849 	bl	800562c <__match>
 800459a:	2800      	cmp	r0, #0
 800459c:	f43f aed1 	beq.w	8004342 <_strtod_l+0xba>
 80045a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d12c      	bne.n	8004602 <_strtod_l+0x37a>
 80045a8:	4997      	ldr	r1, [pc, #604]	; (8004808 <_strtod_l+0x580>)
 80045aa:	aa1e      	add	r2, sp, #120	; 0x78
 80045ac:	a81b      	add	r0, sp, #108	; 0x6c
 80045ae:	f001 f851 	bl	8005654 <__hexnan>
 80045b2:	2805      	cmp	r0, #5
 80045b4:	d125      	bne.n	8004602 <_strtod_l+0x37a>
 80045b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045b8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80045bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80045c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80045c4:	e6a1      	b.n	800430a <_strtod_l+0x82>
 80045c6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80045ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80045ce:	e7bc      	b.n	800454a <_strtod_l+0x2c2>
 80045d0:	2b6e      	cmp	r3, #110	; 0x6e
 80045d2:	e7dc      	b.n	800458e <_strtod_l+0x306>
 80045d4:	498d      	ldr	r1, [pc, #564]	; (800480c <_strtod_l+0x584>)
 80045d6:	a81b      	add	r0, sp, #108	; 0x6c
 80045d8:	f001 f828 	bl	800562c <__match>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f43f aeb0 	beq.w	8004342 <_strtod_l+0xba>
 80045e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045e4:	498a      	ldr	r1, [pc, #552]	; (8004810 <_strtod_l+0x588>)
 80045e6:	3b01      	subs	r3, #1
 80045e8:	a81b      	add	r0, sp, #108	; 0x6c
 80045ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80045ec:	f001 f81e 	bl	800562c <__match>
 80045f0:	b910      	cbnz	r0, 80045f8 <_strtod_l+0x370>
 80045f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045f4:	3301      	adds	r3, #1
 80045f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80045f8:	f04f 0800 	mov.w	r8, #0
 80045fc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004820 <_strtod_l+0x598>
 8004600:	e683      	b.n	800430a <_strtod_l+0x82>
 8004602:	4884      	ldr	r0, [pc, #528]	; (8004814 <_strtod_l+0x58c>)
 8004604:	f002 f944 	bl	8006890 <nan>
 8004608:	4680      	mov	r8, r0
 800460a:	4689      	mov	r9, r1
 800460c:	e67d      	b.n	800430a <_strtod_l+0x82>
 800460e:	9b04      	ldr	r3, [sp, #16]
 8004610:	f1bb 0f00 	cmp.w	fp, #0
 8004614:	bf08      	it	eq
 8004616:	46a3      	moveq	fp, r4
 8004618:	1aeb      	subs	r3, r5, r3
 800461a:	2c10      	cmp	r4, #16
 800461c:	9806      	ldr	r0, [sp, #24]
 800461e:	4626      	mov	r6, r4
 8004620:	9307      	str	r3, [sp, #28]
 8004622:	bfa8      	it	ge
 8004624:	2610      	movge	r6, #16
 8004626:	f7fb ff91 	bl	800054c <__aeabi_ui2d>
 800462a:	2c09      	cmp	r4, #9
 800462c:	4680      	mov	r8, r0
 800462e:	4689      	mov	r9, r1
 8004630:	dd13      	ble.n	800465a <_strtod_l+0x3d2>
 8004632:	4b79      	ldr	r3, [pc, #484]	; (8004818 <_strtod_l+0x590>)
 8004634:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004638:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800463c:	f7fc f800 	bl	8000640 <__aeabi_dmul>
 8004640:	4680      	mov	r8, r0
 8004642:	9805      	ldr	r0, [sp, #20]
 8004644:	4689      	mov	r9, r1
 8004646:	f7fb ff81 	bl	800054c <__aeabi_ui2d>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	f7fb fe3f 	bl	80002d4 <__adddf3>
 8004656:	4680      	mov	r8, r0
 8004658:	4689      	mov	r9, r1
 800465a:	2c0f      	cmp	r4, #15
 800465c:	dc36      	bgt.n	80046cc <_strtod_l+0x444>
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f43f ae52 	beq.w	800430a <_strtod_l+0x82>
 8004666:	dd22      	ble.n	80046ae <_strtod_l+0x426>
 8004668:	2b16      	cmp	r3, #22
 800466a:	dc09      	bgt.n	8004680 <_strtod_l+0x3f8>
 800466c:	4c6a      	ldr	r4, [pc, #424]	; (8004818 <_strtod_l+0x590>)
 800466e:	4642      	mov	r2, r8
 8004670:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004674:	464b      	mov	r3, r9
 8004676:	e9d4 0100 	ldrd	r0, r1, [r4]
 800467a:	f7fb ffe1 	bl	8000640 <__aeabi_dmul>
 800467e:	e7c3      	b.n	8004608 <_strtod_l+0x380>
 8004680:	9a07      	ldr	r2, [sp, #28]
 8004682:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004686:	4293      	cmp	r3, r2
 8004688:	db20      	blt.n	80046cc <_strtod_l+0x444>
 800468a:	4d63      	ldr	r5, [pc, #396]	; (8004818 <_strtod_l+0x590>)
 800468c:	f1c4 040f 	rsb	r4, r4, #15
 8004690:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004694:	4642      	mov	r2, r8
 8004696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800469a:	464b      	mov	r3, r9
 800469c:	f7fb ffd0 	bl	8000640 <__aeabi_dmul>
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	1b1c      	subs	r4, r3, r4
 80046a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80046a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046ac:	e7e5      	b.n	800467a <_strtod_l+0x3f2>
 80046ae:	9b07      	ldr	r3, [sp, #28]
 80046b0:	3316      	adds	r3, #22
 80046b2:	db0b      	blt.n	80046cc <_strtod_l+0x444>
 80046b4:	9b04      	ldr	r3, [sp, #16]
 80046b6:	4a58      	ldr	r2, [pc, #352]	; (8004818 <_strtod_l+0x590>)
 80046b8:	1b5d      	subs	r5, r3, r5
 80046ba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80046be:	4640      	mov	r0, r8
 80046c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fc f8e5 	bl	8000894 <__aeabi_ddiv>
 80046ca:	e79d      	b.n	8004608 <_strtod_l+0x380>
 80046cc:	9b07      	ldr	r3, [sp, #28]
 80046ce:	1ba6      	subs	r6, r4, r6
 80046d0:	441e      	add	r6, r3
 80046d2:	2e00      	cmp	r6, #0
 80046d4:	dd71      	ble.n	80047ba <_strtod_l+0x532>
 80046d6:	f016 030f 	ands.w	r3, r6, #15
 80046da:	d00a      	beq.n	80046f2 <_strtod_l+0x46a>
 80046dc:	494e      	ldr	r1, [pc, #312]	; (8004818 <_strtod_l+0x590>)
 80046de:	4642      	mov	r2, r8
 80046e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80046e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046e8:	464b      	mov	r3, r9
 80046ea:	f7fb ffa9 	bl	8000640 <__aeabi_dmul>
 80046ee:	4680      	mov	r8, r0
 80046f0:	4689      	mov	r9, r1
 80046f2:	f036 060f 	bics.w	r6, r6, #15
 80046f6:	d050      	beq.n	800479a <_strtod_l+0x512>
 80046f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80046fc:	dd27      	ble.n	800474e <_strtod_l+0x4c6>
 80046fe:	f04f 0b00 	mov.w	fp, #0
 8004702:	f8cd b010 	str.w	fp, [sp, #16]
 8004706:	f8cd b020 	str.w	fp, [sp, #32]
 800470a:	f8cd b018 	str.w	fp, [sp, #24]
 800470e:	2322      	movs	r3, #34	; 0x22
 8004710:	f04f 0800 	mov.w	r8, #0
 8004714:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004820 <_strtod_l+0x598>
 8004718:	f8ca 3000 	str.w	r3, [sl]
 800471c:	9b08      	ldr	r3, [sp, #32]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f43f adf3 	beq.w	800430a <_strtod_l+0x82>
 8004724:	4650      	mov	r0, sl
 8004726:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004728:	f001 f898 	bl	800585c <_Bfree>
 800472c:	4650      	mov	r0, sl
 800472e:	9906      	ldr	r1, [sp, #24]
 8004730:	f001 f894 	bl	800585c <_Bfree>
 8004734:	4650      	mov	r0, sl
 8004736:	9904      	ldr	r1, [sp, #16]
 8004738:	f001 f890 	bl	800585c <_Bfree>
 800473c:	4650      	mov	r0, sl
 800473e:	9908      	ldr	r1, [sp, #32]
 8004740:	f001 f88c 	bl	800585c <_Bfree>
 8004744:	4659      	mov	r1, fp
 8004746:	4650      	mov	r0, sl
 8004748:	f001 f888 	bl	800585c <_Bfree>
 800474c:	e5dd      	b.n	800430a <_strtod_l+0x82>
 800474e:	2300      	movs	r3, #0
 8004750:	4640      	mov	r0, r8
 8004752:	4649      	mov	r1, r9
 8004754:	461f      	mov	r7, r3
 8004756:	1136      	asrs	r6, r6, #4
 8004758:	2e01      	cmp	r6, #1
 800475a:	dc21      	bgt.n	80047a0 <_strtod_l+0x518>
 800475c:	b10b      	cbz	r3, 8004762 <_strtod_l+0x4da>
 800475e:	4680      	mov	r8, r0
 8004760:	4689      	mov	r9, r1
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <_strtod_l+0x594>)
 8004764:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004768:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800476c:	4642      	mov	r2, r8
 800476e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004772:	464b      	mov	r3, r9
 8004774:	f7fb ff64 	bl	8000640 <__aeabi_dmul>
 8004778:	4b29      	ldr	r3, [pc, #164]	; (8004820 <_strtod_l+0x598>)
 800477a:	460a      	mov	r2, r1
 800477c:	400b      	ands	r3, r1
 800477e:	4929      	ldr	r1, [pc, #164]	; (8004824 <_strtod_l+0x59c>)
 8004780:	4680      	mov	r8, r0
 8004782:	428b      	cmp	r3, r1
 8004784:	d8bb      	bhi.n	80046fe <_strtod_l+0x476>
 8004786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800478a:	428b      	cmp	r3, r1
 800478c:	bf86      	itte	hi
 800478e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004792:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004828 <_strtod_l+0x5a0>
 8004796:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800479a:	2300      	movs	r3, #0
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	e07e      	b.n	800489e <_strtod_l+0x616>
 80047a0:	07f2      	lsls	r2, r6, #31
 80047a2:	d507      	bpl.n	80047b4 <_strtod_l+0x52c>
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <_strtod_l+0x594>)
 80047a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb ff47 	bl	8000640 <__aeabi_dmul>
 80047b2:	2301      	movs	r3, #1
 80047b4:	3701      	adds	r7, #1
 80047b6:	1076      	asrs	r6, r6, #1
 80047b8:	e7ce      	b.n	8004758 <_strtod_l+0x4d0>
 80047ba:	d0ee      	beq.n	800479a <_strtod_l+0x512>
 80047bc:	4276      	negs	r6, r6
 80047be:	f016 020f 	ands.w	r2, r6, #15
 80047c2:	d00a      	beq.n	80047da <_strtod_l+0x552>
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <_strtod_l+0x590>)
 80047c6:	4640      	mov	r0, r8
 80047c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047cc:	4649      	mov	r1, r9
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fc f85f 	bl	8000894 <__aeabi_ddiv>
 80047d6:	4680      	mov	r8, r0
 80047d8:	4689      	mov	r9, r1
 80047da:	1136      	asrs	r6, r6, #4
 80047dc:	d0dd      	beq.n	800479a <_strtod_l+0x512>
 80047de:	2e1f      	cmp	r6, #31
 80047e0:	dd24      	ble.n	800482c <_strtod_l+0x5a4>
 80047e2:	f04f 0b00 	mov.w	fp, #0
 80047e6:	f8cd b010 	str.w	fp, [sp, #16]
 80047ea:	f8cd b020 	str.w	fp, [sp, #32]
 80047ee:	f8cd b018 	str.w	fp, [sp, #24]
 80047f2:	2322      	movs	r3, #34	; 0x22
 80047f4:	f04f 0800 	mov.w	r8, #0
 80047f8:	f04f 0900 	mov.w	r9, #0
 80047fc:	f8ca 3000 	str.w	r3, [sl]
 8004800:	e78c      	b.n	800471c <_strtod_l+0x494>
 8004802:	bf00      	nop
 8004804:	08007141 	.word	0x08007141
 8004808:	08007158 	.word	0x08007158
 800480c:	08007138 	.word	0x08007138
 8004810:	0800713b 	.word	0x0800713b
 8004814:	0800724b 	.word	0x0800724b
 8004818:	08007468 	.word	0x08007468
 800481c:	08007440 	.word	0x08007440
 8004820:	7ff00000 	.word	0x7ff00000
 8004824:	7ca00000 	.word	0x7ca00000
 8004828:	7fefffff 	.word	0x7fefffff
 800482c:	f016 0310 	ands.w	r3, r6, #16
 8004830:	bf18      	it	ne
 8004832:	236a      	movne	r3, #106	; 0x6a
 8004834:	4640      	mov	r0, r8
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	4649      	mov	r1, r9
 800483a:	2300      	movs	r3, #0
 800483c:	4fb2      	ldr	r7, [pc, #712]	; (8004b08 <_strtod_l+0x880>)
 800483e:	07f2      	lsls	r2, r6, #31
 8004840:	d504      	bpl.n	800484c <_strtod_l+0x5c4>
 8004842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004846:	f7fb fefb 	bl	8000640 <__aeabi_dmul>
 800484a:	2301      	movs	r3, #1
 800484c:	1076      	asrs	r6, r6, #1
 800484e:	f107 0708 	add.w	r7, r7, #8
 8004852:	d1f4      	bne.n	800483e <_strtod_l+0x5b6>
 8004854:	b10b      	cbz	r3, 800485a <_strtod_l+0x5d2>
 8004856:	4680      	mov	r8, r0
 8004858:	4689      	mov	r9, r1
 800485a:	9b05      	ldr	r3, [sp, #20]
 800485c:	b1bb      	cbz	r3, 800488e <_strtod_l+0x606>
 800485e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004866:	2b00      	cmp	r3, #0
 8004868:	4649      	mov	r1, r9
 800486a:	dd10      	ble.n	800488e <_strtod_l+0x606>
 800486c:	2b1f      	cmp	r3, #31
 800486e:	f340 812b 	ble.w	8004ac8 <_strtod_l+0x840>
 8004872:	2b34      	cmp	r3, #52	; 0x34
 8004874:	bfd8      	it	le
 8004876:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800487a:	f04f 0800 	mov.w	r8, #0
 800487e:	bfcf      	iteee	gt
 8004880:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004884:	3b20      	suble	r3, #32
 8004886:	fa02 f303 	lslle.w	r3, r2, r3
 800488a:	ea03 0901 	andle.w	r9, r3, r1
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4640      	mov	r0, r8
 8004894:	4649      	mov	r1, r9
 8004896:	f7fc f93b 	bl	8000b10 <__aeabi_dcmpeq>
 800489a:	2800      	cmp	r0, #0
 800489c:	d1a1      	bne.n	80047e2 <_strtod_l+0x55a>
 800489e:	9b06      	ldr	r3, [sp, #24]
 80048a0:	465a      	mov	r2, fp
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4650      	mov	r0, sl
 80048a6:	4623      	mov	r3, r4
 80048a8:	9908      	ldr	r1, [sp, #32]
 80048aa:	f001 f843 	bl	8005934 <__s2b>
 80048ae:	9008      	str	r0, [sp, #32]
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f43f af24 	beq.w	80046fe <_strtod_l+0x476>
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	f04f 0b00 	mov.w	fp, #0
 80048bc:	1b5d      	subs	r5, r3, r5
 80048be:	9b07      	ldr	r3, [sp, #28]
 80048c0:	f8cd b010 	str.w	fp, [sp, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bfb4      	ite	lt
 80048c8:	462b      	movlt	r3, r5
 80048ca:	2300      	movge	r3, #0
 80048cc:	930e      	str	r3, [sp, #56]	; 0x38
 80048ce:	9b07      	ldr	r3, [sp, #28]
 80048d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048d4:	9316      	str	r3, [sp, #88]	; 0x58
 80048d6:	9b08      	ldr	r3, [sp, #32]
 80048d8:	4650      	mov	r0, sl
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	f000 ff7e 	bl	80057dc <_Balloc>
 80048e0:	9006      	str	r0, [sp, #24]
 80048e2:	2800      	cmp	r0, #0
 80048e4:	f43f af13 	beq.w	800470e <_strtod_l+0x486>
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	300c      	adds	r0, #12
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	f103 010c 	add.w	r1, r3, #12
 80048f2:	3202      	adds	r2, #2
 80048f4:	0092      	lsls	r2, r2, #2
 80048f6:	f000 ff63 	bl	80057c0 <memcpy>
 80048fa:	ab1e      	add	r3, sp, #120	; 0x78
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4642      	mov	r2, r8
 8004904:	464b      	mov	r3, r9
 8004906:	4650      	mov	r0, sl
 8004908:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800490c:	f001 fb50 	bl	8005fb0 <__d2b>
 8004910:	901c      	str	r0, [sp, #112]	; 0x70
 8004912:	2800      	cmp	r0, #0
 8004914:	f43f aefb 	beq.w	800470e <_strtod_l+0x486>
 8004918:	2101      	movs	r1, #1
 800491a:	4650      	mov	r0, sl
 800491c:	f001 f8a2 	bl	8005a64 <__i2b>
 8004920:	4603      	mov	r3, r0
 8004922:	9004      	str	r0, [sp, #16]
 8004924:	2800      	cmp	r0, #0
 8004926:	f43f aef2 	beq.w	800470e <_strtod_l+0x486>
 800492a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800492c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800492e:	2d00      	cmp	r5, #0
 8004930:	bfab      	itete	ge
 8004932:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004934:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004936:	18ee      	addge	r6, r5, r3
 8004938:	1b5c      	sublt	r4, r3, r5
 800493a:	9b05      	ldr	r3, [sp, #20]
 800493c:	bfa8      	it	ge
 800493e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004940:	eba5 0503 	sub.w	r5, r5, r3
 8004944:	4415      	add	r5, r2
 8004946:	4b71      	ldr	r3, [pc, #452]	; (8004b0c <_strtod_l+0x884>)
 8004948:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800494c:	bfb8      	it	lt
 800494e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004950:	429d      	cmp	r5, r3
 8004952:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004956:	f280 80c9 	bge.w	8004aec <_strtod_l+0x864>
 800495a:	1b5b      	subs	r3, r3, r5
 800495c:	2b1f      	cmp	r3, #31
 800495e:	f04f 0701 	mov.w	r7, #1
 8004962:	eba2 0203 	sub.w	r2, r2, r3
 8004966:	f300 80b6 	bgt.w	8004ad6 <_strtod_l+0x84e>
 800496a:	2500      	movs	r5, #0
 800496c:	fa07 f303 	lsl.w	r3, r7, r3
 8004970:	930f      	str	r3, [sp, #60]	; 0x3c
 8004972:	18b7      	adds	r7, r6, r2
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	42be      	cmp	r6, r7
 8004978:	4414      	add	r4, r2
 800497a:	441c      	add	r4, r3
 800497c:	4633      	mov	r3, r6
 800497e:	bfa8      	it	ge
 8004980:	463b      	movge	r3, r7
 8004982:	42a3      	cmp	r3, r4
 8004984:	bfa8      	it	ge
 8004986:	4623      	movge	r3, r4
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfc2      	ittt	gt
 800498c:	1aff      	subgt	r7, r7, r3
 800498e:	1ae4      	subgt	r4, r4, r3
 8004990:	1af6      	subgt	r6, r6, r3
 8004992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	dd17      	ble.n	80049c8 <_strtod_l+0x740>
 8004998:	461a      	mov	r2, r3
 800499a:	4650      	mov	r0, sl
 800499c:	9904      	ldr	r1, [sp, #16]
 800499e:	f001 f91b 	bl	8005bd8 <__pow5mult>
 80049a2:	9004      	str	r0, [sp, #16]
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f43f aeb2 	beq.w	800470e <_strtod_l+0x486>
 80049aa:	4601      	mov	r1, r0
 80049ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80049ae:	4650      	mov	r0, sl
 80049b0:	f001 f86e 	bl	8005a90 <__multiply>
 80049b4:	9009      	str	r0, [sp, #36]	; 0x24
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f43f aea9 	beq.w	800470e <_strtod_l+0x486>
 80049bc:	4650      	mov	r0, sl
 80049be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049c0:	f000 ff4c 	bl	800585c <_Bfree>
 80049c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c6:	931c      	str	r3, [sp, #112]	; 0x70
 80049c8:	2f00      	cmp	r7, #0
 80049ca:	f300 8093 	bgt.w	8004af4 <_strtod_l+0x86c>
 80049ce:	9b07      	ldr	r3, [sp, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dd08      	ble.n	80049e6 <_strtod_l+0x75e>
 80049d4:	4650      	mov	r0, sl
 80049d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80049d8:	9906      	ldr	r1, [sp, #24]
 80049da:	f001 f8fd 	bl	8005bd8 <__pow5mult>
 80049de:	9006      	str	r0, [sp, #24]
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f43f ae94 	beq.w	800470e <_strtod_l+0x486>
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	dd08      	ble.n	80049fc <_strtod_l+0x774>
 80049ea:	4622      	mov	r2, r4
 80049ec:	4650      	mov	r0, sl
 80049ee:	9906      	ldr	r1, [sp, #24]
 80049f0:	f001 f94c 	bl	8005c8c <__lshift>
 80049f4:	9006      	str	r0, [sp, #24]
 80049f6:	2800      	cmp	r0, #0
 80049f8:	f43f ae89 	beq.w	800470e <_strtod_l+0x486>
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	dd08      	ble.n	8004a12 <_strtod_l+0x78a>
 8004a00:	4632      	mov	r2, r6
 8004a02:	4650      	mov	r0, sl
 8004a04:	9904      	ldr	r1, [sp, #16]
 8004a06:	f001 f941 	bl	8005c8c <__lshift>
 8004a0a:	9004      	str	r0, [sp, #16]
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f43f ae7e 	beq.w	800470e <_strtod_l+0x486>
 8004a12:	4650      	mov	r0, sl
 8004a14:	9a06      	ldr	r2, [sp, #24]
 8004a16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a18:	f001 f9c0 	bl	8005d9c <__mdiff>
 8004a1c:	4683      	mov	fp, r0
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	f43f ae75 	beq.w	800470e <_strtod_l+0x486>
 8004a24:	2400      	movs	r4, #0
 8004a26:	68c3      	ldr	r3, [r0, #12]
 8004a28:	9904      	ldr	r1, [sp, #16]
 8004a2a:	60c4      	str	r4, [r0, #12]
 8004a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a2e:	f001 f999 	bl	8005d64 <__mcmp>
 8004a32:	42a0      	cmp	r0, r4
 8004a34:	da70      	bge.n	8004b18 <_strtod_l+0x890>
 8004a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a38:	ea53 0308 	orrs.w	r3, r3, r8
 8004a3c:	f040 8096 	bne.w	8004b6c <_strtod_l+0x8e4>
 8004a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 8091 	bne.w	8004b6c <_strtod_l+0x8e4>
 8004a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a4e:	0d1b      	lsrs	r3, r3, #20
 8004a50:	051b      	lsls	r3, r3, #20
 8004a52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a56:	f240 8089 	bls.w	8004b6c <_strtod_l+0x8e4>
 8004a5a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004a5e:	b923      	cbnz	r3, 8004a6a <_strtod_l+0x7e2>
 8004a60:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f340 8081 	ble.w	8004b6c <_strtod_l+0x8e4>
 8004a6a:	4659      	mov	r1, fp
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f001 f90c 	bl	8005c8c <__lshift>
 8004a74:	9904      	ldr	r1, [sp, #16]
 8004a76:	4683      	mov	fp, r0
 8004a78:	f001 f974 	bl	8005d64 <__mcmp>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	dd75      	ble.n	8004b6c <_strtod_l+0x8e4>
 8004a80:	9905      	ldr	r1, [sp, #20]
 8004a82:	464b      	mov	r3, r9
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <_strtod_l+0x888>)
 8004a86:	2900      	cmp	r1, #0
 8004a88:	f000 8091 	beq.w	8004bae <_strtod_l+0x926>
 8004a8c:	ea02 0109 	and.w	r1, r2, r9
 8004a90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a94:	f300 808b 	bgt.w	8004bae <_strtod_l+0x926>
 8004a98:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a9c:	f77f aea9 	ble.w	80047f2 <_strtod_l+0x56a>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <_strtod_l+0x88c>)
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004aaa:	4649      	mov	r1, r9
 8004aac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004ab0:	f7fb fdc6 	bl	8000640 <__aeabi_dmul>
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	bf08      	it	eq
 8004aba:	2322      	moveq	r3, #34	; 0x22
 8004abc:	4680      	mov	r8, r0
 8004abe:	4689      	mov	r9, r1
 8004ac0:	bf08      	it	eq
 8004ac2:	f8ca 3000 	streq.w	r3, [sl]
 8004ac6:	e62d      	b.n	8004724 <_strtod_l+0x49c>
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	ea03 0808 	and.w	r8, r3, r8
 8004ad4:	e6db      	b.n	800488e <_strtod_l+0x606>
 8004ad6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004ada:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004ade:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004ae2:	35e2      	adds	r5, #226	; 0xe2
 8004ae4:	fa07 f505 	lsl.w	r5, r7, r5
 8004ae8:	970f      	str	r7, [sp, #60]	; 0x3c
 8004aea:	e742      	b.n	8004972 <_strtod_l+0x6ea>
 8004aec:	2301      	movs	r3, #1
 8004aee:	2500      	movs	r5, #0
 8004af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004af2:	e73e      	b.n	8004972 <_strtod_l+0x6ea>
 8004af4:	463a      	mov	r2, r7
 8004af6:	4650      	mov	r0, sl
 8004af8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004afa:	f001 f8c7 	bl	8005c8c <__lshift>
 8004afe:	901c      	str	r0, [sp, #112]	; 0x70
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f47f af64 	bne.w	80049ce <_strtod_l+0x746>
 8004b06:	e602      	b.n	800470e <_strtod_l+0x486>
 8004b08:	08007170 	.word	0x08007170
 8004b0c:	fffffc02 	.word	0xfffffc02
 8004b10:	7ff00000 	.word	0x7ff00000
 8004b14:	39500000 	.word	0x39500000
 8004b18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004b1c:	d166      	bne.n	8004bec <_strtod_l+0x964>
 8004b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b24:	b35a      	cbz	r2, 8004b7e <_strtod_l+0x8f6>
 8004b26:	4a9c      	ldr	r2, [pc, #624]	; (8004d98 <_strtod_l+0xb10>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d12c      	bne.n	8004b86 <_strtod_l+0x8fe>
 8004b2c:	9b05      	ldr	r3, [sp, #20]
 8004b2e:	4640      	mov	r0, r8
 8004b30:	b303      	cbz	r3, 8004b74 <_strtod_l+0x8ec>
 8004b32:	464b      	mov	r3, r9
 8004b34:	4a99      	ldr	r2, [pc, #612]	; (8004d9c <_strtod_l+0xb14>)
 8004b36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004b40:	d81b      	bhi.n	8004b7a <_strtod_l+0x8f2>
 8004b42:	0d12      	lsrs	r2, r2, #20
 8004b44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	4298      	cmp	r0, r3
 8004b4e:	d11a      	bne.n	8004b86 <_strtod_l+0x8fe>
 8004b50:	4b93      	ldr	r3, [pc, #588]	; (8004da0 <_strtod_l+0xb18>)
 8004b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d102      	bne.n	8004b5e <_strtod_l+0x8d6>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f add8 	beq.w	800470e <_strtod_l+0x486>
 8004b5e:	f04f 0800 	mov.w	r8, #0
 8004b62:	4b8e      	ldr	r3, [pc, #568]	; (8004d9c <_strtod_l+0xb14>)
 8004b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b66:	401a      	ands	r2, r3
 8004b68:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004b6c:	9b05      	ldr	r3, [sp, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d196      	bne.n	8004aa0 <_strtod_l+0x818>
 8004b72:	e5d7      	b.n	8004724 <_strtod_l+0x49c>
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b78:	e7e8      	b.n	8004b4c <_strtod_l+0x8c4>
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	e7e6      	b.n	8004b4c <_strtod_l+0x8c4>
 8004b7e:	ea53 0308 	orrs.w	r3, r3, r8
 8004b82:	f43f af7d 	beq.w	8004a80 <_strtod_l+0x7f8>
 8004b86:	b1e5      	cbz	r5, 8004bc2 <_strtod_l+0x93a>
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8a:	421d      	tst	r5, r3
 8004b8c:	d0ee      	beq.n	8004b6c <_strtod_l+0x8e4>
 8004b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b90:	4640      	mov	r0, r8
 8004b92:	4649      	mov	r1, r9
 8004b94:	9a05      	ldr	r2, [sp, #20]
 8004b96:	b1c3      	cbz	r3, 8004bca <_strtod_l+0x942>
 8004b98:	f7ff fb54 	bl	8004244 <sulp>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ba4:	f7fb fb96 	bl	80002d4 <__adddf3>
 8004ba8:	4680      	mov	r8, r0
 8004baa:	4689      	mov	r9, r1
 8004bac:	e7de      	b.n	8004b6c <_strtod_l+0x8e4>
 8004bae:	4013      	ands	r3, r2
 8004bb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004bb4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004bb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004bbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004bc0:	e7d4      	b.n	8004b6c <_strtod_l+0x8e4>
 8004bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc4:	ea13 0f08 	tst.w	r3, r8
 8004bc8:	e7e0      	b.n	8004b8c <_strtod_l+0x904>
 8004bca:	f7ff fb3b 	bl	8004244 <sulp>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bd6:	f7fb fb7b 	bl	80002d0 <__aeabi_dsub>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	f7fb ff95 	bl	8000b10 <__aeabi_dcmpeq>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0c0      	beq.n	8004b6c <_strtod_l+0x8e4>
 8004bea:	e602      	b.n	80047f2 <_strtod_l+0x56a>
 8004bec:	4658      	mov	r0, fp
 8004bee:	9904      	ldr	r1, [sp, #16]
 8004bf0:	f001 fa3a 	bl	8006068 <__ratio>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460f      	mov	r7, r1
 8004bfe:	f7fb ff9b 	bl	8000b38 <__aeabi_dcmple>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d075      	beq.n	8004cf2 <_strtod_l+0xa6a>
 8004c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d047      	beq.n	8004c9c <_strtod_l+0xa14>
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	4f65      	ldr	r7, [pc, #404]	; (8004da4 <_strtod_l+0xb1c>)
 8004c10:	4d64      	ldr	r5, [pc, #400]	; (8004da4 <_strtod_l+0xb1c>)
 8004c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	051b      	lsls	r3, r3, #20
 8004c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <_strtod_l+0xb20>)
 8004c22:	429a      	cmp	r2, r3
 8004c24:	f040 80c8 	bne.w	8004db8 <_strtod_l+0xb30>
 8004c28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c2c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c32:	4640      	mov	r0, r8
 8004c34:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004c38:	4649      	mov	r1, r9
 8004c3a:	f001 f93f 	bl	8005ebc <__ulp>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	f7fb fcfb 	bl	8000640 <__aeabi_dmul>
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	f7fb fb41 	bl	80002d4 <__adddf3>
 8004c52:	460b      	mov	r3, r1
 8004c54:	4951      	ldr	r1, [pc, #324]	; (8004d9c <_strtod_l+0xb14>)
 8004c56:	4a55      	ldr	r2, [pc, #340]	; (8004dac <_strtod_l+0xb24>)
 8004c58:	4019      	ands	r1, r3
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	d95e      	bls.n	8004d1e <_strtod_l+0xa96>
 8004c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d103      	bne.n	8004c72 <_strtod_l+0x9ea>
 8004c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f43f ad4e 	beq.w	800470e <_strtod_l+0x486>
 8004c72:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004c76:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004da0 <_strtod_l+0xb18>
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c7e:	f000 fded 	bl	800585c <_Bfree>
 8004c82:	4650      	mov	r0, sl
 8004c84:	9906      	ldr	r1, [sp, #24]
 8004c86:	f000 fde9 	bl	800585c <_Bfree>
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	9904      	ldr	r1, [sp, #16]
 8004c8e:	f000 fde5 	bl	800585c <_Bfree>
 8004c92:	4659      	mov	r1, fp
 8004c94:	4650      	mov	r0, sl
 8004c96:	f000 fde1 	bl	800585c <_Bfree>
 8004c9a:	e61c      	b.n	80048d6 <_strtod_l+0x64e>
 8004c9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ca0:	d119      	bne.n	8004cd6 <_strtod_l+0xa4e>
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca8:	b9e3      	cbnz	r3, 8004ce4 <_strtod_l+0xa5c>
 8004caa:	2200      	movs	r2, #0
 8004cac:	4630      	mov	r0, r6
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4b3c      	ldr	r3, [pc, #240]	; (8004da4 <_strtod_l+0xb1c>)
 8004cb2:	f7fb ff37 	bl	8000b24 <__aeabi_dcmplt>
 8004cb6:	b9c8      	cbnz	r0, 8004cec <_strtod_l+0xa64>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <_strtod_l+0xb28>)
 8004cc0:	f7fb fcbe 	bl	8000640 <__aeabi_dmul>
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ccc:	9418      	str	r4, [sp, #96]	; 0x60
 8004cce:	9319      	str	r3, [sp, #100]	; 0x64
 8004cd0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004cd4:	e79d      	b.n	8004c12 <_strtod_l+0x98a>
 8004cd6:	f1b8 0f01 	cmp.w	r8, #1
 8004cda:	d103      	bne.n	8004ce4 <_strtod_l+0xa5c>
 8004cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f43f ad87 	beq.w	80047f2 <_strtod_l+0x56a>
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	2400      	movs	r4, #0
 8004ce8:	4f32      	ldr	r7, [pc, #200]	; (8004db4 <_strtod_l+0xb2c>)
 8004cea:	e791      	b.n	8004c10 <_strtod_l+0x988>
 8004cec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004cee:	4d30      	ldr	r5, [pc, #192]	; (8004db0 <_strtod_l+0xb28>)
 8004cf0:	e7ea      	b.n	8004cc8 <_strtod_l+0xa40>
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <_strtod_l+0xb28>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f7fb fca1 	bl	8000640 <__aeabi_dmul>
 8004cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d00:	4604      	mov	r4, r0
 8004d02:	460d      	mov	r5, r1
 8004d04:	b933      	cbnz	r3, 8004d14 <_strtod_l+0xa8c>
 8004d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d0a:	9010      	str	r0, [sp, #64]	; 0x40
 8004d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d0e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d12:	e77e      	b.n	8004c12 <_strtod_l+0x98a>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004d1c:	e7f7      	b.n	8004d0e <_strtod_l+0xa86>
 8004d1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004d22:	9b05      	ldr	r3, [sp, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1a8      	bne.n	8004c7a <_strtod_l+0x9f2>
 8004d28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d2e:	0d1b      	lsrs	r3, r3, #20
 8004d30:	051b      	lsls	r3, r3, #20
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d1a1      	bne.n	8004c7a <_strtod_l+0x9f2>
 8004d36:	4620      	mov	r0, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f7fc f935 	bl	8000fa8 <__aeabi_d2lz>
 8004d3e:	f7fb fc51 	bl	80005e4 <__aeabi_l2d>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fac1 	bl	80002d0 <__aeabi_dsub>
 8004d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d54:	ea43 0308 	orr.w	r3, r3, r8
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	460d      	mov	r5, r1
 8004d5e:	d066      	beq.n	8004e2e <_strtod_l+0xba6>
 8004d60:	a309      	add	r3, pc, #36	; (adr r3, 8004d88 <_strtod_l+0xb00>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fedd 	bl	8000b24 <__aeabi_dcmplt>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f47f acda 	bne.w	8004724 <_strtod_l+0x49c>
 8004d70:	a307      	add	r3, pc, #28	; (adr r3, 8004d90 <_strtod_l+0xb08>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7fb fef1 	bl	8000b60 <__aeabi_dcmpgt>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f43f af7b 	beq.w	8004c7a <_strtod_l+0x9f2>
 8004d84:	e4ce      	b.n	8004724 <_strtod_l+0x49c>
 8004d86:	bf00      	nop
 8004d88:	94a03595 	.word	0x94a03595
 8004d8c:	3fdfffff 	.word	0x3fdfffff
 8004d90:	35afe535 	.word	0x35afe535
 8004d94:	3fe00000 	.word	0x3fe00000
 8004d98:	000fffff 	.word	0x000fffff
 8004d9c:	7ff00000 	.word	0x7ff00000
 8004da0:	7fefffff 	.word	0x7fefffff
 8004da4:	3ff00000 	.word	0x3ff00000
 8004da8:	7fe00000 	.word	0x7fe00000
 8004dac:	7c9fffff 	.word	0x7c9fffff
 8004db0:	3fe00000 	.word	0x3fe00000
 8004db4:	bff00000 	.word	0xbff00000
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	b313      	cbz	r3, 8004e02 <_strtod_l+0xb7a>
 8004dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004dc2:	d81e      	bhi.n	8004e02 <_strtod_l+0xb7a>
 8004dc4:	a326      	add	r3, pc, #152	; (adr r3, 8004e60 <_strtod_l+0xbd8>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb feb3 	bl	8000b38 <__aeabi_dcmple>
 8004dd2:	b190      	cbz	r0, 8004dfa <_strtod_l+0xb72>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7fb fecc 	bl	8000b74 <__aeabi_d2uiz>
 8004ddc:	2801      	cmp	r0, #1
 8004dde:	bf38      	it	cc
 8004de0:	2001      	movcc	r0, #1
 8004de2:	f7fb fbb3 	bl	800054c <__aeabi_ui2d>
 8004de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004de8:	4604      	mov	r4, r0
 8004dea:	460d      	mov	r5, r1
 8004dec:	b9d3      	cbnz	r3, 8004e24 <_strtod_l+0xb9c>
 8004dee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004df2:	9012      	str	r0, [sp, #72]	; 0x48
 8004df4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004df6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dfc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004e00:	1a9f      	subs	r7, r3, r2
 8004e02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e06:	f001 f859 	bl	8005ebc <__ulp>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4639      	mov	r1, r7
 8004e12:	f7fb fc15 	bl	8000640 <__aeabi_dmul>
 8004e16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e1a:	f7fb fa5b 	bl	80002d4 <__adddf3>
 8004e1e:	4680      	mov	r8, r0
 8004e20:	4689      	mov	r9, r1
 8004e22:	e77e      	b.n	8004d22 <_strtod_l+0xa9a>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004e2c:	e7e3      	b.n	8004df6 <_strtod_l+0xb6e>
 8004e2e:	a30e      	add	r3, pc, #56	; (adr r3, 8004e68 <_strtod_l+0xbe0>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb fe76 	bl	8000b24 <__aeabi_dcmplt>
 8004e38:	e7a1      	b.n	8004d7e <_strtod_l+0xaf6>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	f7ff ba65 	b.w	8004312 <_strtod_l+0x8a>
 8004e48:	2b65      	cmp	r3, #101	; 0x65
 8004e4a:	f43f ab5c 	beq.w	8004506 <_strtod_l+0x27e>
 8004e4e:	2b45      	cmp	r3, #69	; 0x45
 8004e50:	f43f ab59 	beq.w	8004506 <_strtod_l+0x27e>
 8004e54:	2201      	movs	r2, #1
 8004e56:	f7ff bb8d 	b.w	8004574 <_strtod_l+0x2ec>
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w
 8004e60:	ffc00000 	.word	0xffc00000
 8004e64:	41dfffff 	.word	0x41dfffff
 8004e68:	94a03595 	.word	0x94a03595
 8004e6c:	3fcfffff 	.word	0x3fcfffff

08004e70 <strtod>:
 8004e70:	460a      	mov	r2, r1
 8004e72:	4601      	mov	r1, r0
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <strtod+0x10>)
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <strtod+0x14>)
 8004e78:	6800      	ldr	r0, [r0, #0]
 8004e7a:	f7ff ba05 	b.w	8004288 <_strtod_l>
 8004e7e:	bf00      	nop
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	20000074 	.word	0x20000074

08004e88 <strtok>:
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <strtok+0x5c>)
 8004e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	681f      	ldr	r7, [r3, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004e94:	460e      	mov	r6, r1
 8004e96:	b9ec      	cbnz	r4, 8004ed4 <strtok+0x4c>
 8004e98:	2050      	movs	r0, #80	; 0x50
 8004e9a:	f000 fc77 	bl	800578c <malloc>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	65b8      	str	r0, [r7, #88]	; 0x58
 8004ea2:	b920      	cbnz	r0, 8004eae <strtok+0x26>
 8004ea4:	2157      	movs	r1, #87	; 0x57
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <strtok+0x60>)
 8004ea8:	4810      	ldr	r0, [pc, #64]	; (8004eec <strtok+0x64>)
 8004eaa:	f000 f8d9 	bl	8005060 <__assert_func>
 8004eae:	e9c0 4400 	strd	r4, r4, [r0]
 8004eb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004eb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004eba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004ebe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004ec2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004ec6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004eca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004ece:	6184      	str	r4, [r0, #24]
 8004ed0:	7704      	strb	r4, [r0, #28]
 8004ed2:	6244      	str	r4, [r0, #36]	; 0x24
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eda:	2301      	movs	r3, #1
 8004edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	f000 b806 	b.w	8004ef0 <__strtok_r>
 8004ee4:	2000000c 	.word	0x2000000c
 8004ee8:	08007198 	.word	0x08007198
 8004eec:	080071af 	.word	0x080071af

08004ef0 <__strtok_r>:
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b908      	cbnz	r0, 8004ef8 <__strtok_r+0x8>
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	b188      	cbz	r0, 8004f1c <__strtok_r+0x2c>
 8004ef8:	4604      	mov	r4, r0
 8004efa:	460f      	mov	r7, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f06:	b91e      	cbnz	r6, 8004f10 <__strtok_r+0x20>
 8004f08:	b965      	cbnz	r5, 8004f24 <__strtok_r+0x34>
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	6015      	str	r5, [r2, #0]
 8004f0e:	e005      	b.n	8004f1c <__strtok_r+0x2c>
 8004f10:	42b5      	cmp	r5, r6
 8004f12:	d1f6      	bne.n	8004f02 <__strtok_r+0x12>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f0      	bne.n	8004efa <__strtok_r+0xa>
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	7003      	strb	r3, [r0, #0]
 8004f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1e:	461c      	mov	r4, r3
 8004f20:	e00c      	b.n	8004f3c <__strtok_r+0x4c>
 8004f22:	b915      	cbnz	r5, 8004f2a <__strtok_r+0x3a>
 8004f24:	460e      	mov	r6, r1
 8004f26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	d1f7      	bne.n	8004f22 <__strtok_r+0x32>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f3      	beq.n	8004f1e <__strtok_r+0x2e>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f3c:	6014      	str	r4, [r2, #0]
 8004f3e:	e7ed      	b.n	8004f1c <__strtok_r+0x2c>

08004f40 <_strtol_l.isra.0>:
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f46:	4686      	mov	lr, r0
 8004f48:	d001      	beq.n	8004f4e <_strtol_l.isra.0+0xe>
 8004f4a:	2b24      	cmp	r3, #36	; 0x24
 8004f4c:	d906      	bls.n	8004f5c <_strtol_l.isra.0+0x1c>
 8004f4e:	f7ff f947 	bl	80041e0 <__errno>
 8004f52:	2316      	movs	r3, #22
 8004f54:	6003      	str	r3, [r0, #0]
 8004f56:	2000      	movs	r0, #0
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5c:	468c      	mov	ip, r1
 8004f5e:	4e3a      	ldr	r6, [pc, #232]	; (8005048 <_strtol_l.isra.0+0x108>)
 8004f60:	4660      	mov	r0, ip
 8004f62:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004f66:	5da5      	ldrb	r5, [r4, r6]
 8004f68:	f015 0508 	ands.w	r5, r5, #8
 8004f6c:	d1f8      	bne.n	8004f60 <_strtol_l.isra.0+0x20>
 8004f6e:	2c2d      	cmp	r4, #45	; 0x2d
 8004f70:	d133      	bne.n	8004fda <_strtol_l.isra.0+0x9a>
 8004f72:	f04f 0801 	mov.w	r8, #1
 8004f76:	f89c 4000 	ldrb.w	r4, [ip]
 8004f7a:	f100 0c02 	add.w	ip, r0, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05d      	beq.n	800503e <_strtol_l.isra.0+0xfe>
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d10c      	bne.n	8004fa0 <_strtol_l.isra.0+0x60>
 8004f86:	2c30      	cmp	r4, #48	; 0x30
 8004f88:	d10a      	bne.n	8004fa0 <_strtol_l.isra.0+0x60>
 8004f8a:	f89c 0000 	ldrb.w	r0, [ip]
 8004f8e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f92:	2858      	cmp	r0, #88	; 0x58
 8004f94:	d14e      	bne.n	8005034 <_strtol_l.isra.0+0xf4>
 8004f96:	2310      	movs	r3, #16
 8004f98:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004f9c:	f10c 0c02 	add.w	ip, ip, #2
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004fa6:	3f01      	subs	r7, #1
 8004fa8:	fbb7 f9f3 	udiv	r9, r7, r3
 8004fac:	4628      	mov	r0, r5
 8004fae:	fb03 7a19 	mls	sl, r3, r9, r7
 8004fb2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004fb6:	2e09      	cmp	r6, #9
 8004fb8:	d818      	bhi.n	8004fec <_strtol_l.isra.0+0xac>
 8004fba:	4634      	mov	r4, r6
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	dd24      	ble.n	800500a <_strtol_l.isra.0+0xca>
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	db1f      	blt.n	8005004 <_strtol_l.isra.0+0xc4>
 8004fc4:	4581      	cmp	r9, r0
 8004fc6:	d31d      	bcc.n	8005004 <_strtol_l.isra.0+0xc4>
 8004fc8:	d101      	bne.n	8004fce <_strtol_l.isra.0+0x8e>
 8004fca:	45a2      	cmp	sl, r4
 8004fcc:	db1a      	blt.n	8005004 <_strtol_l.isra.0+0xc4>
 8004fce:	2501      	movs	r5, #1
 8004fd0:	fb00 4003 	mla	r0, r0, r3, r4
 8004fd4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004fd8:	e7eb      	b.n	8004fb2 <_strtol_l.isra.0+0x72>
 8004fda:	2c2b      	cmp	r4, #43	; 0x2b
 8004fdc:	bf08      	it	eq
 8004fde:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004fe2:	46a8      	mov	r8, r5
 8004fe4:	bf08      	it	eq
 8004fe6:	f100 0c02 	addeq.w	ip, r0, #2
 8004fea:	e7c8      	b.n	8004f7e <_strtol_l.isra.0+0x3e>
 8004fec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004ff0:	2e19      	cmp	r6, #25
 8004ff2:	d801      	bhi.n	8004ff8 <_strtol_l.isra.0+0xb8>
 8004ff4:	3c37      	subs	r4, #55	; 0x37
 8004ff6:	e7e1      	b.n	8004fbc <_strtol_l.isra.0+0x7c>
 8004ff8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004ffc:	2e19      	cmp	r6, #25
 8004ffe:	d804      	bhi.n	800500a <_strtol_l.isra.0+0xca>
 8005000:	3c57      	subs	r4, #87	; 0x57
 8005002:	e7db      	b.n	8004fbc <_strtol_l.isra.0+0x7c>
 8005004:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005008:	e7e4      	b.n	8004fd4 <_strtol_l.isra.0+0x94>
 800500a:	2d00      	cmp	r5, #0
 800500c:	da08      	bge.n	8005020 <_strtol_l.isra.0+0xe0>
 800500e:	2322      	movs	r3, #34	; 0x22
 8005010:	4638      	mov	r0, r7
 8005012:	f8ce 3000 	str.w	r3, [lr]
 8005016:	2a00      	cmp	r2, #0
 8005018:	d09e      	beq.n	8004f58 <_strtol_l.isra.0+0x18>
 800501a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800501e:	e007      	b.n	8005030 <_strtol_l.isra.0+0xf0>
 8005020:	f1b8 0f00 	cmp.w	r8, #0
 8005024:	d000      	beq.n	8005028 <_strtol_l.isra.0+0xe8>
 8005026:	4240      	negs	r0, r0
 8005028:	2a00      	cmp	r2, #0
 800502a:	d095      	beq.n	8004f58 <_strtol_l.isra.0+0x18>
 800502c:	2d00      	cmp	r5, #0
 800502e:	d1f4      	bne.n	800501a <_strtol_l.isra.0+0xda>
 8005030:	6011      	str	r1, [r2, #0]
 8005032:	e791      	b.n	8004f58 <_strtol_l.isra.0+0x18>
 8005034:	2430      	movs	r4, #48	; 0x30
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1b2      	bne.n	8004fa0 <_strtol_l.isra.0+0x60>
 800503a:	2308      	movs	r3, #8
 800503c:	e7b0      	b.n	8004fa0 <_strtol_l.isra.0+0x60>
 800503e:	2c30      	cmp	r4, #48	; 0x30
 8005040:	d0a3      	beq.n	8004f8a <_strtol_l.isra.0+0x4a>
 8005042:	230a      	movs	r3, #10
 8005044:	e7ac      	b.n	8004fa0 <_strtol_l.isra.0+0x60>
 8005046:	bf00      	nop
 8005048:	0800724d 	.word	0x0800724d

0800504c <strtol>:
 800504c:	4613      	mov	r3, r2
 800504e:	460a      	mov	r2, r1
 8005050:	4601      	mov	r1, r0
 8005052:	4802      	ldr	r0, [pc, #8]	; (800505c <strtol+0x10>)
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f7ff bf73 	b.w	8004f40 <_strtol_l.isra.0>
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c

08005060 <__assert_func>:
 8005060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005062:	4614      	mov	r4, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4b09      	ldr	r3, [pc, #36]	; (800508c <__assert_func+0x2c>)
 8005068:	4605      	mov	r5, r0
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68d8      	ldr	r0, [r3, #12]
 800506e:	b14c      	cbz	r4, 8005084 <__assert_func+0x24>
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <__assert_func+0x30>)
 8005072:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	462b      	mov	r3, r5
 800507a:	4906      	ldr	r1, [pc, #24]	; (8005094 <__assert_func+0x34>)
 800507c:	f000 f80e 	bl	800509c <fiprintf>
 8005080:	f001 fcfc 	bl	8006a7c <abort>
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <__assert_func+0x38>)
 8005086:	461c      	mov	r4, r3
 8005088:	e7f3      	b.n	8005072 <__assert_func+0x12>
 800508a:	bf00      	nop
 800508c:	2000000c 	.word	0x2000000c
 8005090:	08007210 	.word	0x08007210
 8005094:	0800721d 	.word	0x0800721d
 8005098:	0800724b 	.word	0x0800724b

0800509c <fiprintf>:
 800509c:	b40e      	push	{r1, r2, r3}
 800509e:	b503      	push	{r0, r1, lr}
 80050a0:	4601      	mov	r1, r0
 80050a2:	ab03      	add	r3, sp, #12
 80050a4:	4805      	ldr	r0, [pc, #20]	; (80050bc <fiprintf+0x20>)
 80050a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f001 f929 	bl	8006304 <_vfiprintf_r>
 80050b2:	b002      	add	sp, #8
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	2000000c 	.word	0x2000000c

080050c0 <rshift>:
 80050c0:	6903      	ldr	r3, [r0, #16]
 80050c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80050ca:	f100 0414 	add.w	r4, r0, #20
 80050ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80050d2:	dd46      	ble.n	8005162 <rshift+0xa2>
 80050d4:	f011 011f 	ands.w	r1, r1, #31
 80050d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80050dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80050e0:	d10c      	bne.n	80050fc <rshift+0x3c>
 80050e2:	4629      	mov	r1, r5
 80050e4:	f100 0710 	add.w	r7, r0, #16
 80050e8:	42b1      	cmp	r1, r6
 80050ea:	d335      	bcc.n	8005158 <rshift+0x98>
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	1eea      	subs	r2, r5, #3
 80050f2:	4296      	cmp	r6, r2
 80050f4:	bf38      	it	cc
 80050f6:	2300      	movcc	r3, #0
 80050f8:	4423      	add	r3, r4
 80050fa:	e015      	b.n	8005128 <rshift+0x68>
 80050fc:	46a1      	mov	r9, r4
 80050fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005102:	f1c1 0820 	rsb	r8, r1, #32
 8005106:	40cf      	lsrs	r7, r1
 8005108:	f105 0e04 	add.w	lr, r5, #4
 800510c:	4576      	cmp	r6, lr
 800510e:	46f4      	mov	ip, lr
 8005110:	d816      	bhi.n	8005140 <rshift+0x80>
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009a      	lsls	r2, r3, #2
 8005116:	3a04      	subs	r2, #4
 8005118:	3501      	adds	r5, #1
 800511a:	42ae      	cmp	r6, r5
 800511c:	bf38      	it	cc
 800511e:	2200      	movcc	r2, #0
 8005120:	18a3      	adds	r3, r4, r2
 8005122:	50a7      	str	r7, [r4, r2]
 8005124:	b107      	cbz	r7, 8005128 <rshift+0x68>
 8005126:	3304      	adds	r3, #4
 8005128:	42a3      	cmp	r3, r4
 800512a:	eba3 0204 	sub.w	r2, r3, r4
 800512e:	bf08      	it	eq
 8005130:	2300      	moveq	r3, #0
 8005132:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005136:	6102      	str	r2, [r0, #16]
 8005138:	bf08      	it	eq
 800513a:	6143      	streq	r3, [r0, #20]
 800513c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005140:	f8dc c000 	ldr.w	ip, [ip]
 8005144:	fa0c fc08 	lsl.w	ip, ip, r8
 8005148:	ea4c 0707 	orr.w	r7, ip, r7
 800514c:	f849 7b04 	str.w	r7, [r9], #4
 8005150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005154:	40cf      	lsrs	r7, r1
 8005156:	e7d9      	b.n	800510c <rshift+0x4c>
 8005158:	f851 cb04 	ldr.w	ip, [r1], #4
 800515c:	f847 cf04 	str.w	ip, [r7, #4]!
 8005160:	e7c2      	b.n	80050e8 <rshift+0x28>
 8005162:	4623      	mov	r3, r4
 8005164:	e7e0      	b.n	8005128 <rshift+0x68>

08005166 <__hexdig_fun>:
 8005166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800516a:	2b09      	cmp	r3, #9
 800516c:	d802      	bhi.n	8005174 <__hexdig_fun+0xe>
 800516e:	3820      	subs	r0, #32
 8005170:	b2c0      	uxtb	r0, r0
 8005172:	4770      	bx	lr
 8005174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005178:	2b05      	cmp	r3, #5
 800517a:	d801      	bhi.n	8005180 <__hexdig_fun+0x1a>
 800517c:	3847      	subs	r0, #71	; 0x47
 800517e:	e7f7      	b.n	8005170 <__hexdig_fun+0xa>
 8005180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005184:	2b05      	cmp	r3, #5
 8005186:	d801      	bhi.n	800518c <__hexdig_fun+0x26>
 8005188:	3827      	subs	r0, #39	; 0x27
 800518a:	e7f1      	b.n	8005170 <__hexdig_fun+0xa>
 800518c:	2000      	movs	r0, #0
 800518e:	4770      	bx	lr

08005190 <__gethex>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	b08b      	sub	sp, #44	; 0x2c
 8005196:	9306      	str	r3, [sp, #24]
 8005198:	4bb9      	ldr	r3, [pc, #740]	; (8005480 <__gethex+0x2f0>)
 800519a:	9002      	str	r0, [sp, #8]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	468b      	mov	fp, r1
 80051a0:	4618      	mov	r0, r3
 80051a2:	4690      	mov	r8, r2
 80051a4:	9303      	str	r3, [sp, #12]
 80051a6:	f7fa ffd3 	bl	8000150 <strlen>
 80051aa:	4682      	mov	sl, r0
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	f8db 2000 	ldr.w	r2, [fp]
 80051b2:	4403      	add	r3, r0
 80051b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	1c93      	adds	r3, r2, #2
 80051bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80051c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80051c4:	32fe      	adds	r2, #254	; 0xfe
 80051c6:	18d1      	adds	r1, r2, r3
 80051c8:	461f      	mov	r7, r3
 80051ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051ce:	9101      	str	r1, [sp, #4]
 80051d0:	2830      	cmp	r0, #48	; 0x30
 80051d2:	d0f8      	beq.n	80051c6 <__gethex+0x36>
 80051d4:	f7ff ffc7 	bl	8005166 <__hexdig_fun>
 80051d8:	4604      	mov	r4, r0
 80051da:	2800      	cmp	r0, #0
 80051dc:	d13a      	bne.n	8005254 <__gethex+0xc4>
 80051de:	4652      	mov	r2, sl
 80051e0:	4638      	mov	r0, r7
 80051e2:	9903      	ldr	r1, [sp, #12]
 80051e4:	f001 fb6a 	bl	80068bc <strncmp>
 80051e8:	4605      	mov	r5, r0
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d166      	bne.n	80052bc <__gethex+0x12c>
 80051ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 80051f2:	eb07 060a 	add.w	r6, r7, sl
 80051f6:	f7ff ffb6 	bl	8005166 <__hexdig_fun>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d060      	beq.n	80052c0 <__gethex+0x130>
 80051fe:	4633      	mov	r3, r6
 8005200:	7818      	ldrb	r0, [r3, #0]
 8005202:	461f      	mov	r7, r3
 8005204:	2830      	cmp	r0, #48	; 0x30
 8005206:	f103 0301 	add.w	r3, r3, #1
 800520a:	d0f9      	beq.n	8005200 <__gethex+0x70>
 800520c:	f7ff ffab 	bl	8005166 <__hexdig_fun>
 8005210:	2301      	movs	r3, #1
 8005212:	fab0 f480 	clz	r4, r0
 8005216:	4635      	mov	r5, r6
 8005218:	0964      	lsrs	r4, r4, #5
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	463a      	mov	r2, r7
 800521e:	4616      	mov	r6, r2
 8005220:	7830      	ldrb	r0, [r6, #0]
 8005222:	3201      	adds	r2, #1
 8005224:	f7ff ff9f 	bl	8005166 <__hexdig_fun>
 8005228:	2800      	cmp	r0, #0
 800522a:	d1f8      	bne.n	800521e <__gethex+0x8e>
 800522c:	4652      	mov	r2, sl
 800522e:	4630      	mov	r0, r6
 8005230:	9903      	ldr	r1, [sp, #12]
 8005232:	f001 fb43 	bl	80068bc <strncmp>
 8005236:	b980      	cbnz	r0, 800525a <__gethex+0xca>
 8005238:	b94d      	cbnz	r5, 800524e <__gethex+0xbe>
 800523a:	eb06 050a 	add.w	r5, r6, sl
 800523e:	462a      	mov	r2, r5
 8005240:	4616      	mov	r6, r2
 8005242:	7830      	ldrb	r0, [r6, #0]
 8005244:	3201      	adds	r2, #1
 8005246:	f7ff ff8e 	bl	8005166 <__hexdig_fun>
 800524a:	2800      	cmp	r0, #0
 800524c:	d1f8      	bne.n	8005240 <__gethex+0xb0>
 800524e:	1bad      	subs	r5, r5, r6
 8005250:	00ad      	lsls	r5, r5, #2
 8005252:	e004      	b.n	800525e <__gethex+0xce>
 8005254:	2400      	movs	r4, #0
 8005256:	4625      	mov	r5, r4
 8005258:	e7e0      	b.n	800521c <__gethex+0x8c>
 800525a:	2d00      	cmp	r5, #0
 800525c:	d1f7      	bne.n	800524e <__gethex+0xbe>
 800525e:	7833      	ldrb	r3, [r6, #0]
 8005260:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d139      	bne.n	80052dc <__gethex+0x14c>
 8005268:	7873      	ldrb	r3, [r6, #1]
 800526a:	2b2b      	cmp	r3, #43	; 0x2b
 800526c:	d02a      	beq.n	80052c4 <__gethex+0x134>
 800526e:	2b2d      	cmp	r3, #45	; 0x2d
 8005270:	d02c      	beq.n	80052cc <__gethex+0x13c>
 8005272:	f04f 0900 	mov.w	r9, #0
 8005276:	1c71      	adds	r1, r6, #1
 8005278:	7808      	ldrb	r0, [r1, #0]
 800527a:	f7ff ff74 	bl	8005166 <__hexdig_fun>
 800527e:	1e43      	subs	r3, r0, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b18      	cmp	r3, #24
 8005284:	d82a      	bhi.n	80052dc <__gethex+0x14c>
 8005286:	f1a0 0210 	sub.w	r2, r0, #16
 800528a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800528e:	f7ff ff6a 	bl	8005166 <__hexdig_fun>
 8005292:	1e43      	subs	r3, r0, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b18      	cmp	r3, #24
 8005298:	d91b      	bls.n	80052d2 <__gethex+0x142>
 800529a:	f1b9 0f00 	cmp.w	r9, #0
 800529e:	d000      	beq.n	80052a2 <__gethex+0x112>
 80052a0:	4252      	negs	r2, r2
 80052a2:	4415      	add	r5, r2
 80052a4:	f8cb 1000 	str.w	r1, [fp]
 80052a8:	b1d4      	cbz	r4, 80052e0 <__gethex+0x150>
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf14      	ite	ne
 80052b0:	2700      	movne	r7, #0
 80052b2:	2706      	moveq	r7, #6
 80052b4:	4638      	mov	r0, r7
 80052b6:	b00b      	add	sp, #44	; 0x2c
 80052b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052bc:	463e      	mov	r6, r7
 80052be:	4625      	mov	r5, r4
 80052c0:	2401      	movs	r4, #1
 80052c2:	e7cc      	b.n	800525e <__gethex+0xce>
 80052c4:	f04f 0900 	mov.w	r9, #0
 80052c8:	1cb1      	adds	r1, r6, #2
 80052ca:	e7d5      	b.n	8005278 <__gethex+0xe8>
 80052cc:	f04f 0901 	mov.w	r9, #1
 80052d0:	e7fa      	b.n	80052c8 <__gethex+0x138>
 80052d2:	230a      	movs	r3, #10
 80052d4:	fb03 0202 	mla	r2, r3, r2, r0
 80052d8:	3a10      	subs	r2, #16
 80052da:	e7d6      	b.n	800528a <__gethex+0xfa>
 80052dc:	4631      	mov	r1, r6
 80052de:	e7e1      	b.n	80052a4 <__gethex+0x114>
 80052e0:	4621      	mov	r1, r4
 80052e2:	1bf3      	subs	r3, r6, r7
 80052e4:	3b01      	subs	r3, #1
 80052e6:	2b07      	cmp	r3, #7
 80052e8:	dc0a      	bgt.n	8005300 <__gethex+0x170>
 80052ea:	9802      	ldr	r0, [sp, #8]
 80052ec:	f000 fa76 	bl	80057dc <_Balloc>
 80052f0:	4604      	mov	r4, r0
 80052f2:	b940      	cbnz	r0, 8005306 <__gethex+0x176>
 80052f4:	4602      	mov	r2, r0
 80052f6:	21de      	movs	r1, #222	; 0xde
 80052f8:	4b62      	ldr	r3, [pc, #392]	; (8005484 <__gethex+0x2f4>)
 80052fa:	4863      	ldr	r0, [pc, #396]	; (8005488 <__gethex+0x2f8>)
 80052fc:	f7ff feb0 	bl	8005060 <__assert_func>
 8005300:	3101      	adds	r1, #1
 8005302:	105b      	asrs	r3, r3, #1
 8005304:	e7ef      	b.n	80052e6 <__gethex+0x156>
 8005306:	f04f 0b00 	mov.w	fp, #0
 800530a:	f100 0914 	add.w	r9, r0, #20
 800530e:	f1ca 0301 	rsb	r3, sl, #1
 8005312:	f8cd 9010 	str.w	r9, [sp, #16]
 8005316:	f8cd b004 	str.w	fp, [sp, #4]
 800531a:	9308      	str	r3, [sp, #32]
 800531c:	42b7      	cmp	r7, r6
 800531e:	d33f      	bcc.n	80053a0 <__gethex+0x210>
 8005320:	9f04      	ldr	r7, [sp, #16]
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	f847 3b04 	str.w	r3, [r7], #4
 8005328:	eba7 0709 	sub.w	r7, r7, r9
 800532c:	10bf      	asrs	r7, r7, #2
 800532e:	6127      	str	r7, [r4, #16]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fb49 	bl	80059c8 <__hi0bits>
 8005336:	017f      	lsls	r7, r7, #5
 8005338:	f8d8 6000 	ldr.w	r6, [r8]
 800533c:	1a3f      	subs	r7, r7, r0
 800533e:	42b7      	cmp	r7, r6
 8005340:	dd62      	ble.n	8005408 <__gethex+0x278>
 8005342:	1bbf      	subs	r7, r7, r6
 8005344:	4639      	mov	r1, r7
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fedf 	bl	800610a <__any_on>
 800534c:	4682      	mov	sl, r0
 800534e:	b1a8      	cbz	r0, 800537c <__gethex+0x1ec>
 8005350:	f04f 0a01 	mov.w	sl, #1
 8005354:	1e7b      	subs	r3, r7, #1
 8005356:	1159      	asrs	r1, r3, #5
 8005358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800535c:	f003 021f 	and.w	r2, r3, #31
 8005360:	fa0a f202 	lsl.w	r2, sl, r2
 8005364:	420a      	tst	r2, r1
 8005366:	d009      	beq.n	800537c <__gethex+0x1ec>
 8005368:	4553      	cmp	r3, sl
 800536a:	dd05      	ble.n	8005378 <__gethex+0x1e8>
 800536c:	4620      	mov	r0, r4
 800536e:	1eb9      	subs	r1, r7, #2
 8005370:	f000 fecb 	bl	800610a <__any_on>
 8005374:	2800      	cmp	r0, #0
 8005376:	d144      	bne.n	8005402 <__gethex+0x272>
 8005378:	f04f 0a02 	mov.w	sl, #2
 800537c:	4639      	mov	r1, r7
 800537e:	4620      	mov	r0, r4
 8005380:	f7ff fe9e 	bl	80050c0 <rshift>
 8005384:	443d      	add	r5, r7
 8005386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800538a:	42ab      	cmp	r3, r5
 800538c:	da4a      	bge.n	8005424 <__gethex+0x294>
 800538e:	4621      	mov	r1, r4
 8005390:	9802      	ldr	r0, [sp, #8]
 8005392:	f000 fa63 	bl	800585c <_Bfree>
 8005396:	2300      	movs	r3, #0
 8005398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800539a:	27a3      	movs	r7, #163	; 0xa3
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e789      	b.n	80052b4 <__gethex+0x124>
 80053a0:	1e73      	subs	r3, r6, #1
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d019      	beq.n	80053e2 <__gethex+0x252>
 80053ae:	f1bb 0f20 	cmp.w	fp, #32
 80053b2:	d107      	bne.n	80053c4 <__gethex+0x234>
 80053b4:	9b04      	ldr	r3, [sp, #16]
 80053b6:	9a01      	ldr	r2, [sp, #4]
 80053b8:	f843 2b04 	str.w	r2, [r3], #4
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	2300      	movs	r3, #0
 80053c0:	469b      	mov	fp, r3
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80053c8:	f7ff fecd 	bl	8005166 <__hexdig_fun>
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	f000 000f 	and.w	r0, r0, #15
 80053d2:	fa00 f00b 	lsl.w	r0, r0, fp
 80053d6:	4303      	orrs	r3, r0
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	f10b 0b04 	add.w	fp, fp, #4
 80053de:	9b05      	ldr	r3, [sp, #20]
 80053e0:	e00d      	b.n	80053fe <__gethex+0x26e>
 80053e2:	9b05      	ldr	r3, [sp, #20]
 80053e4:	9a08      	ldr	r2, [sp, #32]
 80053e6:	4413      	add	r3, r2
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	d3e0      	bcc.n	80053ae <__gethex+0x21e>
 80053ec:	4618      	mov	r0, r3
 80053ee:	4652      	mov	r2, sl
 80053f0:	9903      	ldr	r1, [sp, #12]
 80053f2:	9309      	str	r3, [sp, #36]	; 0x24
 80053f4:	f001 fa62 	bl	80068bc <strncmp>
 80053f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d1d7      	bne.n	80053ae <__gethex+0x21e>
 80053fe:	461e      	mov	r6, r3
 8005400:	e78c      	b.n	800531c <__gethex+0x18c>
 8005402:	f04f 0a03 	mov.w	sl, #3
 8005406:	e7b9      	b.n	800537c <__gethex+0x1ec>
 8005408:	da09      	bge.n	800541e <__gethex+0x28e>
 800540a:	1bf7      	subs	r7, r6, r7
 800540c:	4621      	mov	r1, r4
 800540e:	463a      	mov	r2, r7
 8005410:	9802      	ldr	r0, [sp, #8]
 8005412:	f000 fc3b 	bl	8005c8c <__lshift>
 8005416:	4604      	mov	r4, r0
 8005418:	1bed      	subs	r5, r5, r7
 800541a:	f100 0914 	add.w	r9, r0, #20
 800541e:	f04f 0a00 	mov.w	sl, #0
 8005422:	e7b0      	b.n	8005386 <__gethex+0x1f6>
 8005424:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005428:	42a8      	cmp	r0, r5
 800542a:	dd71      	ble.n	8005510 <__gethex+0x380>
 800542c:	1b45      	subs	r5, r0, r5
 800542e:	42ae      	cmp	r6, r5
 8005430:	dc34      	bgt.n	800549c <__gethex+0x30c>
 8005432:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d028      	beq.n	800548c <__gethex+0x2fc>
 800543a:	2b03      	cmp	r3, #3
 800543c:	d02a      	beq.n	8005494 <__gethex+0x304>
 800543e:	2b01      	cmp	r3, #1
 8005440:	d115      	bne.n	800546e <__gethex+0x2de>
 8005442:	42ae      	cmp	r6, r5
 8005444:	d113      	bne.n	800546e <__gethex+0x2de>
 8005446:	2e01      	cmp	r6, #1
 8005448:	d10b      	bne.n	8005462 <__gethex+0x2d2>
 800544a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800544e:	9a06      	ldr	r2, [sp, #24]
 8005450:	2762      	movs	r7, #98	; 0x62
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	2301      	movs	r3, #1
 8005456:	6123      	str	r3, [r4, #16]
 8005458:	f8c9 3000 	str.w	r3, [r9]
 800545c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800545e:	601c      	str	r4, [r3, #0]
 8005460:	e728      	b.n	80052b4 <__gethex+0x124>
 8005462:	4620      	mov	r0, r4
 8005464:	1e71      	subs	r1, r6, #1
 8005466:	f000 fe50 	bl	800610a <__any_on>
 800546a:	2800      	cmp	r0, #0
 800546c:	d1ed      	bne.n	800544a <__gethex+0x2ba>
 800546e:	4621      	mov	r1, r4
 8005470:	9802      	ldr	r0, [sp, #8]
 8005472:	f000 f9f3 	bl	800585c <_Bfree>
 8005476:	2300      	movs	r3, #0
 8005478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800547a:	2750      	movs	r7, #80	; 0x50
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e719      	b.n	80052b4 <__gethex+0x124>
 8005480:	080073c8 	.word	0x080073c8
 8005484:	0800734d 	.word	0x0800734d
 8005488:	0800735e 	.word	0x0800735e
 800548c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ed      	bne.n	800546e <__gethex+0x2de>
 8005492:	e7da      	b.n	800544a <__gethex+0x2ba>
 8005494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1d7      	bne.n	800544a <__gethex+0x2ba>
 800549a:	e7e8      	b.n	800546e <__gethex+0x2de>
 800549c:	1e6f      	subs	r7, r5, #1
 800549e:	f1ba 0f00 	cmp.w	sl, #0
 80054a2:	d132      	bne.n	800550a <__gethex+0x37a>
 80054a4:	b127      	cbz	r7, 80054b0 <__gethex+0x320>
 80054a6:	4639      	mov	r1, r7
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fe2e 	bl	800610a <__any_on>
 80054ae:	4682      	mov	sl, r0
 80054b0:	2101      	movs	r1, #1
 80054b2:	117b      	asrs	r3, r7, #5
 80054b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80054b8:	f007 071f 	and.w	r7, r7, #31
 80054bc:	fa01 f707 	lsl.w	r7, r1, r7
 80054c0:	421f      	tst	r7, r3
 80054c2:	f04f 0702 	mov.w	r7, #2
 80054c6:	4629      	mov	r1, r5
 80054c8:	4620      	mov	r0, r4
 80054ca:	bf18      	it	ne
 80054cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80054d0:	1b76      	subs	r6, r6, r5
 80054d2:	f7ff fdf5 	bl	80050c0 <rshift>
 80054d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80054da:	f1ba 0f00 	cmp.w	sl, #0
 80054de:	d048      	beq.n	8005572 <__gethex+0x3e2>
 80054e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d015      	beq.n	8005514 <__gethex+0x384>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d017      	beq.n	800551c <__gethex+0x38c>
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d109      	bne.n	8005504 <__gethex+0x374>
 80054f0:	f01a 0f02 	tst.w	sl, #2
 80054f4:	d006      	beq.n	8005504 <__gethex+0x374>
 80054f6:	f8d9 0000 	ldr.w	r0, [r9]
 80054fa:	ea4a 0a00 	orr.w	sl, sl, r0
 80054fe:	f01a 0f01 	tst.w	sl, #1
 8005502:	d10e      	bne.n	8005522 <__gethex+0x392>
 8005504:	f047 0710 	orr.w	r7, r7, #16
 8005508:	e033      	b.n	8005572 <__gethex+0x3e2>
 800550a:	f04f 0a01 	mov.w	sl, #1
 800550e:	e7cf      	b.n	80054b0 <__gethex+0x320>
 8005510:	2701      	movs	r7, #1
 8005512:	e7e2      	b.n	80054da <__gethex+0x34a>
 8005514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005516:	f1c3 0301 	rsb	r3, r3, #1
 800551a:	9315      	str	r3, [sp, #84]	; 0x54
 800551c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <__gethex+0x374>
 8005522:	f04f 0c00 	mov.w	ip, #0
 8005526:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800552a:	f104 0314 	add.w	r3, r4, #20
 800552e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005532:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005536:	4618      	mov	r0, r3
 8005538:	f853 2b04 	ldr.w	r2, [r3], #4
 800553c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005540:	d01c      	beq.n	800557c <__gethex+0x3ec>
 8005542:	3201      	adds	r2, #1
 8005544:	6002      	str	r2, [r0, #0]
 8005546:	2f02      	cmp	r7, #2
 8005548:	f104 0314 	add.w	r3, r4, #20
 800554c:	d13d      	bne.n	80055ca <__gethex+0x43a>
 800554e:	f8d8 2000 	ldr.w	r2, [r8]
 8005552:	3a01      	subs	r2, #1
 8005554:	42b2      	cmp	r2, r6
 8005556:	d10a      	bne.n	800556e <__gethex+0x3de>
 8005558:	2201      	movs	r2, #1
 800555a:	1171      	asrs	r1, r6, #5
 800555c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005560:	f006 061f 	and.w	r6, r6, #31
 8005564:	fa02 f606 	lsl.w	r6, r2, r6
 8005568:	421e      	tst	r6, r3
 800556a:	bf18      	it	ne
 800556c:	4617      	movne	r7, r2
 800556e:	f047 0720 	orr.w	r7, r7, #32
 8005572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005574:	601c      	str	r4, [r3, #0]
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	601d      	str	r5, [r3, #0]
 800557a:	e69b      	b.n	80052b4 <__gethex+0x124>
 800557c:	4299      	cmp	r1, r3
 800557e:	f843 cc04 	str.w	ip, [r3, #-4]
 8005582:	d8d8      	bhi.n	8005536 <__gethex+0x3a6>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	459b      	cmp	fp, r3
 8005588:	db17      	blt.n	80055ba <__gethex+0x42a>
 800558a:	6861      	ldr	r1, [r4, #4]
 800558c:	9802      	ldr	r0, [sp, #8]
 800558e:	3101      	adds	r1, #1
 8005590:	f000 f924 	bl	80057dc <_Balloc>
 8005594:	4681      	mov	r9, r0
 8005596:	b918      	cbnz	r0, 80055a0 <__gethex+0x410>
 8005598:	4602      	mov	r2, r0
 800559a:	2184      	movs	r1, #132	; 0x84
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <__gethex+0x474>)
 800559e:	e6ac      	b.n	80052fa <__gethex+0x16a>
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	f104 010c 	add.w	r1, r4, #12
 80055a6:	3202      	adds	r2, #2
 80055a8:	0092      	lsls	r2, r2, #2
 80055aa:	300c      	adds	r0, #12
 80055ac:	f000 f908 	bl	80057c0 <memcpy>
 80055b0:	4621      	mov	r1, r4
 80055b2:	9802      	ldr	r0, [sp, #8]
 80055b4:	f000 f952 	bl	800585c <_Bfree>
 80055b8:	464c      	mov	r4, r9
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	2201      	movs	r2, #1
 80055c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055c6:	615a      	str	r2, [r3, #20]
 80055c8:	e7bd      	b.n	8005546 <__gethex+0x3b6>
 80055ca:	6922      	ldr	r2, [r4, #16]
 80055cc:	455a      	cmp	r2, fp
 80055ce:	dd0b      	ble.n	80055e8 <__gethex+0x458>
 80055d0:	2101      	movs	r1, #1
 80055d2:	4620      	mov	r0, r4
 80055d4:	f7ff fd74 	bl	80050c0 <rshift>
 80055d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055dc:	3501      	adds	r5, #1
 80055de:	42ab      	cmp	r3, r5
 80055e0:	f6ff aed5 	blt.w	800538e <__gethex+0x1fe>
 80055e4:	2701      	movs	r7, #1
 80055e6:	e7c2      	b.n	800556e <__gethex+0x3de>
 80055e8:	f016 061f 	ands.w	r6, r6, #31
 80055ec:	d0fa      	beq.n	80055e4 <__gethex+0x454>
 80055ee:	449a      	add	sl, r3
 80055f0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80055f4:	f000 f9e8 	bl	80059c8 <__hi0bits>
 80055f8:	f1c6 0620 	rsb	r6, r6, #32
 80055fc:	42b0      	cmp	r0, r6
 80055fe:	dbe7      	blt.n	80055d0 <__gethex+0x440>
 8005600:	e7f0      	b.n	80055e4 <__gethex+0x454>
 8005602:	bf00      	nop
 8005604:	0800734d 	.word	0x0800734d

08005608 <L_shift>:
 8005608:	f1c2 0208 	rsb	r2, r2, #8
 800560c:	0092      	lsls	r2, r2, #2
 800560e:	b570      	push	{r4, r5, r6, lr}
 8005610:	f1c2 0620 	rsb	r6, r2, #32
 8005614:	6843      	ldr	r3, [r0, #4]
 8005616:	6804      	ldr	r4, [r0, #0]
 8005618:	fa03 f506 	lsl.w	r5, r3, r6
 800561c:	432c      	orrs	r4, r5
 800561e:	40d3      	lsrs	r3, r2
 8005620:	6004      	str	r4, [r0, #0]
 8005622:	f840 3f04 	str.w	r3, [r0, #4]!
 8005626:	4288      	cmp	r0, r1
 8005628:	d3f4      	bcc.n	8005614 <L_shift+0xc>
 800562a:	bd70      	pop	{r4, r5, r6, pc}

0800562c <__match>:
 800562c:	b530      	push	{r4, r5, lr}
 800562e:	6803      	ldr	r3, [r0, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005636:	b914      	cbnz	r4, 800563e <__match+0x12>
 8005638:	6003      	str	r3, [r0, #0]
 800563a:	2001      	movs	r0, #1
 800563c:	bd30      	pop	{r4, r5, pc}
 800563e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005646:	2d19      	cmp	r5, #25
 8005648:	bf98      	it	ls
 800564a:	3220      	addls	r2, #32
 800564c:	42a2      	cmp	r2, r4
 800564e:	d0f0      	beq.n	8005632 <__match+0x6>
 8005650:	2000      	movs	r0, #0
 8005652:	e7f3      	b.n	800563c <__match+0x10>

08005654 <__hexnan>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	2500      	movs	r5, #0
 800565a:	680b      	ldr	r3, [r1, #0]
 800565c:	4682      	mov	sl, r0
 800565e:	115e      	asrs	r6, r3, #5
 8005660:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005664:	f013 031f 	ands.w	r3, r3, #31
 8005668:	bf18      	it	ne
 800566a:	3604      	addne	r6, #4
 800566c:	1f37      	subs	r7, r6, #4
 800566e:	4690      	mov	r8, r2
 8005670:	46b9      	mov	r9, r7
 8005672:	463c      	mov	r4, r7
 8005674:	46ab      	mov	fp, r5
 8005676:	b087      	sub	sp, #28
 8005678:	6801      	ldr	r1, [r0, #0]
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	f846 5c04 	str.w	r5, [r6, #-4]
 8005680:	9502      	str	r5, [sp, #8]
 8005682:	784a      	ldrb	r2, [r1, #1]
 8005684:	1c4b      	adds	r3, r1, #1
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	b342      	cbz	r2, 80056dc <__hexnan+0x88>
 800568a:	4610      	mov	r0, r2
 800568c:	9105      	str	r1, [sp, #20]
 800568e:	9204      	str	r2, [sp, #16]
 8005690:	f7ff fd69 	bl	8005166 <__hexdig_fun>
 8005694:	2800      	cmp	r0, #0
 8005696:	d14f      	bne.n	8005738 <__hexnan+0xe4>
 8005698:	9a04      	ldr	r2, [sp, #16]
 800569a:	9905      	ldr	r1, [sp, #20]
 800569c:	2a20      	cmp	r2, #32
 800569e:	d818      	bhi.n	80056d2 <__hexnan+0x7e>
 80056a0:	9b02      	ldr	r3, [sp, #8]
 80056a2:	459b      	cmp	fp, r3
 80056a4:	dd13      	ble.n	80056ce <__hexnan+0x7a>
 80056a6:	454c      	cmp	r4, r9
 80056a8:	d206      	bcs.n	80056b8 <__hexnan+0x64>
 80056aa:	2d07      	cmp	r5, #7
 80056ac:	dc04      	bgt.n	80056b8 <__hexnan+0x64>
 80056ae:	462a      	mov	r2, r5
 80056b0:	4649      	mov	r1, r9
 80056b2:	4620      	mov	r0, r4
 80056b4:	f7ff ffa8 	bl	8005608 <L_shift>
 80056b8:	4544      	cmp	r4, r8
 80056ba:	d950      	bls.n	800575e <__hexnan+0x10a>
 80056bc:	2300      	movs	r3, #0
 80056be:	f1a4 0904 	sub.w	r9, r4, #4
 80056c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80056c6:	461d      	mov	r5, r3
 80056c8:	464c      	mov	r4, r9
 80056ca:	f8cd b008 	str.w	fp, [sp, #8]
 80056ce:	9903      	ldr	r1, [sp, #12]
 80056d0:	e7d7      	b.n	8005682 <__hexnan+0x2e>
 80056d2:	2a29      	cmp	r2, #41	; 0x29
 80056d4:	d156      	bne.n	8005784 <__hexnan+0x130>
 80056d6:	3102      	adds	r1, #2
 80056d8:	f8ca 1000 	str.w	r1, [sl]
 80056dc:	f1bb 0f00 	cmp.w	fp, #0
 80056e0:	d050      	beq.n	8005784 <__hexnan+0x130>
 80056e2:	454c      	cmp	r4, r9
 80056e4:	d206      	bcs.n	80056f4 <__hexnan+0xa0>
 80056e6:	2d07      	cmp	r5, #7
 80056e8:	dc04      	bgt.n	80056f4 <__hexnan+0xa0>
 80056ea:	462a      	mov	r2, r5
 80056ec:	4649      	mov	r1, r9
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff ff8a 	bl	8005608 <L_shift>
 80056f4:	4544      	cmp	r4, r8
 80056f6:	d934      	bls.n	8005762 <__hexnan+0x10e>
 80056f8:	4623      	mov	r3, r4
 80056fa:	f1a8 0204 	sub.w	r2, r8, #4
 80056fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8005702:	429f      	cmp	r7, r3
 8005704:	f842 1f04 	str.w	r1, [r2, #4]!
 8005708:	d2f9      	bcs.n	80056fe <__hexnan+0xaa>
 800570a:	1b3b      	subs	r3, r7, r4
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	3304      	adds	r3, #4
 8005712:	3401      	adds	r4, #1
 8005714:	3e03      	subs	r6, #3
 8005716:	42b4      	cmp	r4, r6
 8005718:	bf88      	it	hi
 800571a:	2304      	movhi	r3, #4
 800571c:	2200      	movs	r2, #0
 800571e:	4443      	add	r3, r8
 8005720:	f843 2b04 	str.w	r2, [r3], #4
 8005724:	429f      	cmp	r7, r3
 8005726:	d2fb      	bcs.n	8005720 <__hexnan+0xcc>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	b91b      	cbnz	r3, 8005734 <__hexnan+0xe0>
 800572c:	4547      	cmp	r7, r8
 800572e:	d127      	bne.n	8005780 <__hexnan+0x12c>
 8005730:	2301      	movs	r3, #1
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	2005      	movs	r0, #5
 8005736:	e026      	b.n	8005786 <__hexnan+0x132>
 8005738:	3501      	adds	r5, #1
 800573a:	2d08      	cmp	r5, #8
 800573c:	f10b 0b01 	add.w	fp, fp, #1
 8005740:	dd06      	ble.n	8005750 <__hexnan+0xfc>
 8005742:	4544      	cmp	r4, r8
 8005744:	d9c3      	bls.n	80056ce <__hexnan+0x7a>
 8005746:	2300      	movs	r3, #0
 8005748:	2501      	movs	r5, #1
 800574a:	f844 3c04 	str.w	r3, [r4, #-4]
 800574e:	3c04      	subs	r4, #4
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	f000 000f 	and.w	r0, r0, #15
 8005756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800575a:	6022      	str	r2, [r4, #0]
 800575c:	e7b7      	b.n	80056ce <__hexnan+0x7a>
 800575e:	2508      	movs	r5, #8
 8005760:	e7b5      	b.n	80056ce <__hexnan+0x7a>
 8005762:	9b01      	ldr	r3, [sp, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0df      	beq.n	8005728 <__hexnan+0xd4>
 8005768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576c:	f1c3 0320 	rsb	r3, r3, #32
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005778:	401a      	ands	r2, r3
 800577a:	f846 2c04 	str.w	r2, [r6, #-4]
 800577e:	e7d3      	b.n	8005728 <__hexnan+0xd4>
 8005780:	3f04      	subs	r7, #4
 8005782:	e7d1      	b.n	8005728 <__hexnan+0xd4>
 8005784:	2004      	movs	r0, #4
 8005786:	b007      	add	sp, #28
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800578c <malloc>:
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <malloc+0xc>)
 800578e:	4601      	mov	r1, r0
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	f000 bd35 	b.w	8006200 <_malloc_r>
 8005796:	bf00      	nop
 8005798:	2000000c 	.word	0x2000000c

0800579c <__ascii_mbtowc>:
 800579c:	b082      	sub	sp, #8
 800579e:	b901      	cbnz	r1, 80057a2 <__ascii_mbtowc+0x6>
 80057a0:	a901      	add	r1, sp, #4
 80057a2:	b142      	cbz	r2, 80057b6 <__ascii_mbtowc+0x1a>
 80057a4:	b14b      	cbz	r3, 80057ba <__ascii_mbtowc+0x1e>
 80057a6:	7813      	ldrb	r3, [r2, #0]
 80057a8:	600b      	str	r3, [r1, #0]
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	1e10      	subs	r0, r2, #0
 80057ae:	bf18      	it	ne
 80057b0:	2001      	movne	r0, #1
 80057b2:	b002      	add	sp, #8
 80057b4:	4770      	bx	lr
 80057b6:	4610      	mov	r0, r2
 80057b8:	e7fb      	b.n	80057b2 <__ascii_mbtowc+0x16>
 80057ba:	f06f 0001 	mvn.w	r0, #1
 80057be:	e7f8      	b.n	80057b2 <__ascii_mbtowc+0x16>

080057c0 <memcpy>:
 80057c0:	440a      	add	r2, r1
 80057c2:	4291      	cmp	r1, r2
 80057c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057c8:	d100      	bne.n	80057cc <memcpy+0xc>
 80057ca:	4770      	bx	lr
 80057cc:	b510      	push	{r4, lr}
 80057ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d2:	4291      	cmp	r1, r2
 80057d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d8:	d1f9      	bne.n	80057ce <memcpy+0xe>
 80057da:	bd10      	pop	{r4, pc}

080057dc <_Balloc>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057e0:	4604      	mov	r4, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	b976      	cbnz	r6, 8005804 <_Balloc+0x28>
 80057e6:	2010      	movs	r0, #16
 80057e8:	f7ff ffd0 	bl	800578c <malloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6260      	str	r0, [r4, #36]	; 0x24
 80057f0:	b920      	cbnz	r0, 80057fc <_Balloc+0x20>
 80057f2:	2166      	movs	r1, #102	; 0x66
 80057f4:	4b17      	ldr	r3, [pc, #92]	; (8005854 <_Balloc+0x78>)
 80057f6:	4818      	ldr	r0, [pc, #96]	; (8005858 <_Balloc+0x7c>)
 80057f8:	f7ff fc32 	bl	8005060 <__assert_func>
 80057fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005800:	6006      	str	r6, [r0, #0]
 8005802:	60c6      	str	r6, [r0, #12]
 8005804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005806:	68f3      	ldr	r3, [r6, #12]
 8005808:	b183      	cbz	r3, 800582c <_Balloc+0x50>
 800580a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005812:	b9b8      	cbnz	r0, 8005844 <_Balloc+0x68>
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f605 	lsl.w	r6, r1, r5
 800581a:	1d72      	adds	r2, r6, #5
 800581c:	4620      	mov	r0, r4
 800581e:	0092      	lsls	r2, r2, #2
 8005820:	f000 fc94 	bl	800614c <_calloc_r>
 8005824:	b160      	cbz	r0, 8005840 <_Balloc+0x64>
 8005826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800582a:	e00e      	b.n	800584a <_Balloc+0x6e>
 800582c:	2221      	movs	r2, #33	; 0x21
 800582e:	2104      	movs	r1, #4
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fc8b 	bl	800614c <_calloc_r>
 8005836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005838:	60f0      	str	r0, [r6, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e4      	bne.n	800580a <_Balloc+0x2e>
 8005840:	2000      	movs	r0, #0
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800584a:	2300      	movs	r3, #0
 800584c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005850:	e7f7      	b.n	8005842 <_Balloc+0x66>
 8005852:	bf00      	nop
 8005854:	08007198 	.word	0x08007198
 8005858:	080073dc 	.word	0x080073dc

0800585c <_Bfree>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b976      	cbnz	r6, 8005884 <_Bfree+0x28>
 8005866:	2010      	movs	r0, #16
 8005868:	f7ff ff90 	bl	800578c <malloc>
 800586c:	4602      	mov	r2, r0
 800586e:	6268      	str	r0, [r5, #36]	; 0x24
 8005870:	b920      	cbnz	r0, 800587c <_Bfree+0x20>
 8005872:	218a      	movs	r1, #138	; 0x8a
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <_Bfree+0x3c>)
 8005876:	4809      	ldr	r0, [pc, #36]	; (800589c <_Bfree+0x40>)
 8005878:	f7ff fbf2 	bl	8005060 <__assert_func>
 800587c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005880:	6006      	str	r6, [r0, #0]
 8005882:	60c6      	str	r6, [r0, #12]
 8005884:	b13c      	cbz	r4, 8005896 <_Bfree+0x3a>
 8005886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	6021      	str	r1, [r4, #0]
 8005892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	08007198 	.word	0x08007198
 800589c:	080073dc 	.word	0x080073dc

080058a0 <__multadd>:
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	4698      	mov	r8, r3
 80058a6:	460c      	mov	r4, r1
 80058a8:	2300      	movs	r3, #0
 80058aa:	690e      	ldr	r6, [r1, #16]
 80058ac:	4607      	mov	r7, r0
 80058ae:	f101 0014 	add.w	r0, r1, #20
 80058b2:	6805      	ldr	r5, [r0, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	b2a9      	uxth	r1, r5
 80058b8:	fb02 8101 	mla	r1, r2, r1, r8
 80058bc:	0c2d      	lsrs	r5, r5, #16
 80058be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80058c2:	fb02 c505 	mla	r5, r2, r5, ip
 80058c6:	b289      	uxth	r1, r1
 80058c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80058cc:	429e      	cmp	r6, r3
 80058ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80058d2:	f840 1b04 	str.w	r1, [r0], #4
 80058d6:	dcec      	bgt.n	80058b2 <__multadd+0x12>
 80058d8:	f1b8 0f00 	cmp.w	r8, #0
 80058dc:	d022      	beq.n	8005924 <__multadd+0x84>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	42b3      	cmp	r3, r6
 80058e2:	dc19      	bgt.n	8005918 <__multadd+0x78>
 80058e4:	6861      	ldr	r1, [r4, #4]
 80058e6:	4638      	mov	r0, r7
 80058e8:	3101      	adds	r1, #1
 80058ea:	f7ff ff77 	bl	80057dc <_Balloc>
 80058ee:	4605      	mov	r5, r0
 80058f0:	b928      	cbnz	r0, 80058fe <__multadd+0x5e>
 80058f2:	4602      	mov	r2, r0
 80058f4:	21b5      	movs	r1, #181	; 0xb5
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <__multadd+0x8c>)
 80058f8:	480d      	ldr	r0, [pc, #52]	; (8005930 <__multadd+0x90>)
 80058fa:	f7ff fbb1 	bl	8005060 <__assert_func>
 80058fe:	6922      	ldr	r2, [r4, #16]
 8005900:	f104 010c 	add.w	r1, r4, #12
 8005904:	3202      	adds	r2, #2
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	300c      	adds	r0, #12
 800590a:	f7ff ff59 	bl	80057c0 <memcpy>
 800590e:	4621      	mov	r1, r4
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff ffa3 	bl	800585c <_Bfree>
 8005916:	462c      	mov	r4, r5
 8005918:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800591c:	3601      	adds	r6, #1
 800591e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005922:	6126      	str	r6, [r4, #16]
 8005924:	4620      	mov	r0, r4
 8005926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592a:	bf00      	nop
 800592c:	0800734d 	.word	0x0800734d
 8005930:	080073dc 	.word	0x080073dc

08005934 <__s2b>:
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005938:	4615      	mov	r5, r2
 800593a:	2209      	movs	r2, #9
 800593c:	461f      	mov	r7, r3
 800593e:	3308      	adds	r3, #8
 8005940:	460c      	mov	r4, r1
 8005942:	fb93 f3f2 	sdiv	r3, r3, r2
 8005946:	4606      	mov	r6, r0
 8005948:	2201      	movs	r2, #1
 800594a:	2100      	movs	r1, #0
 800594c:	429a      	cmp	r2, r3
 800594e:	db09      	blt.n	8005964 <__s2b+0x30>
 8005950:	4630      	mov	r0, r6
 8005952:	f7ff ff43 	bl	80057dc <_Balloc>
 8005956:	b940      	cbnz	r0, 800596a <__s2b+0x36>
 8005958:	4602      	mov	r2, r0
 800595a:	21ce      	movs	r1, #206	; 0xce
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <__s2b+0x8c>)
 800595e:	4819      	ldr	r0, [pc, #100]	; (80059c4 <__s2b+0x90>)
 8005960:	f7ff fb7e 	bl	8005060 <__assert_func>
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	3101      	adds	r1, #1
 8005968:	e7f0      	b.n	800594c <__s2b+0x18>
 800596a:	9b08      	ldr	r3, [sp, #32]
 800596c:	2d09      	cmp	r5, #9
 800596e:	6143      	str	r3, [r0, #20]
 8005970:	f04f 0301 	mov.w	r3, #1
 8005974:	6103      	str	r3, [r0, #16]
 8005976:	dd16      	ble.n	80059a6 <__s2b+0x72>
 8005978:	f104 0909 	add.w	r9, r4, #9
 800597c:	46c8      	mov	r8, r9
 800597e:	442c      	add	r4, r5
 8005980:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005984:	4601      	mov	r1, r0
 8005986:	220a      	movs	r2, #10
 8005988:	4630      	mov	r0, r6
 800598a:	3b30      	subs	r3, #48	; 0x30
 800598c:	f7ff ff88 	bl	80058a0 <__multadd>
 8005990:	45a0      	cmp	r8, r4
 8005992:	d1f5      	bne.n	8005980 <__s2b+0x4c>
 8005994:	f1a5 0408 	sub.w	r4, r5, #8
 8005998:	444c      	add	r4, r9
 800599a:	1b2d      	subs	r5, r5, r4
 800599c:	1963      	adds	r3, r4, r5
 800599e:	42bb      	cmp	r3, r7
 80059a0:	db04      	blt.n	80059ac <__s2b+0x78>
 80059a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a6:	2509      	movs	r5, #9
 80059a8:	340a      	adds	r4, #10
 80059aa:	e7f6      	b.n	800599a <__s2b+0x66>
 80059ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80059b0:	4601      	mov	r1, r0
 80059b2:	220a      	movs	r2, #10
 80059b4:	4630      	mov	r0, r6
 80059b6:	3b30      	subs	r3, #48	; 0x30
 80059b8:	f7ff ff72 	bl	80058a0 <__multadd>
 80059bc:	e7ee      	b.n	800599c <__s2b+0x68>
 80059be:	bf00      	nop
 80059c0:	0800734d 	.word	0x0800734d
 80059c4:	080073dc 	.word	0x080073dc

080059c8 <__hi0bits>:
 80059c8:	0c02      	lsrs	r2, r0, #16
 80059ca:	0412      	lsls	r2, r2, #16
 80059cc:	4603      	mov	r3, r0
 80059ce:	b9ca      	cbnz	r2, 8005a04 <__hi0bits+0x3c>
 80059d0:	0403      	lsls	r3, r0, #16
 80059d2:	2010      	movs	r0, #16
 80059d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059d8:	bf04      	itt	eq
 80059da:	021b      	lsleq	r3, r3, #8
 80059dc:	3008      	addeq	r0, #8
 80059de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059e2:	bf04      	itt	eq
 80059e4:	011b      	lsleq	r3, r3, #4
 80059e6:	3004      	addeq	r0, #4
 80059e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059ec:	bf04      	itt	eq
 80059ee:	009b      	lsleq	r3, r3, #2
 80059f0:	3002      	addeq	r0, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db05      	blt.n	8005a02 <__hi0bits+0x3a>
 80059f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80059fa:	f100 0001 	add.w	r0, r0, #1
 80059fe:	bf08      	it	eq
 8005a00:	2020      	moveq	r0, #32
 8005a02:	4770      	bx	lr
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7e5      	b.n	80059d4 <__hi0bits+0xc>

08005a08 <__lo0bits>:
 8005a08:	6803      	ldr	r3, [r0, #0]
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f013 0007 	ands.w	r0, r3, #7
 8005a10:	d00b      	beq.n	8005a2a <__lo0bits+0x22>
 8005a12:	07d9      	lsls	r1, r3, #31
 8005a14:	d422      	bmi.n	8005a5c <__lo0bits+0x54>
 8005a16:	0798      	lsls	r0, r3, #30
 8005a18:	bf49      	itett	mi
 8005a1a:	085b      	lsrmi	r3, r3, #1
 8005a1c:	089b      	lsrpl	r3, r3, #2
 8005a1e:	2001      	movmi	r0, #1
 8005a20:	6013      	strmi	r3, [r2, #0]
 8005a22:	bf5c      	itt	pl
 8005a24:	2002      	movpl	r0, #2
 8005a26:	6013      	strpl	r3, [r2, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	b909      	cbnz	r1, 8005a32 <__lo0bits+0x2a>
 8005a2e:	2010      	movs	r0, #16
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a36:	bf04      	itt	eq
 8005a38:	0a1b      	lsreq	r3, r3, #8
 8005a3a:	3008      	addeq	r0, #8
 8005a3c:	0719      	lsls	r1, r3, #28
 8005a3e:	bf04      	itt	eq
 8005a40:	091b      	lsreq	r3, r3, #4
 8005a42:	3004      	addeq	r0, #4
 8005a44:	0799      	lsls	r1, r3, #30
 8005a46:	bf04      	itt	eq
 8005a48:	089b      	lsreq	r3, r3, #2
 8005a4a:	3002      	addeq	r0, #2
 8005a4c:	07d9      	lsls	r1, r3, #31
 8005a4e:	d403      	bmi.n	8005a58 <__lo0bits+0x50>
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	f100 0001 	add.w	r0, r0, #1
 8005a56:	d003      	beq.n	8005a60 <__lo0bits+0x58>
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4770      	bx	lr
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	4770      	bx	lr
 8005a60:	2020      	movs	r0, #32
 8005a62:	4770      	bx	lr

08005a64 <__i2b>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	460c      	mov	r4, r1
 8005a68:	2101      	movs	r1, #1
 8005a6a:	f7ff feb7 	bl	80057dc <_Balloc>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	b928      	cbnz	r0, 8005a7e <__i2b+0x1a>
 8005a72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a76:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__i2b+0x24>)
 8005a78:	4804      	ldr	r0, [pc, #16]	; (8005a8c <__i2b+0x28>)
 8005a7a:	f7ff faf1 	bl	8005060 <__assert_func>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	6144      	str	r4, [r0, #20]
 8005a82:	6103      	str	r3, [r0, #16]
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop
 8005a88:	0800734d 	.word	0x0800734d
 8005a8c:	080073dc 	.word	0x080073dc

08005a90 <__multiply>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4614      	mov	r4, r2
 8005a96:	690a      	ldr	r2, [r1, #16]
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bfbe      	ittt	lt
 8005aa0:	460b      	movlt	r3, r1
 8005aa2:	4625      	movlt	r5, r4
 8005aa4:	461c      	movlt	r4, r3
 8005aa6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005aaa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005aae:	68ab      	ldr	r3, [r5, #8]
 8005ab0:	6869      	ldr	r1, [r5, #4]
 8005ab2:	eb0a 0709 	add.w	r7, sl, r9
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	b085      	sub	sp, #20
 8005aba:	bfb8      	it	lt
 8005abc:	3101      	addlt	r1, #1
 8005abe:	f7ff fe8d 	bl	80057dc <_Balloc>
 8005ac2:	b930      	cbnz	r0, 8005ad2 <__multiply+0x42>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f240 115d 	movw	r1, #349	; 0x15d
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <__multiply+0x140>)
 8005acc:	4841      	ldr	r0, [pc, #260]	; (8005bd4 <__multiply+0x144>)
 8005ace:	f7ff fac7 	bl	8005060 <__assert_func>
 8005ad2:	f100 0614 	add.w	r6, r0, #20
 8005ad6:	4633      	mov	r3, r6
 8005ad8:	2200      	movs	r2, #0
 8005ada:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005ade:	4543      	cmp	r3, r8
 8005ae0:	d31e      	bcc.n	8005b20 <__multiply+0x90>
 8005ae2:	f105 0c14 	add.w	ip, r5, #20
 8005ae6:	f104 0314 	add.w	r3, r4, #20
 8005aea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005aee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005af2:	9202      	str	r2, [sp, #8]
 8005af4:	ebac 0205 	sub.w	r2, ip, r5
 8005af8:	3a15      	subs	r2, #21
 8005afa:	f022 0203 	bic.w	r2, r2, #3
 8005afe:	3204      	adds	r2, #4
 8005b00:	f105 0115 	add.w	r1, r5, #21
 8005b04:	458c      	cmp	ip, r1
 8005b06:	bf38      	it	cc
 8005b08:	2204      	movcc	r2, #4
 8005b0a:	9201      	str	r2, [sp, #4]
 8005b0c:	9a02      	ldr	r2, [sp, #8]
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d808      	bhi.n	8005b26 <__multiply+0x96>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	dc55      	bgt.n	8005bc4 <__multiply+0x134>
 8005b18:	6107      	str	r7, [r0, #16]
 8005b1a:	b005      	add	sp, #20
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	f843 2b04 	str.w	r2, [r3], #4
 8005b24:	e7db      	b.n	8005ade <__multiply+0x4e>
 8005b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	d020      	beq.n	8005b72 <__multiply+0xe2>
 8005b30:	46b1      	mov	r9, r6
 8005b32:	2200      	movs	r2, #0
 8005b34:	f105 0e14 	add.w	lr, r5, #20
 8005b38:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b3c:	f8d9 b000 	ldr.w	fp, [r9]
 8005b40:	b2a1      	uxth	r1, r4
 8005b42:	fa1f fb8b 	uxth.w	fp, fp
 8005b46:	fb0a b101 	mla	r1, sl, r1, fp
 8005b4a:	4411      	add	r1, r2
 8005b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b50:	0c24      	lsrs	r4, r4, #16
 8005b52:	0c12      	lsrs	r2, r2, #16
 8005b54:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b58:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b5c:	b289      	uxth	r1, r1
 8005b5e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b62:	45f4      	cmp	ip, lr
 8005b64:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b68:	f849 1b04 	str.w	r1, [r9], #4
 8005b6c:	d8e4      	bhi.n	8005b38 <__multiply+0xa8>
 8005b6e:	9901      	ldr	r1, [sp, #4]
 8005b70:	5072      	str	r2, [r6, r1]
 8005b72:	9a03      	ldr	r2, [sp, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b7a:	f1b9 0f00 	cmp.w	r9, #0
 8005b7e:	d01f      	beq.n	8005bc0 <__multiply+0x130>
 8005b80:	46b6      	mov	lr, r6
 8005b82:	f04f 0a00 	mov.w	sl, #0
 8005b86:	6834      	ldr	r4, [r6, #0]
 8005b88:	f105 0114 	add.w	r1, r5, #20
 8005b8c:	880a      	ldrh	r2, [r1, #0]
 8005b8e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005b92:	b2a4      	uxth	r4, r4
 8005b94:	fb09 b202 	mla	r2, r9, r2, fp
 8005b98:	4492      	add	sl, r2
 8005b9a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005b9e:	f84e 4b04 	str.w	r4, [lr], #4
 8005ba2:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ba6:	f8be 2000 	ldrh.w	r2, [lr]
 8005baa:	0c24      	lsrs	r4, r4, #16
 8005bac:	fb09 2404 	mla	r4, r9, r4, r2
 8005bb0:	458c      	cmp	ip, r1
 8005bb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005bb6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bba:	d8e7      	bhi.n	8005b8c <__multiply+0xfc>
 8005bbc:	9a01      	ldr	r2, [sp, #4]
 8005bbe:	50b4      	str	r4, [r6, r2]
 8005bc0:	3604      	adds	r6, #4
 8005bc2:	e7a3      	b.n	8005b0c <__multiply+0x7c>
 8005bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1a5      	bne.n	8005b18 <__multiply+0x88>
 8005bcc:	3f01      	subs	r7, #1
 8005bce:	e7a1      	b.n	8005b14 <__multiply+0x84>
 8005bd0:	0800734d 	.word	0x0800734d
 8005bd4:	080073dc 	.word	0x080073dc

08005bd8 <__pow5mult>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4615      	mov	r5, r2
 8005bde:	f012 0203 	ands.w	r2, r2, #3
 8005be2:	4606      	mov	r6, r0
 8005be4:	460f      	mov	r7, r1
 8005be6:	d007      	beq.n	8005bf8 <__pow5mult+0x20>
 8005be8:	4c25      	ldr	r4, [pc, #148]	; (8005c80 <__pow5mult+0xa8>)
 8005bea:	3a01      	subs	r2, #1
 8005bec:	2300      	movs	r3, #0
 8005bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bf2:	f7ff fe55 	bl	80058a0 <__multadd>
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	10ad      	asrs	r5, r5, #2
 8005bfa:	d03d      	beq.n	8005c78 <__pow5mult+0xa0>
 8005bfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bfe:	b97c      	cbnz	r4, 8005c20 <__pow5mult+0x48>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f7ff fdc3 	bl	800578c <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6270      	str	r0, [r6, #36]	; 0x24
 8005c0a:	b928      	cbnz	r0, 8005c18 <__pow5mult+0x40>
 8005c0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c10:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <__pow5mult+0xac>)
 8005c12:	481d      	ldr	r0, [pc, #116]	; (8005c88 <__pow5mult+0xb0>)
 8005c14:	f7ff fa24 	bl	8005060 <__assert_func>
 8005c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1c:	6004      	str	r4, [r0, #0]
 8005c1e:	60c4      	str	r4, [r0, #12]
 8005c20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c28:	b94c      	cbnz	r4, 8005c3e <__pow5mult+0x66>
 8005c2a:	f240 2171 	movw	r1, #625	; 0x271
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7ff ff18 	bl	8005a64 <__i2b>
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c3c:	6003      	str	r3, [r0, #0]
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	07eb      	lsls	r3, r5, #31
 8005c44:	d50a      	bpl.n	8005c5c <__pow5mult+0x84>
 8005c46:	4639      	mov	r1, r7
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ff20 	bl	8005a90 <__multiply>
 8005c50:	4680      	mov	r8, r0
 8005c52:	4639      	mov	r1, r7
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff fe01 	bl	800585c <_Bfree>
 8005c5a:	4647      	mov	r7, r8
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	d00b      	beq.n	8005c78 <__pow5mult+0xa0>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	b938      	cbnz	r0, 8005c74 <__pow5mult+0x9c>
 8005c64:	4622      	mov	r2, r4
 8005c66:	4621      	mov	r1, r4
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff ff11 	bl	8005a90 <__multiply>
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f8c0 9000 	str.w	r9, [r0]
 8005c74:	4604      	mov	r4, r0
 8005c76:	e7e4      	b.n	8005c42 <__pow5mult+0x6a>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop
 8005c80:	08007530 	.word	0x08007530
 8005c84:	08007198 	.word	0x08007198
 8005c88:	080073dc 	.word	0x080073dc

08005c8c <__lshift>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	4607      	mov	r7, r0
 8005c94:	4691      	mov	r9, r2
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	6849      	ldr	r1, [r1, #4]
 8005c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca4:	f108 0601 	add.w	r6, r8, #1
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	db0b      	blt.n	8005cc4 <__lshift+0x38>
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff fd95 	bl	80057dc <_Balloc>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b948      	cbnz	r0, 8005cca <__lshift+0x3e>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cbc:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <__lshift+0xd0>)
 8005cbe:	4828      	ldr	r0, [pc, #160]	; (8005d60 <__lshift+0xd4>)
 8005cc0:	f7ff f9ce 	bl	8005060 <__assert_func>
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__lshift+0x1c>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f100 0114 	add.w	r1, r0, #20
 8005cd0:	f100 0210 	add.w	r2, r0, #16
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4553      	cmp	r3, sl
 8005cd8:	db33      	blt.n	8005d42 <__lshift+0xb6>
 8005cda:	6920      	ldr	r0, [r4, #16]
 8005cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce0:	f104 0314 	add.w	r3, r4, #20
 8005ce4:	f019 091f 	ands.w	r9, r9, #31
 8005ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cf0:	d02b      	beq.n	8005d4a <__lshift+0xbe>
 8005cf2:	468a      	mov	sl, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005d00:	4302      	orrs	r2, r0
 8005d02:	f84a 2b04 	str.w	r2, [sl], #4
 8005d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0a:	459c      	cmp	ip, r3
 8005d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d10:	d8f3      	bhi.n	8005cfa <__lshift+0x6e>
 8005d12:	ebac 0304 	sub.w	r3, ip, r4
 8005d16:	3b15      	subs	r3, #21
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	f104 0015 	add.w	r0, r4, #21
 8005d22:	4584      	cmp	ip, r0
 8005d24:	bf38      	it	cc
 8005d26:	2304      	movcc	r3, #4
 8005d28:	50ca      	str	r2, [r1, r3]
 8005d2a:	b10a      	cbz	r2, 8005d30 <__lshift+0xa4>
 8005d2c:	f108 0602 	add.w	r6, r8, #2
 8005d30:	3e01      	subs	r6, #1
 8005d32:	4638      	mov	r0, r7
 8005d34:	4621      	mov	r1, r4
 8005d36:	612e      	str	r6, [r5, #16]
 8005d38:	f7ff fd90 	bl	800585c <_Bfree>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d46:	3301      	adds	r3, #1
 8005d48:	e7c5      	b.n	8005cd6 <__lshift+0x4a>
 8005d4a:	3904      	subs	r1, #4
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	459c      	cmp	ip, r3
 8005d52:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d56:	d8f9      	bhi.n	8005d4c <__lshift+0xc0>
 8005d58:	e7ea      	b.n	8005d30 <__lshift+0xa4>
 8005d5a:	bf00      	nop
 8005d5c:	0800734d 	.word	0x0800734d
 8005d60:	080073dc 	.word	0x080073dc

08005d64 <__mcmp>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	690a      	ldr	r2, [r1, #16]
 8005d68:	6900      	ldr	r0, [r0, #16]
 8005d6a:	b530      	push	{r4, r5, lr}
 8005d6c:	1a80      	subs	r0, r0, r2
 8005d6e:	d10d      	bne.n	8005d8c <__mcmp+0x28>
 8005d70:	3314      	adds	r3, #20
 8005d72:	3114      	adds	r1, #20
 8005d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d84:	4295      	cmp	r5, r2
 8005d86:	d002      	beq.n	8005d8e <__mcmp+0x2a>
 8005d88:	d304      	bcc.n	8005d94 <__mcmp+0x30>
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	bd30      	pop	{r4, r5, pc}
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	d3f4      	bcc.n	8005d7c <__mcmp+0x18>
 8005d92:	e7fb      	b.n	8005d8c <__mcmp+0x28>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d98:	e7f8      	b.n	8005d8c <__mcmp+0x28>
	...

08005d9c <__mdiff>:
 8005d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	460c      	mov	r4, r1
 8005da2:	4606      	mov	r6, r0
 8005da4:	4611      	mov	r1, r2
 8005da6:	4620      	mov	r0, r4
 8005da8:	4692      	mov	sl, r2
 8005daa:	f7ff ffdb 	bl	8005d64 <__mcmp>
 8005dae:	1e05      	subs	r5, r0, #0
 8005db0:	d111      	bne.n	8005dd6 <__mdiff+0x3a>
 8005db2:	4629      	mov	r1, r5
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff fd11 	bl	80057dc <_Balloc>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__mdiff+0x2e>
 8005dbe:	f240 2132 	movw	r1, #562	; 0x232
 8005dc2:	4b3c      	ldr	r3, [pc, #240]	; (8005eb4 <__mdiff+0x118>)
 8005dc4:	483c      	ldr	r0, [pc, #240]	; (8005eb8 <__mdiff+0x11c>)
 8005dc6:	f7ff f94b 	bl	8005060 <__assert_func>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	bfa4      	itt	ge
 8005dd8:	4653      	movge	r3, sl
 8005dda:	46a2      	movge	sl, r4
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005de2:	bfa6      	itte	ge
 8005de4:	461c      	movge	r4, r3
 8005de6:	2500      	movge	r5, #0
 8005de8:	2501      	movlt	r5, #1
 8005dea:	f7ff fcf7 	bl	80057dc <_Balloc>
 8005dee:	4602      	mov	r2, r0
 8005df0:	b918      	cbnz	r0, 8005dfa <__mdiff+0x5e>
 8005df2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005df6:	4b2f      	ldr	r3, [pc, #188]	; (8005eb4 <__mdiff+0x118>)
 8005df8:	e7e4      	b.n	8005dc4 <__mdiff+0x28>
 8005dfa:	f100 0814 	add.w	r8, r0, #20
 8005dfe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005e02:	60c5      	str	r5, [r0, #12]
 8005e04:	f04f 0c00 	mov.w	ip, #0
 8005e08:	f10a 0514 	add.w	r5, sl, #20
 8005e0c:	f10a 0010 	add.w	r0, sl, #16
 8005e10:	46c2      	mov	sl, r8
 8005e12:	6926      	ldr	r6, [r4, #16]
 8005e14:	f104 0914 	add.w	r9, r4, #20
 8005e18:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005e1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e20:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e28:	fa1f f18b 	uxth.w	r1, fp
 8005e2c:	4461      	add	r1, ip
 8005e2e:	fa1f fc83 	uxth.w	ip, r3
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	eba1 010c 	sub.w	r1, r1, ip
 8005e38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e3c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e40:	b289      	uxth	r1, r1
 8005e42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e46:	454e      	cmp	r6, r9
 8005e48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e4c:	f84a 3b04 	str.w	r3, [sl], #4
 8005e50:	d8e6      	bhi.n	8005e20 <__mdiff+0x84>
 8005e52:	1b33      	subs	r3, r6, r4
 8005e54:	3b15      	subs	r3, #21
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	3415      	adds	r4, #21
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	bf38      	it	cc
 8005e62:	2304      	movcc	r3, #4
 8005e64:	441d      	add	r5, r3
 8005e66:	4443      	add	r3, r8
 8005e68:	461e      	mov	r6, r3
 8005e6a:	462c      	mov	r4, r5
 8005e6c:	4574      	cmp	r4, lr
 8005e6e:	d30e      	bcc.n	8005e8e <__mdiff+0xf2>
 8005e70:	f10e 0103 	add.w	r1, lr, #3
 8005e74:	1b49      	subs	r1, r1, r5
 8005e76:	f021 0103 	bic.w	r1, r1, #3
 8005e7a:	3d03      	subs	r5, #3
 8005e7c:	45ae      	cmp	lr, r5
 8005e7e:	bf38      	it	cc
 8005e80:	2100      	movcc	r1, #0
 8005e82:	4419      	add	r1, r3
 8005e84:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e88:	b18b      	cbz	r3, 8005eae <__mdiff+0x112>
 8005e8a:	6117      	str	r7, [r2, #16]
 8005e8c:	e7a0      	b.n	8005dd0 <__mdiff+0x34>
 8005e8e:	f854 8b04 	ldr.w	r8, [r4], #4
 8005e92:	fa1f f188 	uxth.w	r1, r8
 8005e96:	4461      	add	r1, ip
 8005e98:	1408      	asrs	r0, r1, #16
 8005e9a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005e9e:	b289      	uxth	r1, r1
 8005ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ea8:	f846 1b04 	str.w	r1, [r6], #4
 8005eac:	e7de      	b.n	8005e6c <__mdiff+0xd0>
 8005eae:	3f01      	subs	r7, #1
 8005eb0:	e7e8      	b.n	8005e84 <__mdiff+0xe8>
 8005eb2:	bf00      	nop
 8005eb4:	0800734d 	.word	0x0800734d
 8005eb8:	080073dc 	.word	0x080073dc

08005ebc <__ulp>:
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <__ulp+0x48>)
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd02      	ble.n	8005ece <__ulp+0x12>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4770      	bx	lr
 8005ece:	425b      	negs	r3, r3
 8005ed0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005ed4:	f04f 0000 	mov.w	r0, #0
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005ee0:	da04      	bge.n	8005eec <__ulp+0x30>
 8005ee2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ee6:	fa43 f102 	asr.w	r1, r3, r2
 8005eea:	4770      	bx	lr
 8005eec:	f1a2 0314 	sub.w	r3, r2, #20
 8005ef0:	2b1e      	cmp	r3, #30
 8005ef2:	bfd6      	itet	le
 8005ef4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005ef8:	2301      	movgt	r3, #1
 8005efa:	fa22 f303 	lsrle.w	r3, r2, r3
 8005efe:	4618      	mov	r0, r3
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	7ff00000 	.word	0x7ff00000

08005f08 <__b2d>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	6907      	ldr	r7, [r0, #16]
 8005f0e:	f100 0914 	add.w	r9, r0, #20
 8005f12:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005f16:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005f1a:	f1a7 0804 	sub.w	r8, r7, #4
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff fd52 	bl	80059c8 <__hi0bits>
 8005f24:	f1c0 0320 	rsb	r3, r0, #32
 8005f28:	280a      	cmp	r0, #10
 8005f2a:	600b      	str	r3, [r1, #0]
 8005f2c:	491f      	ldr	r1, [pc, #124]	; (8005fac <__b2d+0xa4>)
 8005f2e:	dc17      	bgt.n	8005f60 <__b2d+0x58>
 8005f30:	45c1      	cmp	r9, r8
 8005f32:	bf28      	it	cs
 8005f34:	2200      	movcs	r2, #0
 8005f36:	f1c0 0c0b 	rsb	ip, r0, #11
 8005f3a:	fa26 f30c 	lsr.w	r3, r6, ip
 8005f3e:	bf38      	it	cc
 8005f40:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f44:	ea43 0501 	orr.w	r5, r3, r1
 8005f48:	f100 0315 	add.w	r3, r0, #21
 8005f4c:	fa06 f303 	lsl.w	r3, r6, r3
 8005f50:	fa22 f20c 	lsr.w	r2, r2, ip
 8005f54:	ea43 0402 	orr.w	r4, r3, r2
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f60:	45c1      	cmp	r9, r8
 8005f62:	bf2e      	itee	cs
 8005f64:	2200      	movcs	r2, #0
 8005f66:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f6a:	f1a7 0808 	subcc.w	r8, r7, #8
 8005f6e:	f1b0 030b 	subs.w	r3, r0, #11
 8005f72:	d016      	beq.n	8005fa2 <__b2d+0x9a>
 8005f74:	f1c3 0720 	rsb	r7, r3, #32
 8005f78:	fa22 f107 	lsr.w	r1, r2, r7
 8005f7c:	45c8      	cmp	r8, r9
 8005f7e:	fa06 f603 	lsl.w	r6, r6, r3
 8005f82:	ea46 0601 	orr.w	r6, r6, r1
 8005f86:	bf94      	ite	ls
 8005f88:	2100      	movls	r1, #0
 8005f8a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005f8e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005f92:	fa02 f003 	lsl.w	r0, r2, r3
 8005f96:	40f9      	lsrs	r1, r7
 8005f98:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f9c:	ea40 0401 	orr.w	r4, r0, r1
 8005fa0:	e7da      	b.n	8005f58 <__b2d+0x50>
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	ea46 0501 	orr.w	r5, r6, r1
 8005fa8:	e7d6      	b.n	8005f58 <__b2d+0x50>
 8005faa:	bf00      	nop
 8005fac:	3ff00000 	.word	0x3ff00000

08005fb0 <__d2b>:
 8005fb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005fba:	4690      	mov	r8, r2
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	f7ff fc0d 	bl	80057dc <_Balloc>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b930      	cbnz	r0, 8005fd4 <__d2b+0x24>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <__d2b+0xb0>)
 8005fce:	4825      	ldr	r0, [pc, #148]	; (8006064 <__d2b+0xb4>)
 8005fd0:	f7ff f846 	bl	8005060 <__assert_func>
 8005fd4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fd8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fdc:	bb2d      	cbnz	r5, 800602a <__d2b+0x7a>
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fe4:	d026      	beq.n	8006034 <__d2b+0x84>
 8005fe6:	4668      	mov	r0, sp
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	f7ff fd0d 	bl	8005a08 <__lo0bits>
 8005fee:	9900      	ldr	r1, [sp, #0]
 8005ff0:	b1f0      	cbz	r0, 8006030 <__d2b+0x80>
 8005ff2:	9a01      	ldr	r2, [sp, #4]
 8005ff4:	f1c0 0320 	rsb	r3, r0, #32
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	40c2      	lsrs	r2, r0
 8006000:	6163      	str	r3, [r4, #20]
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf14      	ite	ne
 800600a:	2102      	movne	r1, #2
 800600c:	2101      	moveq	r1, #1
 800600e:	61a3      	str	r3, [r4, #24]
 8006010:	6121      	str	r1, [r4, #16]
 8006012:	b1c5      	cbz	r5, 8006046 <__d2b+0x96>
 8006014:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006018:	4405      	add	r5, r0
 800601a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800601e:	603d      	str	r5, [r7, #0]
 8006020:	6030      	str	r0, [r6, #0]
 8006022:	4620      	mov	r0, r4
 8006024:	b002      	add	sp, #8
 8006026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602e:	e7d6      	b.n	8005fde <__d2b+0x2e>
 8006030:	6161      	str	r1, [r4, #20]
 8006032:	e7e7      	b.n	8006004 <__d2b+0x54>
 8006034:	a801      	add	r0, sp, #4
 8006036:	f7ff fce7 	bl	8005a08 <__lo0bits>
 800603a:	2101      	movs	r1, #1
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	6121      	str	r1, [r4, #16]
 8006040:	6163      	str	r3, [r4, #20]
 8006042:	3020      	adds	r0, #32
 8006044:	e7e5      	b.n	8006012 <__d2b+0x62>
 8006046:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800604a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800604e:	6038      	str	r0, [r7, #0]
 8006050:	6918      	ldr	r0, [r3, #16]
 8006052:	f7ff fcb9 	bl	80059c8 <__hi0bits>
 8006056:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800605a:	6031      	str	r1, [r6, #0]
 800605c:	e7e1      	b.n	8006022 <__d2b+0x72>
 800605e:	bf00      	nop
 8006060:	0800734d 	.word	0x0800734d
 8006064:	080073dc 	.word	0x080073dc

08006068 <__ratio>:
 8006068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	4688      	mov	r8, r1
 800606e:	4669      	mov	r1, sp
 8006070:	4681      	mov	r9, r0
 8006072:	f7ff ff49 	bl	8005f08 <__b2d>
 8006076:	460f      	mov	r7, r1
 8006078:	4604      	mov	r4, r0
 800607a:	460d      	mov	r5, r1
 800607c:	4640      	mov	r0, r8
 800607e:	a901      	add	r1, sp, #4
 8006080:	f7ff ff42 	bl	8005f08 <__b2d>
 8006084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006088:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800608c:	468b      	mov	fp, r1
 800608e:	eba3 0c02 	sub.w	ip, r3, r2
 8006092:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfd5      	itete	le
 80060a0:	460a      	movle	r2, r1
 80060a2:	462a      	movgt	r2, r5
 80060a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80060a8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80060ac:	bfd8      	it	le
 80060ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80060b2:	465b      	mov	r3, fp
 80060b4:	4602      	mov	r2, r0
 80060b6:	4639      	mov	r1, r7
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7fa fbeb 	bl	8000894 <__aeabi_ddiv>
 80060be:	b003      	add	sp, #12
 80060c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060c4 <__copybits>:
 80060c4:	3901      	subs	r1, #1
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	1149      	asrs	r1, r1, #5
 80060ca:	6914      	ldr	r4, [r2, #16]
 80060cc:	3101      	adds	r1, #1
 80060ce:	f102 0314 	add.w	r3, r2, #20
 80060d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80060da:	1f05      	subs	r5, r0, #4
 80060dc:	42a3      	cmp	r3, r4
 80060de:	d30c      	bcc.n	80060fa <__copybits+0x36>
 80060e0:	1aa3      	subs	r3, r4, r2
 80060e2:	3b11      	subs	r3, #17
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	3211      	adds	r2, #17
 80060ea:	42a2      	cmp	r2, r4
 80060ec:	bf88      	it	hi
 80060ee:	2300      	movhi	r3, #0
 80060f0:	4418      	add	r0, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	4288      	cmp	r0, r1
 80060f6:	d305      	bcc.n	8006104 <__copybits+0x40>
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
 80060fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80060fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8006102:	e7eb      	b.n	80060dc <__copybits+0x18>
 8006104:	f840 3b04 	str.w	r3, [r0], #4
 8006108:	e7f4      	b.n	80060f4 <__copybits+0x30>

0800610a <__any_on>:
 800610a:	f100 0214 	add.w	r2, r0, #20
 800610e:	6900      	ldr	r0, [r0, #16]
 8006110:	114b      	asrs	r3, r1, #5
 8006112:	4298      	cmp	r0, r3
 8006114:	b510      	push	{r4, lr}
 8006116:	db11      	blt.n	800613c <__any_on+0x32>
 8006118:	dd0a      	ble.n	8006130 <__any_on+0x26>
 800611a:	f011 011f 	ands.w	r1, r1, #31
 800611e:	d007      	beq.n	8006130 <__any_on+0x26>
 8006120:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006124:	fa24 f001 	lsr.w	r0, r4, r1
 8006128:	fa00 f101 	lsl.w	r1, r0, r1
 800612c:	428c      	cmp	r4, r1
 800612e:	d10b      	bne.n	8006148 <__any_on+0x3e>
 8006130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006134:	4293      	cmp	r3, r2
 8006136:	d803      	bhi.n	8006140 <__any_on+0x36>
 8006138:	2000      	movs	r0, #0
 800613a:	bd10      	pop	{r4, pc}
 800613c:	4603      	mov	r3, r0
 800613e:	e7f7      	b.n	8006130 <__any_on+0x26>
 8006140:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006144:	2900      	cmp	r1, #0
 8006146:	d0f5      	beq.n	8006134 <__any_on+0x2a>
 8006148:	2001      	movs	r0, #1
 800614a:	e7f6      	b.n	800613a <__any_on+0x30>

0800614c <_calloc_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	fb02 f501 	mul.w	r5, r2, r1
 8006152:	4629      	mov	r1, r5
 8006154:	f000 f854 	bl	8006200 <_malloc_r>
 8006158:	4604      	mov	r4, r0
 800615a:	b118      	cbz	r0, 8006164 <_calloc_r+0x18>
 800615c:	462a      	mov	r2, r5
 800615e:	2100      	movs	r1, #0
 8006160:	f7fe f868 	bl	8004234 <memset>
 8006164:	4620      	mov	r0, r4
 8006166:	bd38      	pop	{r3, r4, r5, pc}

08006168 <_free_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4605      	mov	r5, r0
 800616c:	2900      	cmp	r1, #0
 800616e:	d043      	beq.n	80061f8 <_free_r+0x90>
 8006170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006174:	1f0c      	subs	r4, r1, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfb8      	it	lt
 800617a:	18e4      	addlt	r4, r4, r3
 800617c:	f000 feb2 	bl	8006ee4 <__malloc_lock>
 8006180:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <_free_r+0x94>)
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	4610      	mov	r0, r2
 8006186:	b933      	cbnz	r3, 8006196 <_free_r+0x2e>
 8006188:	6063      	str	r3, [r4, #4]
 800618a:	6014      	str	r4, [r2, #0]
 800618c:	4628      	mov	r0, r5
 800618e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006192:	f000 bead 	b.w	8006ef0 <__malloc_unlock>
 8006196:	42a3      	cmp	r3, r4
 8006198:	d90a      	bls.n	80061b0 <_free_r+0x48>
 800619a:	6821      	ldr	r1, [r4, #0]
 800619c:	1862      	adds	r2, r4, r1
 800619e:	4293      	cmp	r3, r2
 80061a0:	bf01      	itttt	eq
 80061a2:	681a      	ldreq	r2, [r3, #0]
 80061a4:	685b      	ldreq	r3, [r3, #4]
 80061a6:	1852      	addeq	r2, r2, r1
 80061a8:	6022      	streq	r2, [r4, #0]
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6004      	str	r4, [r0, #0]
 80061ae:	e7ed      	b.n	800618c <_free_r+0x24>
 80061b0:	461a      	mov	r2, r3
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b10b      	cbz	r3, 80061ba <_free_r+0x52>
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	d9fa      	bls.n	80061b0 <_free_r+0x48>
 80061ba:	6811      	ldr	r1, [r2, #0]
 80061bc:	1850      	adds	r0, r2, r1
 80061be:	42a0      	cmp	r0, r4
 80061c0:	d10b      	bne.n	80061da <_free_r+0x72>
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	4401      	add	r1, r0
 80061c6:	1850      	adds	r0, r2, r1
 80061c8:	4283      	cmp	r3, r0
 80061ca:	6011      	str	r1, [r2, #0]
 80061cc:	d1de      	bne.n	800618c <_free_r+0x24>
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4401      	add	r1, r0
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	6053      	str	r3, [r2, #4]
 80061d8:	e7d8      	b.n	800618c <_free_r+0x24>
 80061da:	d902      	bls.n	80061e2 <_free_r+0x7a>
 80061dc:	230c      	movs	r3, #12
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	e7d4      	b.n	800618c <_free_r+0x24>
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	1821      	adds	r1, r4, r0
 80061e6:	428b      	cmp	r3, r1
 80061e8:	bf01      	itttt	eq
 80061ea:	6819      	ldreq	r1, [r3, #0]
 80061ec:	685b      	ldreq	r3, [r3, #4]
 80061ee:	1809      	addeq	r1, r1, r0
 80061f0:	6021      	streq	r1, [r4, #0]
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	6054      	str	r4, [r2, #4]
 80061f6:	e7c9      	b.n	800618c <_free_r+0x24>
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop
 80061fc:	20000234 	.word	0x20000234

08006200 <_malloc_r>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	1ccd      	adds	r5, r1, #3
 8006204:	f025 0503 	bic.w	r5, r5, #3
 8006208:	3508      	adds	r5, #8
 800620a:	2d0c      	cmp	r5, #12
 800620c:	bf38      	it	cc
 800620e:	250c      	movcc	r5, #12
 8006210:	2d00      	cmp	r5, #0
 8006212:	4606      	mov	r6, r0
 8006214:	db01      	blt.n	800621a <_malloc_r+0x1a>
 8006216:	42a9      	cmp	r1, r5
 8006218:	d903      	bls.n	8006222 <_malloc_r+0x22>
 800621a:	230c      	movs	r3, #12
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	2000      	movs	r0, #0
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006222:	f000 fe5f 	bl	8006ee4 <__malloc_lock>
 8006226:	4921      	ldr	r1, [pc, #132]	; (80062ac <_malloc_r+0xac>)
 8006228:	680a      	ldr	r2, [r1, #0]
 800622a:	4614      	mov	r4, r2
 800622c:	b99c      	cbnz	r4, 8006256 <_malloc_r+0x56>
 800622e:	4f20      	ldr	r7, [pc, #128]	; (80062b0 <_malloc_r+0xb0>)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	b923      	cbnz	r3, 800623e <_malloc_r+0x3e>
 8006234:	4621      	mov	r1, r4
 8006236:	4630      	mov	r0, r6
 8006238:	f000 fb30 	bl	800689c <_sbrk_r>
 800623c:	6038      	str	r0, [r7, #0]
 800623e:	4629      	mov	r1, r5
 8006240:	4630      	mov	r0, r6
 8006242:	f000 fb2b 	bl	800689c <_sbrk_r>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	d123      	bne.n	8006292 <_malloc_r+0x92>
 800624a:	230c      	movs	r3, #12
 800624c:	4630      	mov	r0, r6
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f000 fe4e 	bl	8006ef0 <__malloc_unlock>
 8006254:	e7e3      	b.n	800621e <_malloc_r+0x1e>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	1b5b      	subs	r3, r3, r5
 800625a:	d417      	bmi.n	800628c <_malloc_r+0x8c>
 800625c:	2b0b      	cmp	r3, #11
 800625e:	d903      	bls.n	8006268 <_malloc_r+0x68>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	441c      	add	r4, r3
 8006264:	6025      	str	r5, [r4, #0]
 8006266:	e004      	b.n	8006272 <_malloc_r+0x72>
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	42a2      	cmp	r2, r4
 800626c:	bf0c      	ite	eq
 800626e:	600b      	streq	r3, [r1, #0]
 8006270:	6053      	strne	r3, [r2, #4]
 8006272:	4630      	mov	r0, r6
 8006274:	f000 fe3c 	bl	8006ef0 <__malloc_unlock>
 8006278:	f104 000b 	add.w	r0, r4, #11
 800627c:	1d23      	adds	r3, r4, #4
 800627e:	f020 0007 	bic.w	r0, r0, #7
 8006282:	1ac2      	subs	r2, r0, r3
 8006284:	d0cc      	beq.n	8006220 <_malloc_r+0x20>
 8006286:	1a1b      	subs	r3, r3, r0
 8006288:	50a3      	str	r3, [r4, r2]
 800628a:	e7c9      	b.n	8006220 <_malloc_r+0x20>
 800628c:	4622      	mov	r2, r4
 800628e:	6864      	ldr	r4, [r4, #4]
 8006290:	e7cc      	b.n	800622c <_malloc_r+0x2c>
 8006292:	1cc4      	adds	r4, r0, #3
 8006294:	f024 0403 	bic.w	r4, r4, #3
 8006298:	42a0      	cmp	r0, r4
 800629a:	d0e3      	beq.n	8006264 <_malloc_r+0x64>
 800629c:	1a21      	subs	r1, r4, r0
 800629e:	4630      	mov	r0, r6
 80062a0:	f000 fafc 	bl	800689c <_sbrk_r>
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1dd      	bne.n	8006264 <_malloc_r+0x64>
 80062a8:	e7cf      	b.n	800624a <_malloc_r+0x4a>
 80062aa:	bf00      	nop
 80062ac:	20000234 	.word	0x20000234
 80062b0:	20000238 	.word	0x20000238

080062b4 <__sfputc_r>:
 80062b4:	6893      	ldr	r3, [r2, #8]
 80062b6:	b410      	push	{r4}
 80062b8:	3b01      	subs	r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	6093      	str	r3, [r2, #8]
 80062be:	da07      	bge.n	80062d0 <__sfputc_r+0x1c>
 80062c0:	6994      	ldr	r4, [r2, #24]
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	db01      	blt.n	80062ca <__sfputc_r+0x16>
 80062c6:	290a      	cmp	r1, #10
 80062c8:	d102      	bne.n	80062d0 <__sfputc_r+0x1c>
 80062ca:	bc10      	pop	{r4}
 80062cc:	f000 bb08 	b.w	80068e0 <__swbuf_r>
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	1c58      	adds	r0, r3, #1
 80062d4:	6010      	str	r0, [r2, #0]
 80062d6:	7019      	strb	r1, [r3, #0]
 80062d8:	4608      	mov	r0, r1
 80062da:	bc10      	pop	{r4}
 80062dc:	4770      	bx	lr

080062de <__sfputs_r>:
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	4606      	mov	r6, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	18d5      	adds	r5, r2, r3
 80062e8:	42ac      	cmp	r4, r5
 80062ea:	d101      	bne.n	80062f0 <__sfputs_r+0x12>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e007      	b.n	8006300 <__sfputs_r+0x22>
 80062f0:	463a      	mov	r2, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	f7ff ffdc 	bl	80062b4 <__sfputc_r>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1f3      	bne.n	80062e8 <__sfputs_r+0xa>
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006304 <_vfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	4614      	mov	r4, r2
 800630c:	4698      	mov	r8, r3
 800630e:	4606      	mov	r6, r0
 8006310:	b09d      	sub	sp, #116	; 0x74
 8006312:	b118      	cbz	r0, 800631c <_vfiprintf_r+0x18>
 8006314:	6983      	ldr	r3, [r0, #24]
 8006316:	b90b      	cbnz	r3, 800631c <_vfiprintf_r+0x18>
 8006318:	f000 fcd2 	bl	8006cc0 <__sinit>
 800631c:	4b89      	ldr	r3, [pc, #548]	; (8006544 <_vfiprintf_r+0x240>)
 800631e:	429d      	cmp	r5, r3
 8006320:	d11b      	bne.n	800635a <_vfiprintf_r+0x56>
 8006322:	6875      	ldr	r5, [r6, #4]
 8006324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006326:	07d9      	lsls	r1, r3, #31
 8006328:	d405      	bmi.n	8006336 <_vfiprintf_r+0x32>
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	059a      	lsls	r2, r3, #22
 800632e:	d402      	bmi.n	8006336 <_vfiprintf_r+0x32>
 8006330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006332:	f000 fd63 	bl	8006dfc <__retarget_lock_acquire_recursive>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	071b      	lsls	r3, r3, #28
 800633a:	d501      	bpl.n	8006340 <_vfiprintf_r+0x3c>
 800633c:	692b      	ldr	r3, [r5, #16]
 800633e:	b9eb      	cbnz	r3, 800637c <_vfiprintf_r+0x78>
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f000 fb2c 	bl	80069a0 <__swsetup_r>
 8006348:	b1c0      	cbz	r0, 800637c <_vfiprintf_r+0x78>
 800634a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634c:	07dc      	lsls	r4, r3, #31
 800634e:	d50e      	bpl.n	800636e <_vfiprintf_r+0x6a>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006354:	b01d      	add	sp, #116	; 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	4b7b      	ldr	r3, [pc, #492]	; (8006548 <_vfiprintf_r+0x244>)
 800635c:	429d      	cmp	r5, r3
 800635e:	d101      	bne.n	8006364 <_vfiprintf_r+0x60>
 8006360:	68b5      	ldr	r5, [r6, #8]
 8006362:	e7df      	b.n	8006324 <_vfiprintf_r+0x20>
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <_vfiprintf_r+0x248>)
 8006366:	429d      	cmp	r5, r3
 8006368:	bf08      	it	eq
 800636a:	68f5      	ldreq	r5, [r6, #12]
 800636c:	e7da      	b.n	8006324 <_vfiprintf_r+0x20>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	0598      	lsls	r0, r3, #22
 8006372:	d4ed      	bmi.n	8006350 <_vfiprintf_r+0x4c>
 8006374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006376:	f000 fd42 	bl	8006dfe <__retarget_lock_release_recursive>
 800637a:	e7e9      	b.n	8006350 <_vfiprintf_r+0x4c>
 800637c:	2300      	movs	r3, #0
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	2320      	movs	r3, #32
 8006382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006386:	2330      	movs	r3, #48	; 0x30
 8006388:	f04f 0901 	mov.w	r9, #1
 800638c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006390:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006550 <_vfiprintf_r+0x24c>
 8006394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006398:	4623      	mov	r3, r4
 800639a:	469a      	mov	sl, r3
 800639c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a0:	b10a      	cbz	r2, 80063a6 <_vfiprintf_r+0xa2>
 80063a2:	2a25      	cmp	r2, #37	; 0x25
 80063a4:	d1f9      	bne.n	800639a <_vfiprintf_r+0x96>
 80063a6:	ebba 0b04 	subs.w	fp, sl, r4
 80063aa:	d00b      	beq.n	80063c4 <_vfiprintf_r+0xc0>
 80063ac:	465b      	mov	r3, fp
 80063ae:	4622      	mov	r2, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff ff93 	bl	80062de <__sfputs_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	f000 80aa 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c0:	445a      	add	r2, fp
 80063c2:	9209      	str	r2, [sp, #36]	; 0x24
 80063c4:	f89a 3000 	ldrb.w	r3, [sl]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80a2 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d8:	f10a 0a01 	add.w	sl, sl, #1
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	9307      	str	r3, [sp, #28]
 80063e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063e4:	931a      	str	r3, [sp, #104]	; 0x68
 80063e6:	4654      	mov	r4, sl
 80063e8:	2205      	movs	r2, #5
 80063ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ee:	4858      	ldr	r0, [pc, #352]	; (8006550 <_vfiprintf_r+0x24c>)
 80063f0:	f000 fd6a 	bl	8006ec8 <memchr>
 80063f4:	9a04      	ldr	r2, [sp, #16]
 80063f6:	b9d8      	cbnz	r0, 8006430 <_vfiprintf_r+0x12c>
 80063f8:	06d1      	lsls	r1, r2, #27
 80063fa:	bf44      	itt	mi
 80063fc:	2320      	movmi	r3, #32
 80063fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006402:	0713      	lsls	r3, r2, #28
 8006404:	bf44      	itt	mi
 8006406:	232b      	movmi	r3, #43	; 0x2b
 8006408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640c:	f89a 3000 	ldrb.w	r3, [sl]
 8006410:	2b2a      	cmp	r3, #42	; 0x2a
 8006412:	d015      	beq.n	8006440 <_vfiprintf_r+0x13c>
 8006414:	4654      	mov	r4, sl
 8006416:	2000      	movs	r0, #0
 8006418:	f04f 0c0a 	mov.w	ip, #10
 800641c:	9a07      	ldr	r2, [sp, #28]
 800641e:	4621      	mov	r1, r4
 8006420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006424:	3b30      	subs	r3, #48	; 0x30
 8006426:	2b09      	cmp	r3, #9
 8006428:	d94e      	bls.n	80064c8 <_vfiprintf_r+0x1c4>
 800642a:	b1b0      	cbz	r0, 800645a <_vfiprintf_r+0x156>
 800642c:	9207      	str	r2, [sp, #28]
 800642e:	e014      	b.n	800645a <_vfiprintf_r+0x156>
 8006430:	eba0 0308 	sub.w	r3, r0, r8
 8006434:	fa09 f303 	lsl.w	r3, r9, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	46a2      	mov	sl, r4
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	e7d2      	b.n	80063e6 <_vfiprintf_r+0xe2>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	1d19      	adds	r1, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	9103      	str	r1, [sp, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	bfbb      	ittet	lt
 800644c:	425b      	neglt	r3, r3
 800644e:	f042 0202 	orrlt.w	r2, r2, #2
 8006452:	9307      	strge	r3, [sp, #28]
 8006454:	9307      	strlt	r3, [sp, #28]
 8006456:	bfb8      	it	lt
 8006458:	9204      	strlt	r2, [sp, #16]
 800645a:	7823      	ldrb	r3, [r4, #0]
 800645c:	2b2e      	cmp	r3, #46	; 0x2e
 800645e:	d10c      	bne.n	800647a <_vfiprintf_r+0x176>
 8006460:	7863      	ldrb	r3, [r4, #1]
 8006462:	2b2a      	cmp	r3, #42	; 0x2a
 8006464:	d135      	bne.n	80064d2 <_vfiprintf_r+0x1ce>
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	3402      	adds	r4, #2
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9203      	str	r2, [sp, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfb8      	it	lt
 8006474:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006560 <_vfiprintf_r+0x25c>
 800647e:	2203      	movs	r2, #3
 8006480:	4650      	mov	r0, sl
 8006482:	7821      	ldrb	r1, [r4, #0]
 8006484:	f000 fd20 	bl	8006ec8 <memchr>
 8006488:	b140      	cbz	r0, 800649c <_vfiprintf_r+0x198>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	eba0 000a 	sub.w	r0, r0, sl
 8006490:	fa03 f000 	lsl.w	r0, r3, r0
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	3401      	adds	r4, #1
 8006498:	4303      	orrs	r3, r0
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	2206      	movs	r2, #6
 80064a2:	482c      	ldr	r0, [pc, #176]	; (8006554 <_vfiprintf_r+0x250>)
 80064a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a8:	f000 fd0e 	bl	8006ec8 <memchr>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d03f      	beq.n	8006530 <_vfiprintf_r+0x22c>
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <_vfiprintf_r+0x254>)
 80064b2:	bb1b      	cbnz	r3, 80064fc <_vfiprintf_r+0x1f8>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	3307      	adds	r3, #7
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	3308      	adds	r3, #8
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	443b      	add	r3, r7
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	e767      	b.n	8006398 <_vfiprintf_r+0x94>
 80064c8:	460c      	mov	r4, r1
 80064ca:	2001      	movs	r0, #1
 80064cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80064d0:	e7a5      	b.n	800641e <_vfiprintf_r+0x11a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f04f 0c0a 	mov.w	ip, #10
 80064d8:	4619      	mov	r1, r3
 80064da:	3401      	adds	r4, #1
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	4620      	mov	r0, r4
 80064e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e4:	3a30      	subs	r2, #48	; 0x30
 80064e6:	2a09      	cmp	r2, #9
 80064e8:	d903      	bls.n	80064f2 <_vfiprintf_r+0x1ee>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c5      	beq.n	800647a <_vfiprintf_r+0x176>
 80064ee:	9105      	str	r1, [sp, #20]
 80064f0:	e7c3      	b.n	800647a <_vfiprintf_r+0x176>
 80064f2:	4604      	mov	r4, r0
 80064f4:	2301      	movs	r3, #1
 80064f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064fa:	e7f0      	b.n	80064de <_vfiprintf_r+0x1da>
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	462a      	mov	r2, r5
 8006502:	4630      	mov	r0, r6
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <_vfiprintf_r+0x258>)
 8006506:	a904      	add	r1, sp, #16
 8006508:	f3af 8000 	nop.w
 800650c:	4607      	mov	r7, r0
 800650e:	1c78      	adds	r0, r7, #1
 8006510:	d1d6      	bne.n	80064c0 <_vfiprintf_r+0x1bc>
 8006512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006514:	07d9      	lsls	r1, r3, #31
 8006516:	d405      	bmi.n	8006524 <_vfiprintf_r+0x220>
 8006518:	89ab      	ldrh	r3, [r5, #12]
 800651a:	059a      	lsls	r2, r3, #22
 800651c:	d402      	bmi.n	8006524 <_vfiprintf_r+0x220>
 800651e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006520:	f000 fc6d 	bl	8006dfe <__retarget_lock_release_recursive>
 8006524:	89ab      	ldrh	r3, [r5, #12]
 8006526:	065b      	lsls	r3, r3, #25
 8006528:	f53f af12 	bmi.w	8006350 <_vfiprintf_r+0x4c>
 800652c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652e:	e711      	b.n	8006354 <_vfiprintf_r+0x50>
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	462a      	mov	r2, r5
 8006536:	4630      	mov	r0, r6
 8006538:	4b08      	ldr	r3, [pc, #32]	; (800655c <_vfiprintf_r+0x258>)
 800653a:	a904      	add	r1, sp, #16
 800653c:	f000 f882 	bl	8006644 <_printf_i>
 8006540:	e7e4      	b.n	800650c <_vfiprintf_r+0x208>
 8006542:	bf00      	nop
 8006544:	08007590 	.word	0x08007590
 8006548:	080075b0 	.word	0x080075b0
 800654c:	08007570 	.word	0x08007570
 8006550:	0800753c 	.word	0x0800753c
 8006554:	08007546 	.word	0x08007546
 8006558:	00000000 	.word	0x00000000
 800655c:	080062df 	.word	0x080062df
 8006560:	08007542 	.word	0x08007542

08006564 <_printf_common>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	4616      	mov	r6, r2
 800656a:	4699      	mov	r9, r3
 800656c:	688a      	ldr	r2, [r1, #8]
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	4607      	mov	r7, r0
 8006572:	4293      	cmp	r3, r2
 8006574:	bfb8      	it	lt
 8006576:	4613      	movlt	r3, r2
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800657e:	460c      	mov	r4, r1
 8006580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006584:	b10a      	cbz	r2, 800658a <_printf_common+0x26>
 8006586:	3301      	adds	r3, #1
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	0699      	lsls	r1, r3, #26
 800658e:	bf42      	ittt	mi
 8006590:	6833      	ldrmi	r3, [r6, #0]
 8006592:	3302      	addmi	r3, #2
 8006594:	6033      	strmi	r3, [r6, #0]
 8006596:	6825      	ldr	r5, [r4, #0]
 8006598:	f015 0506 	ands.w	r5, r5, #6
 800659c:	d106      	bne.n	80065ac <_printf_common+0x48>
 800659e:	f104 0a19 	add.w	sl, r4, #25
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	6832      	ldr	r2, [r6, #0]
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc28      	bgt.n	80065fe <_printf_common+0x9a>
 80065ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065b0:	1e13      	subs	r3, r2, #0
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	bf18      	it	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	0692      	lsls	r2, r2, #26
 80065ba:	d42d      	bmi.n	8006618 <_printf_common+0xb4>
 80065bc:	4649      	mov	r1, r9
 80065be:	4638      	mov	r0, r7
 80065c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d020      	beq.n	800660c <_printf_common+0xa8>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	68e5      	ldr	r5, [r4, #12]
 80065ce:	f003 0306 	and.w	r3, r3, #6
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	bf18      	it	ne
 80065d6:	2500      	movne	r5, #0
 80065d8:	6832      	ldr	r2, [r6, #0]
 80065da:	f04f 0600 	mov.w	r6, #0
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	bf08      	it	eq
 80065e2:	1aad      	subeq	r5, r5, r2
 80065e4:	6922      	ldr	r2, [r4, #16]
 80065e6:	bf08      	it	eq
 80065e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bfc4      	itt	gt
 80065f0:	1a9b      	subgt	r3, r3, r2
 80065f2:	18ed      	addgt	r5, r5, r3
 80065f4:	341a      	adds	r4, #26
 80065f6:	42b5      	cmp	r5, r6
 80065f8:	d11a      	bne.n	8006630 <_printf_common+0xcc>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e008      	b.n	8006610 <_printf_common+0xac>
 80065fe:	2301      	movs	r3, #1
 8006600:	4652      	mov	r2, sl
 8006602:	4649      	mov	r1, r9
 8006604:	4638      	mov	r0, r7
 8006606:	47c0      	blx	r8
 8006608:	3001      	adds	r0, #1
 800660a:	d103      	bne.n	8006614 <_printf_common+0xb0>
 800660c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	3501      	adds	r5, #1
 8006616:	e7c4      	b.n	80065a2 <_printf_common+0x3e>
 8006618:	2030      	movs	r0, #48	; 0x30
 800661a:	18e1      	adds	r1, r4, r3
 800661c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006626:	4422      	add	r2, r4
 8006628:	3302      	adds	r3, #2
 800662a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800662e:	e7c5      	b.n	80065bc <_printf_common+0x58>
 8006630:	2301      	movs	r3, #1
 8006632:	4622      	mov	r2, r4
 8006634:	4649      	mov	r1, r9
 8006636:	4638      	mov	r0, r7
 8006638:	47c0      	blx	r8
 800663a:	3001      	adds	r0, #1
 800663c:	d0e6      	beq.n	800660c <_printf_common+0xa8>
 800663e:	3601      	adds	r6, #1
 8006640:	e7d9      	b.n	80065f6 <_printf_common+0x92>
	...

08006644 <_printf_i>:
 8006644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	460c      	mov	r4, r1
 800664a:	7e27      	ldrb	r7, [r4, #24]
 800664c:	4691      	mov	r9, r2
 800664e:	2f78      	cmp	r7, #120	; 0x78
 8006650:	4680      	mov	r8, r0
 8006652:	469a      	mov	sl, r3
 8006654:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800665a:	d807      	bhi.n	800666c <_printf_i+0x28>
 800665c:	2f62      	cmp	r7, #98	; 0x62
 800665e:	d80a      	bhi.n	8006676 <_printf_i+0x32>
 8006660:	2f00      	cmp	r7, #0
 8006662:	f000 80d9 	beq.w	8006818 <_printf_i+0x1d4>
 8006666:	2f58      	cmp	r7, #88	; 0x58
 8006668:	f000 80a4 	beq.w	80067b4 <_printf_i+0x170>
 800666c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006674:	e03a      	b.n	80066ec <_printf_i+0xa8>
 8006676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800667a:	2b15      	cmp	r3, #21
 800667c:	d8f6      	bhi.n	800666c <_printf_i+0x28>
 800667e:	a001      	add	r0, pc, #4	; (adr r0, 8006684 <_printf_i+0x40>)
 8006680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066f1 	.word	0x080066f1
 800668c:	0800666d 	.word	0x0800666d
 8006690:	0800666d 	.word	0x0800666d
 8006694:	0800666d 	.word	0x0800666d
 8006698:	0800666d 	.word	0x0800666d
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	0800666d 	.word	0x0800666d
 80066a4:	0800666d 	.word	0x0800666d
 80066a8:	0800666d 	.word	0x0800666d
 80066ac:	0800666d 	.word	0x0800666d
 80066b0:	080067ff 	.word	0x080067ff
 80066b4:	08006721 	.word	0x08006721
 80066b8:	080067e1 	.word	0x080067e1
 80066bc:	0800666d 	.word	0x0800666d
 80066c0:	0800666d 	.word	0x0800666d
 80066c4:	08006821 	.word	0x08006821
 80066c8:	0800666d 	.word	0x0800666d
 80066cc:	08006721 	.word	0x08006721
 80066d0:	0800666d 	.word	0x0800666d
 80066d4:	0800666d 	.word	0x0800666d
 80066d8:	080067e9 	.word	0x080067e9
 80066dc:	680b      	ldr	r3, [r1, #0]
 80066de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066e2:	1d1a      	adds	r2, r3, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	600a      	str	r2, [r1, #0]
 80066e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0a4      	b.n	800683a <_printf_i+0x1f6>
 80066f0:	6825      	ldr	r5, [r4, #0]
 80066f2:	6808      	ldr	r0, [r1, #0]
 80066f4:	062e      	lsls	r6, r5, #24
 80066f6:	f100 0304 	add.w	r3, r0, #4
 80066fa:	d50a      	bpl.n	8006712 <_printf_i+0xce>
 80066fc:	6805      	ldr	r5, [r0, #0]
 80066fe:	600b      	str	r3, [r1, #0]
 8006700:	2d00      	cmp	r5, #0
 8006702:	da03      	bge.n	800670c <_printf_i+0xc8>
 8006704:	232d      	movs	r3, #45	; 0x2d
 8006706:	426d      	negs	r5, r5
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	230a      	movs	r3, #10
 800670e:	485e      	ldr	r0, [pc, #376]	; (8006888 <_printf_i+0x244>)
 8006710:	e019      	b.n	8006746 <_printf_i+0x102>
 8006712:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006716:	6805      	ldr	r5, [r0, #0]
 8006718:	600b      	str	r3, [r1, #0]
 800671a:	bf18      	it	ne
 800671c:	b22d      	sxthne	r5, r5
 800671e:	e7ef      	b.n	8006700 <_printf_i+0xbc>
 8006720:	680b      	ldr	r3, [r1, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	1d18      	adds	r0, r3, #4
 8006726:	6008      	str	r0, [r1, #0]
 8006728:	0628      	lsls	r0, r5, #24
 800672a:	d501      	bpl.n	8006730 <_printf_i+0xec>
 800672c:	681d      	ldr	r5, [r3, #0]
 800672e:	e002      	b.n	8006736 <_printf_i+0xf2>
 8006730:	0669      	lsls	r1, r5, #25
 8006732:	d5fb      	bpl.n	800672c <_printf_i+0xe8>
 8006734:	881d      	ldrh	r5, [r3, #0]
 8006736:	2f6f      	cmp	r7, #111	; 0x6f
 8006738:	bf0c      	ite	eq
 800673a:	2308      	moveq	r3, #8
 800673c:	230a      	movne	r3, #10
 800673e:	4852      	ldr	r0, [pc, #328]	; (8006888 <_printf_i+0x244>)
 8006740:	2100      	movs	r1, #0
 8006742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006746:	6866      	ldr	r6, [r4, #4]
 8006748:	2e00      	cmp	r6, #0
 800674a:	bfa8      	it	ge
 800674c:	6821      	ldrge	r1, [r4, #0]
 800674e:	60a6      	str	r6, [r4, #8]
 8006750:	bfa4      	itt	ge
 8006752:	f021 0104 	bicge.w	r1, r1, #4
 8006756:	6021      	strge	r1, [r4, #0]
 8006758:	b90d      	cbnz	r5, 800675e <_printf_i+0x11a>
 800675a:	2e00      	cmp	r6, #0
 800675c:	d04d      	beq.n	80067fa <_printf_i+0x1b6>
 800675e:	4616      	mov	r6, r2
 8006760:	fbb5 f1f3 	udiv	r1, r5, r3
 8006764:	fb03 5711 	mls	r7, r3, r1, r5
 8006768:	5dc7      	ldrb	r7, [r0, r7]
 800676a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800676e:	462f      	mov	r7, r5
 8006770:	42bb      	cmp	r3, r7
 8006772:	460d      	mov	r5, r1
 8006774:	d9f4      	bls.n	8006760 <_printf_i+0x11c>
 8006776:	2b08      	cmp	r3, #8
 8006778:	d10b      	bne.n	8006792 <_printf_i+0x14e>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	07df      	lsls	r7, r3, #31
 800677e:	d508      	bpl.n	8006792 <_printf_i+0x14e>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	6861      	ldr	r1, [r4, #4]
 8006784:	4299      	cmp	r1, r3
 8006786:	bfde      	ittt	le
 8006788:	2330      	movle	r3, #48	; 0x30
 800678a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800678e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006792:	1b92      	subs	r2, r2, r6
 8006794:	6122      	str	r2, [r4, #16]
 8006796:	464b      	mov	r3, r9
 8006798:	4621      	mov	r1, r4
 800679a:	4640      	mov	r0, r8
 800679c:	f8cd a000 	str.w	sl, [sp]
 80067a0:	aa03      	add	r2, sp, #12
 80067a2:	f7ff fedf 	bl	8006564 <_printf_common>
 80067a6:	3001      	adds	r0, #1
 80067a8:	d14c      	bne.n	8006844 <_printf_i+0x200>
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067ae:	b004      	add	sp, #16
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	4834      	ldr	r0, [pc, #208]	; (8006888 <_printf_i+0x244>)
 80067b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067ba:	680e      	ldr	r6, [r1, #0]
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	f856 5b04 	ldr.w	r5, [r6], #4
 80067c2:	061f      	lsls	r7, r3, #24
 80067c4:	600e      	str	r6, [r1, #0]
 80067c6:	d514      	bpl.n	80067f2 <_printf_i+0x1ae>
 80067c8:	07d9      	lsls	r1, r3, #31
 80067ca:	bf44      	itt	mi
 80067cc:	f043 0320 	orrmi.w	r3, r3, #32
 80067d0:	6023      	strmi	r3, [r4, #0]
 80067d2:	b91d      	cbnz	r5, 80067dc <_printf_i+0x198>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	f023 0320 	bic.w	r3, r3, #32
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	2310      	movs	r3, #16
 80067de:	e7af      	b.n	8006740 <_printf_i+0xfc>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	2378      	movs	r3, #120	; 0x78
 80067ea:	4828      	ldr	r0, [pc, #160]	; (800688c <_printf_i+0x248>)
 80067ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067f0:	e7e3      	b.n	80067ba <_printf_i+0x176>
 80067f2:	065e      	lsls	r6, r3, #25
 80067f4:	bf48      	it	mi
 80067f6:	b2ad      	uxthmi	r5, r5
 80067f8:	e7e6      	b.n	80067c8 <_printf_i+0x184>
 80067fa:	4616      	mov	r6, r2
 80067fc:	e7bb      	b.n	8006776 <_printf_i+0x132>
 80067fe:	680b      	ldr	r3, [r1, #0]
 8006800:	6826      	ldr	r6, [r4, #0]
 8006802:	1d1d      	adds	r5, r3, #4
 8006804:	6960      	ldr	r0, [r4, #20]
 8006806:	600d      	str	r5, [r1, #0]
 8006808:	0635      	lsls	r5, r6, #24
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	d501      	bpl.n	8006812 <_printf_i+0x1ce>
 800680e:	6018      	str	r0, [r3, #0]
 8006810:	e002      	b.n	8006818 <_printf_i+0x1d4>
 8006812:	0671      	lsls	r1, r6, #25
 8006814:	d5fb      	bpl.n	800680e <_printf_i+0x1ca>
 8006816:	8018      	strh	r0, [r3, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	4616      	mov	r6, r2
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	e7ba      	b.n	8006796 <_printf_i+0x152>
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	600a      	str	r2, [r1, #0]
 8006826:	681e      	ldr	r6, [r3, #0]
 8006828:	2100      	movs	r1, #0
 800682a:	4630      	mov	r0, r6
 800682c:	6862      	ldr	r2, [r4, #4]
 800682e:	f000 fb4b 	bl	8006ec8 <memchr>
 8006832:	b108      	cbz	r0, 8006838 <_printf_i+0x1f4>
 8006834:	1b80      	subs	r0, r0, r6
 8006836:	6060      	str	r0, [r4, #4]
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	6123      	str	r3, [r4, #16]
 800683c:	2300      	movs	r3, #0
 800683e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006842:	e7a8      	b.n	8006796 <_printf_i+0x152>
 8006844:	4632      	mov	r2, r6
 8006846:	4649      	mov	r1, r9
 8006848:	4640      	mov	r0, r8
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	47d0      	blx	sl
 800684e:	3001      	adds	r0, #1
 8006850:	d0ab      	beq.n	80067aa <_printf_i+0x166>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	079b      	lsls	r3, r3, #30
 8006856:	d413      	bmi.n	8006880 <_printf_i+0x23c>
 8006858:	68e0      	ldr	r0, [r4, #12]
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	4298      	cmp	r0, r3
 800685e:	bfb8      	it	lt
 8006860:	4618      	movlt	r0, r3
 8006862:	e7a4      	b.n	80067ae <_printf_i+0x16a>
 8006864:	2301      	movs	r3, #1
 8006866:	4632      	mov	r2, r6
 8006868:	4649      	mov	r1, r9
 800686a:	4640      	mov	r0, r8
 800686c:	47d0      	blx	sl
 800686e:	3001      	adds	r0, #1
 8006870:	d09b      	beq.n	80067aa <_printf_i+0x166>
 8006872:	3501      	adds	r5, #1
 8006874:	68e3      	ldr	r3, [r4, #12]
 8006876:	9903      	ldr	r1, [sp, #12]
 8006878:	1a5b      	subs	r3, r3, r1
 800687a:	42ab      	cmp	r3, r5
 800687c:	dcf2      	bgt.n	8006864 <_printf_i+0x220>
 800687e:	e7eb      	b.n	8006858 <_printf_i+0x214>
 8006880:	2500      	movs	r5, #0
 8006882:	f104 0619 	add.w	r6, r4, #25
 8006886:	e7f5      	b.n	8006874 <_printf_i+0x230>
 8006888:	0800754d 	.word	0x0800754d
 800688c:	0800755e 	.word	0x0800755e

08006890 <nan>:
 8006890:	2000      	movs	r0, #0
 8006892:	4901      	ldr	r1, [pc, #4]	; (8006898 <nan+0x8>)
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	7ff80000 	.word	0x7ff80000

0800689c <_sbrk_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	2300      	movs	r3, #0
 80068a0:	4d05      	ldr	r5, [pc, #20]	; (80068b8 <_sbrk_r+0x1c>)
 80068a2:	4604      	mov	r4, r0
 80068a4:	4608      	mov	r0, r1
 80068a6:	602b      	str	r3, [r5, #0]
 80068a8:	f7fb f974 	bl	8001b94 <_sbrk>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_sbrk_r+0x1a>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_sbrk_r+0x1a>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000340 	.word	0x20000340

080068bc <strncmp>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	b16a      	cbz	r2, 80068dc <strncmp+0x20>
 80068c0:	3901      	subs	r1, #1
 80068c2:	1884      	adds	r4, r0, r2
 80068c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d103      	bne.n	80068d8 <strncmp+0x1c>
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d001      	beq.n	80068d8 <strncmp+0x1c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f5      	bne.n	80068c4 <strncmp+0x8>
 80068d8:	1a98      	subs	r0, r3, r2
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	4610      	mov	r0, r2
 80068de:	e7fc      	b.n	80068da <strncmp+0x1e>

080068e0 <__swbuf_r>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	460e      	mov	r6, r1
 80068e4:	4614      	mov	r4, r2
 80068e6:	4605      	mov	r5, r0
 80068e8:	b118      	cbz	r0, 80068f2 <__swbuf_r+0x12>
 80068ea:	6983      	ldr	r3, [r0, #24]
 80068ec:	b90b      	cbnz	r3, 80068f2 <__swbuf_r+0x12>
 80068ee:	f000 f9e7 	bl	8006cc0 <__sinit>
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <__swbuf_r+0x98>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d12b      	bne.n	8006950 <__swbuf_r+0x70>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	071a      	lsls	r2, r3, #28
 8006902:	d52f      	bpl.n	8006964 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b36b      	cbz	r3, 8006964 <__swbuf_r+0x84>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	1ac0      	subs	r0, r0, r3
 8006910:	6963      	ldr	r3, [r4, #20]
 8006912:	4637      	mov	r7, r6
 8006914:	4283      	cmp	r3, r0
 8006916:	dc04      	bgt.n	8006922 <__swbuf_r+0x42>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f93c 	bl	8006b98 <_fflush_r>
 8006920:	bb30      	cbnz	r0, 8006970 <__swbuf_r+0x90>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	3001      	adds	r0, #1
 8006926:	3b01      	subs	r3, #1
 8006928:	60a3      	str	r3, [r4, #8]
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	701e      	strb	r6, [r3, #0]
 8006932:	6963      	ldr	r3, [r4, #20]
 8006934:	4283      	cmp	r3, r0
 8006936:	d004      	beq.n	8006942 <__swbuf_r+0x62>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d506      	bpl.n	800694c <__swbuf_r+0x6c>
 800693e:	2e0a      	cmp	r6, #10
 8006940:	d104      	bne.n	800694c <__swbuf_r+0x6c>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f927 	bl	8006b98 <_fflush_r>
 800694a:	b988      	cbnz	r0, 8006970 <__swbuf_r+0x90>
 800694c:	4638      	mov	r0, r7
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <__swbuf_r+0x9c>)
 8006952:	429c      	cmp	r4, r3
 8006954:	d101      	bne.n	800695a <__swbuf_r+0x7a>
 8006956:	68ac      	ldr	r4, [r5, #8]
 8006958:	e7cf      	b.n	80068fa <__swbuf_r+0x1a>
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <__swbuf_r+0xa0>)
 800695c:	429c      	cmp	r4, r3
 800695e:	bf08      	it	eq
 8006960:	68ec      	ldreq	r4, [r5, #12]
 8006962:	e7ca      	b.n	80068fa <__swbuf_r+0x1a>
 8006964:	4621      	mov	r1, r4
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f81a 	bl	80069a0 <__swsetup_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	d0cb      	beq.n	8006908 <__swbuf_r+0x28>
 8006970:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006974:	e7ea      	b.n	800694c <__swbuf_r+0x6c>
 8006976:	bf00      	nop
 8006978:	08007590 	.word	0x08007590
 800697c:	080075b0 	.word	0x080075b0
 8006980:	08007570 	.word	0x08007570

08006984 <__ascii_wctomb>:
 8006984:	4603      	mov	r3, r0
 8006986:	4608      	mov	r0, r1
 8006988:	b141      	cbz	r1, 800699c <__ascii_wctomb+0x18>
 800698a:	2aff      	cmp	r2, #255	; 0xff
 800698c:	d904      	bls.n	8006998 <__ascii_wctomb+0x14>
 800698e:	228a      	movs	r2, #138	; 0x8a
 8006990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	4770      	bx	lr
 8006998:	2001      	movs	r0, #1
 800699a:	700a      	strb	r2, [r1, #0]
 800699c:	4770      	bx	lr
	...

080069a0 <__swsetup_r>:
 80069a0:	4b32      	ldr	r3, [pc, #200]	; (8006a6c <__swsetup_r+0xcc>)
 80069a2:	b570      	push	{r4, r5, r6, lr}
 80069a4:	681d      	ldr	r5, [r3, #0]
 80069a6:	4606      	mov	r6, r0
 80069a8:	460c      	mov	r4, r1
 80069aa:	b125      	cbz	r5, 80069b6 <__swsetup_r+0x16>
 80069ac:	69ab      	ldr	r3, [r5, #24]
 80069ae:	b913      	cbnz	r3, 80069b6 <__swsetup_r+0x16>
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f985 	bl	8006cc0 <__sinit>
 80069b6:	4b2e      	ldr	r3, [pc, #184]	; (8006a70 <__swsetup_r+0xd0>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d10f      	bne.n	80069dc <__swsetup_r+0x3c>
 80069bc:	686c      	ldr	r4, [r5, #4]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c4:	0719      	lsls	r1, r3, #28
 80069c6:	d42c      	bmi.n	8006a22 <__swsetup_r+0x82>
 80069c8:	06dd      	lsls	r5, r3, #27
 80069ca:	d411      	bmi.n	80069f0 <__swsetup_r+0x50>
 80069cc:	2309      	movs	r3, #9
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	e03e      	b.n	8006a5a <__swsetup_r+0xba>
 80069dc:	4b25      	ldr	r3, [pc, #148]	; (8006a74 <__swsetup_r+0xd4>)
 80069de:	429c      	cmp	r4, r3
 80069e0:	d101      	bne.n	80069e6 <__swsetup_r+0x46>
 80069e2:	68ac      	ldr	r4, [r5, #8]
 80069e4:	e7eb      	b.n	80069be <__swsetup_r+0x1e>
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <__swsetup_r+0xd8>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	bf08      	it	eq
 80069ec:	68ec      	ldreq	r4, [r5, #12]
 80069ee:	e7e6      	b.n	80069be <__swsetup_r+0x1e>
 80069f0:	0758      	lsls	r0, r3, #29
 80069f2:	d512      	bpl.n	8006a1a <__swsetup_r+0x7a>
 80069f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f6:	b141      	cbz	r1, 8006a0a <__swsetup_r+0x6a>
 80069f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069fc:	4299      	cmp	r1, r3
 80069fe:	d002      	beq.n	8006a06 <__swsetup_r+0x66>
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7ff fbb1 	bl	8006168 <_free_r>
 8006a06:	2300      	movs	r3, #0
 8006a08:	6363      	str	r3, [r4, #52]	; 0x34
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	2300      	movs	r3, #0
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f043 0308 	orr.w	r3, r3, #8
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	b94b      	cbnz	r3, 8006a3a <__swsetup_r+0x9a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d003      	beq.n	8006a3a <__swsetup_r+0x9a>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 fa07 	bl	8006e48 <__smakebuf_r>
 8006a3a:	89a0      	ldrh	r0, [r4, #12]
 8006a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a40:	f010 0301 	ands.w	r3, r0, #1
 8006a44:	d00a      	beq.n	8006a5c <__swsetup_r+0xbc>
 8006a46:	2300      	movs	r3, #0
 8006a48:	60a3      	str	r3, [r4, #8]
 8006a4a:	6963      	ldr	r3, [r4, #20]
 8006a4c:	425b      	negs	r3, r3
 8006a4e:	61a3      	str	r3, [r4, #24]
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	b943      	cbnz	r3, 8006a66 <__swsetup_r+0xc6>
 8006a54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a58:	d1ba      	bne.n	80069d0 <__swsetup_r+0x30>
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	0781      	lsls	r1, r0, #30
 8006a5e:	bf58      	it	pl
 8006a60:	6963      	ldrpl	r3, [r4, #20]
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	e7f4      	b.n	8006a50 <__swsetup_r+0xb0>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e7f7      	b.n	8006a5a <__swsetup_r+0xba>
 8006a6a:	bf00      	nop
 8006a6c:	2000000c 	.word	0x2000000c
 8006a70:	08007590 	.word	0x08007590
 8006a74:	080075b0 	.word	0x080075b0
 8006a78:	08007570 	.word	0x08007570

08006a7c <abort>:
 8006a7c:	2006      	movs	r0, #6
 8006a7e:	b508      	push	{r3, lr}
 8006a80:	f000 fa64 	bl	8006f4c <raise>
 8006a84:	2001      	movs	r0, #1
 8006a86:	f7fb f812 	bl	8001aae <_exit>
	...

08006a8c <__sflush_r>:
 8006a8c:	898a      	ldrh	r2, [r1, #12]
 8006a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	4605      	mov	r5, r0
 8006a94:	0710      	lsls	r0, r2, #28
 8006a96:	460c      	mov	r4, r1
 8006a98:	d458      	bmi.n	8006b4c <__sflush_r+0xc0>
 8006a9a:	684b      	ldr	r3, [r1, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc05      	bgt.n	8006aac <__sflush_r+0x20>
 8006aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dc02      	bgt.n	8006aac <__sflush_r+0x20>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	d0f9      	beq.n	8006aa6 <__sflush_r+0x1a>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab8:	682f      	ldr	r7, [r5, #0]
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	d032      	beq.n	8006b24 <__sflush_r+0x98>
 8006abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	075a      	lsls	r2, r3, #29
 8006ac4:	d505      	bpl.n	8006ad2 <__sflush_r+0x46>
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006acc:	b10b      	cbz	r3, 8006ad2 <__sflush_r+0x46>
 8006ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ad0:	1ac0      	subs	r0, r0, r3
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad8:	4628      	mov	r0, r5
 8006ada:	6a21      	ldr	r1, [r4, #32]
 8006adc:	47b0      	blx	r6
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	d106      	bne.n	8006af2 <__sflush_r+0x66>
 8006ae4:	6829      	ldr	r1, [r5, #0]
 8006ae6:	291d      	cmp	r1, #29
 8006ae8:	d82c      	bhi.n	8006b44 <__sflush_r+0xb8>
 8006aea:	4a2a      	ldr	r2, [pc, #168]	; (8006b94 <__sflush_r+0x108>)
 8006aec:	40ca      	lsrs	r2, r1
 8006aee:	07d6      	lsls	r6, r2, #31
 8006af0:	d528      	bpl.n	8006b44 <__sflush_r+0xb8>
 8006af2:	2200      	movs	r2, #0
 8006af4:	6062      	str	r2, [r4, #4]
 8006af6:	6922      	ldr	r2, [r4, #16]
 8006af8:	04d9      	lsls	r1, r3, #19
 8006afa:	6022      	str	r2, [r4, #0]
 8006afc:	d504      	bpl.n	8006b08 <__sflush_r+0x7c>
 8006afe:	1c42      	adds	r2, r0, #1
 8006b00:	d101      	bne.n	8006b06 <__sflush_r+0x7a>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	b903      	cbnz	r3, 8006b08 <__sflush_r+0x7c>
 8006b06:	6560      	str	r0, [r4, #84]	; 0x54
 8006b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b0a:	602f      	str	r7, [r5, #0]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d0ca      	beq.n	8006aa6 <__sflush_r+0x1a>
 8006b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b14:	4299      	cmp	r1, r3
 8006b16:	d002      	beq.n	8006b1e <__sflush_r+0x92>
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f7ff fb25 	bl	8006168 <_free_r>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	6360      	str	r0, [r4, #52]	; 0x34
 8006b22:	e7c1      	b.n	8006aa8 <__sflush_r+0x1c>
 8006b24:	6a21      	ldr	r1, [r4, #32]
 8006b26:	2301      	movs	r3, #1
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	1c41      	adds	r1, r0, #1
 8006b2e:	d1c7      	bne.n	8006ac0 <__sflush_r+0x34>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0c4      	beq.n	8006ac0 <__sflush_r+0x34>
 8006b36:	2b1d      	cmp	r3, #29
 8006b38:	d001      	beq.n	8006b3e <__sflush_r+0xb2>
 8006b3a:	2b16      	cmp	r3, #22
 8006b3c:	d101      	bne.n	8006b42 <__sflush_r+0xb6>
 8006b3e:	602f      	str	r7, [r5, #0]
 8006b40:	e7b1      	b.n	8006aa6 <__sflush_r+0x1a>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7ad      	b.n	8006aa8 <__sflush_r+0x1c>
 8006b4c:	690f      	ldr	r7, [r1, #16]
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	d0a9      	beq.n	8006aa6 <__sflush_r+0x1a>
 8006b52:	0793      	lsls	r3, r2, #30
 8006b54:	bf18      	it	ne
 8006b56:	2300      	movne	r3, #0
 8006b58:	680e      	ldr	r6, [r1, #0]
 8006b5a:	bf08      	it	eq
 8006b5c:	694b      	ldreq	r3, [r1, #20]
 8006b5e:	eba6 0807 	sub.w	r8, r6, r7
 8006b62:	600f      	str	r7, [r1, #0]
 8006b64:	608b      	str	r3, [r1, #8]
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	dd9c      	ble.n	8006aa6 <__sflush_r+0x1a>
 8006b6c:	4643      	mov	r3, r8
 8006b6e:	463a      	mov	r2, r7
 8006b70:	4628      	mov	r0, r5
 8006b72:	6a21      	ldr	r1, [r4, #32]
 8006b74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b76:	47b0      	blx	r6
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	dc06      	bgt.n	8006b8a <__sflush_r+0xfe>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	e78e      	b.n	8006aa8 <__sflush_r+0x1c>
 8006b8a:	4407      	add	r7, r0
 8006b8c:	eba8 0800 	sub.w	r8, r8, r0
 8006b90:	e7e9      	b.n	8006b66 <__sflush_r+0xda>
 8006b92:	bf00      	nop
 8006b94:	20400001 	.word	0x20400001

08006b98 <_fflush_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	b913      	cbnz	r3, 8006ba8 <_fflush_r+0x10>
 8006ba2:	2500      	movs	r5, #0
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	b118      	cbz	r0, 8006bb2 <_fflush_r+0x1a>
 8006baa:	6983      	ldr	r3, [r0, #24]
 8006bac:	b90b      	cbnz	r3, 8006bb2 <_fflush_r+0x1a>
 8006bae:	f000 f887 	bl	8006cc0 <__sinit>
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <_fflush_r+0x6c>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	d11b      	bne.n	8006bf0 <_fflush_r+0x58>
 8006bb8:	686c      	ldr	r4, [r5, #4]
 8006bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0ef      	beq.n	8006ba2 <_fflush_r+0xa>
 8006bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bc4:	07d0      	lsls	r0, r2, #31
 8006bc6:	d404      	bmi.n	8006bd2 <_fflush_r+0x3a>
 8006bc8:	0599      	lsls	r1, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_fflush_r+0x3a>
 8006bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bce:	f000 f915 	bl	8006dfc <__retarget_lock_acquire_recursive>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f7ff ff59 	bl	8006a8c <__sflush_r>
 8006bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bdc:	4605      	mov	r5, r0
 8006bde:	07da      	lsls	r2, r3, #31
 8006be0:	d4e0      	bmi.n	8006ba4 <_fflush_r+0xc>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	059b      	lsls	r3, r3, #22
 8006be6:	d4dd      	bmi.n	8006ba4 <_fflush_r+0xc>
 8006be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bea:	f000 f908 	bl	8006dfe <__retarget_lock_release_recursive>
 8006bee:	e7d9      	b.n	8006ba4 <_fflush_r+0xc>
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <_fflush_r+0x70>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <_fflush_r+0x62>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7df      	b.n	8006bba <_fflush_r+0x22>
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <_fflush_r+0x74>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7da      	b.n	8006bba <_fflush_r+0x22>
 8006c04:	08007590 	.word	0x08007590
 8006c08:	080075b0 	.word	0x080075b0
 8006c0c:	08007570 	.word	0x08007570

08006c10 <std>:
 8006c10:	2300      	movs	r3, #0
 8006c12:	b510      	push	{r4, lr}
 8006c14:	4604      	mov	r4, r0
 8006c16:	e9c0 3300 	strd	r3, r3, [r0]
 8006c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c1e:	6083      	str	r3, [r0, #8]
 8006c20:	8181      	strh	r1, [r0, #12]
 8006c22:	6643      	str	r3, [r0, #100]	; 0x64
 8006c24:	81c2      	strh	r2, [r0, #14]
 8006c26:	6183      	str	r3, [r0, #24]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	305c      	adds	r0, #92	; 0x5c
 8006c2e:	f7fd fb01 	bl	8004234 <memset>
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <std+0x38>)
 8006c34:	6224      	str	r4, [r4, #32]
 8006c36:	6263      	str	r3, [r4, #36]	; 0x24
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <std+0x3c>)
 8006c3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c3c:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <std+0x40>)
 8006c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <std+0x44>)
 8006c42:	6323      	str	r3, [r4, #48]	; 0x30
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	08006f85 	.word	0x08006f85
 8006c4c:	08006fa7 	.word	0x08006fa7
 8006c50:	08006fdf 	.word	0x08006fdf
 8006c54:	08007003 	.word	0x08007003

08006c58 <_cleanup_r>:
 8006c58:	4901      	ldr	r1, [pc, #4]	; (8006c60 <_cleanup_r+0x8>)
 8006c5a:	f000 b8af 	b.w	8006dbc <_fwalk_reent>
 8006c5e:	bf00      	nop
 8006c60:	08006b99 	.word	0x08006b99

08006c64 <__sfmoreglue>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	2568      	movs	r5, #104	; 0x68
 8006c68:	1e4a      	subs	r2, r1, #1
 8006c6a:	4355      	muls	r5, r2
 8006c6c:	460e      	mov	r6, r1
 8006c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c72:	f7ff fac5 	bl	8006200 <_malloc_r>
 8006c76:	4604      	mov	r4, r0
 8006c78:	b140      	cbz	r0, 8006c8c <__sfmoreglue+0x28>
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c80:	300c      	adds	r0, #12
 8006c82:	60a0      	str	r0, [r4, #8]
 8006c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c88:	f7fd fad4 	bl	8004234 <memset>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}

08006c90 <__sfp_lock_acquire>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sfp_lock_acquire+0x8>)
 8006c92:	f000 b8b3 	b.w	8006dfc <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	2000033c 	.word	0x2000033c

08006c9c <__sfp_lock_release>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sfp_lock_release+0x8>)
 8006c9e:	f000 b8ae 	b.w	8006dfe <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	2000033c 	.word	0x2000033c

08006ca8 <__sinit_lock_acquire>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__sinit_lock_acquire+0x8>)
 8006caa:	f000 b8a7 	b.w	8006dfc <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	20000337 	.word	0x20000337

08006cb4 <__sinit_lock_release>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__sinit_lock_release+0x8>)
 8006cb6:	f000 b8a2 	b.w	8006dfe <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20000337 	.word	0x20000337

08006cc0 <__sinit>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	f7ff fff0 	bl	8006ca8 <__sinit_lock_acquire>
 8006cc8:	69a3      	ldr	r3, [r4, #24]
 8006cca:	b11b      	cbz	r3, 8006cd4 <__sinit+0x14>
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	f7ff bff0 	b.w	8006cb4 <__sinit_lock_release>
 8006cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <__sinit+0x68>)
 8006cdc:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <__sinit+0x6c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ce2:	42a3      	cmp	r3, r4
 8006ce4:	bf08      	it	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	bf08      	it	eq
 8006cec:	61a3      	streq	r3, [r4, #24]
 8006cee:	f000 f81f 	bl	8006d30 <__sfp>
 8006cf2:	6060      	str	r0, [r4, #4]
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 f81b 	bl	8006d30 <__sfp>
 8006cfa:	60a0      	str	r0, [r4, #8]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f817 	bl	8006d30 <__sfp>
 8006d02:	2200      	movs	r2, #0
 8006d04:	2104      	movs	r1, #4
 8006d06:	60e0      	str	r0, [r4, #12]
 8006d08:	6860      	ldr	r0, [r4, #4]
 8006d0a:	f7ff ff81 	bl	8006c10 <std>
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2109      	movs	r1, #9
 8006d12:	68a0      	ldr	r0, [r4, #8]
 8006d14:	f7ff ff7c 	bl	8006c10 <std>
 8006d18:	2202      	movs	r2, #2
 8006d1a:	2112      	movs	r1, #18
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	f7ff ff77 	bl	8006c10 <std>
 8006d22:	2301      	movs	r3, #1
 8006d24:	61a3      	str	r3, [r4, #24]
 8006d26:	e7d1      	b.n	8006ccc <__sinit+0xc>
 8006d28:	08007134 	.word	0x08007134
 8006d2c:	08006c59 	.word	0x08006c59

08006d30 <__sfp>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	4607      	mov	r7, r0
 8006d34:	f7ff ffac 	bl	8006c90 <__sfp_lock_acquire>
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <__sfp+0x84>)
 8006d3a:	681e      	ldr	r6, [r3, #0]
 8006d3c:	69b3      	ldr	r3, [r6, #24]
 8006d3e:	b913      	cbnz	r3, 8006d46 <__sfp+0x16>
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ffbd 	bl	8006cc0 <__sinit>
 8006d46:	3648      	adds	r6, #72	; 0x48
 8006d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	d503      	bpl.n	8006d58 <__sfp+0x28>
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	b30b      	cbz	r3, 8006d98 <__sfp+0x68>
 8006d54:	6836      	ldr	r6, [r6, #0]
 8006d56:	e7f7      	b.n	8006d48 <__sfp+0x18>
 8006d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d5c:	b9d5      	cbnz	r5, 8006d94 <__sfp+0x64>
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <__sfp+0x88>)
 8006d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d64:	60e3      	str	r3, [r4, #12]
 8006d66:	6665      	str	r5, [r4, #100]	; 0x64
 8006d68:	f000 f847 	bl	8006dfa <__retarget_lock_init_recursive>
 8006d6c:	f7ff ff96 	bl	8006c9c <__sfp_lock_release>
 8006d70:	2208      	movs	r2, #8
 8006d72:	4629      	mov	r1, r5
 8006d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d7c:	6025      	str	r5, [r4, #0]
 8006d7e:	61a5      	str	r5, [r4, #24]
 8006d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d84:	f7fd fa56 	bl	8004234 <memset>
 8006d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d90:	4620      	mov	r0, r4
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d94:	3468      	adds	r4, #104	; 0x68
 8006d96:	e7d9      	b.n	8006d4c <__sfp+0x1c>
 8006d98:	2104      	movs	r1, #4
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f7ff ff62 	bl	8006c64 <__sfmoreglue>
 8006da0:	4604      	mov	r4, r0
 8006da2:	6030      	str	r0, [r6, #0]
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1d5      	bne.n	8006d54 <__sfp+0x24>
 8006da8:	f7ff ff78 	bl	8006c9c <__sfp_lock_release>
 8006dac:	230c      	movs	r3, #12
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	e7ee      	b.n	8006d90 <__sfp+0x60>
 8006db2:	bf00      	nop
 8006db4:	08007134 	.word	0x08007134
 8006db8:	ffff0001 	.word	0xffff0001

08006dbc <_fwalk_reent>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	4688      	mov	r8, r1
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dce:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd2:	d505      	bpl.n	8006de0 <_fwalk_reent+0x24>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d1f7      	bne.n	8006dca <_fwalk_reent+0xe>
 8006dda:	4638      	mov	r0, r7
 8006ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de0:	89ab      	ldrh	r3, [r5, #12]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d907      	bls.n	8006df6 <_fwalk_reent+0x3a>
 8006de6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dea:	3301      	adds	r3, #1
 8006dec:	d003      	beq.n	8006df6 <_fwalk_reent+0x3a>
 8006dee:	4629      	mov	r1, r5
 8006df0:	4630      	mov	r0, r6
 8006df2:	47c0      	blx	r8
 8006df4:	4307      	orrs	r7, r0
 8006df6:	3568      	adds	r5, #104	; 0x68
 8006df8:	e7e9      	b.n	8006dce <_fwalk_reent+0x12>

08006dfa <__retarget_lock_init_recursive>:
 8006dfa:	4770      	bx	lr

08006dfc <__retarget_lock_acquire_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_release_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__swhatbuf_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	460e      	mov	r6, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	4614      	mov	r4, r2
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	b096      	sub	sp, #88	; 0x58
 8006e10:	da07      	bge.n	8006e22 <__swhatbuf_r+0x22>
 8006e12:	2300      	movs	r3, #0
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	89b3      	ldrh	r3, [r6, #12]
 8006e18:	061a      	lsls	r2, r3, #24
 8006e1a:	d410      	bmi.n	8006e3e <__swhatbuf_r+0x3e>
 8006e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e20:	e00e      	b.n	8006e40 <__swhatbuf_r+0x40>
 8006e22:	466a      	mov	r2, sp
 8006e24:	f000 f914 	bl	8007050 <_fstat_r>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	dbf2      	blt.n	8006e12 <__swhatbuf_r+0x12>
 8006e2c:	9a01      	ldr	r2, [sp, #4]
 8006e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e36:	425a      	negs	r2, r3
 8006e38:	415a      	adcs	r2, r3
 8006e3a:	602a      	str	r2, [r5, #0]
 8006e3c:	e7ee      	b.n	8006e1c <__swhatbuf_r+0x1c>
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	2000      	movs	r0, #0
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	b016      	add	sp, #88	; 0x58
 8006e46:	bd70      	pop	{r4, r5, r6, pc}

08006e48 <__smakebuf_r>:
 8006e48:	898b      	ldrh	r3, [r1, #12]
 8006e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e4c:	079d      	lsls	r5, r3, #30
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	d507      	bpl.n	8006e64 <__smakebuf_r+0x1c>
 8006e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	6163      	str	r3, [r4, #20]
 8006e60:	b002      	add	sp, #8
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	466a      	mov	r2, sp
 8006e66:	ab01      	add	r3, sp, #4
 8006e68:	f7ff ffca 	bl	8006e00 <__swhatbuf_r>
 8006e6c:	9900      	ldr	r1, [sp, #0]
 8006e6e:	4605      	mov	r5, r0
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff f9c5 	bl	8006200 <_malloc_r>
 8006e76:	b948      	cbnz	r0, 8006e8c <__smakebuf_r+0x44>
 8006e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7c:	059a      	lsls	r2, r3, #22
 8006e7e:	d4ef      	bmi.n	8006e60 <__smakebuf_r+0x18>
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	e7e3      	b.n	8006e54 <__smakebuf_r+0xc>
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <__smakebuf_r+0x7c>)
 8006e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	6020      	str	r0, [r4, #0]
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	6120      	str	r0, [r4, #16]
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	9b01      	ldr	r3, [sp, #4]
 8006ea2:	b15b      	cbz	r3, 8006ebc <__smakebuf_r+0x74>
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eaa:	f000 f8e3 	bl	8007074 <_isatty_r>
 8006eae:	b128      	cbz	r0, 8006ebc <__smakebuf_r+0x74>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	89a0      	ldrh	r0, [r4, #12]
 8006ebe:	4305      	orrs	r5, r0
 8006ec0:	81a5      	strh	r5, [r4, #12]
 8006ec2:	e7cd      	b.n	8006e60 <__smakebuf_r+0x18>
 8006ec4:	08006c59 	.word	0x08006c59

08006ec8 <memchr>:
 8006ec8:	4603      	mov	r3, r0
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	b2c9      	uxtb	r1, r1
 8006ece:	4402      	add	r2, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	d101      	bne.n	8006eda <memchr+0x12>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e003      	b.n	8006ee2 <memchr+0x1a>
 8006eda:	7804      	ldrb	r4, [r0, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	428c      	cmp	r4, r1
 8006ee0:	d1f6      	bne.n	8006ed0 <memchr+0x8>
 8006ee2:	bd10      	pop	{r4, pc}

08006ee4 <__malloc_lock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_lock+0x8>)
 8006ee6:	f7ff bf89 	b.w	8006dfc <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	20000338 	.word	0x20000338

08006ef0 <__malloc_unlock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__malloc_unlock+0x8>)
 8006ef2:	f7ff bf84 	b.w	8006dfe <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	20000338 	.word	0x20000338

08006efc <_raise_r>:
 8006efc:	291f      	cmp	r1, #31
 8006efe:	b538      	push	{r3, r4, r5, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	d904      	bls.n	8006f10 <_raise_r+0x14>
 8006f06:	2316      	movs	r3, #22
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f12:	b112      	cbz	r2, 8006f1a <_raise_r+0x1e>
 8006f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f18:	b94b      	cbnz	r3, 8006f2e <_raise_r+0x32>
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f830 	bl	8006f80 <_getpid_r>
 8006f20:	462a      	mov	r2, r5
 8006f22:	4601      	mov	r1, r0
 8006f24:	4620      	mov	r0, r4
 8006f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2a:	f000 b817 	b.w	8006f5c <_kill_r>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d00a      	beq.n	8006f48 <_raise_r+0x4c>
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	d103      	bne.n	8006f3e <_raise_r+0x42>
 8006f36:	2316      	movs	r3, #22
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	e7e7      	b.n	8006f0e <_raise_r+0x12>
 8006f3e:	2400      	movs	r4, #0
 8006f40:	4628      	mov	r0, r5
 8006f42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f46:	4798      	blx	r3
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e7e0      	b.n	8006f0e <_raise_r+0x12>

08006f4c <raise>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <raise+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f7ff bfd3 	b.w	8006efc <_raise_r>
 8006f56:	bf00      	nop
 8006f58:	2000000c 	.word	0x2000000c

08006f5c <_kill_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4d06      	ldr	r5, [pc, #24]	; (8006f7c <_kill_r+0x20>)
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7fa fd90 	bl	8001a8e <_kill>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_kill_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_kill_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000340 	.word	0x20000340

08006f80 <_getpid_r>:
 8006f80:	f7fa bd7e 	b.w	8001a80 <_getpid>

08006f84 <__sread>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	460c      	mov	r4, r1
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	f000 f894 	bl	80070b8 <_read_r>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	bfab      	itete	ge
 8006f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f96:	89a3      	ldrhlt	r3, [r4, #12]
 8006f98:	181b      	addge	r3, r3, r0
 8006f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f9e:	bfac      	ite	ge
 8006fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fa2:	81a3      	strhlt	r3, [r4, #12]
 8006fa4:	bd10      	pop	{r4, pc}

08006fa6 <__swrite>:
 8006fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	461f      	mov	r7, r3
 8006fac:	898b      	ldrh	r3, [r1, #12]
 8006fae:	4605      	mov	r5, r0
 8006fb0:	05db      	lsls	r3, r3, #23
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	d505      	bpl.n	8006fc4 <__swrite+0x1e>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc0:	f000 f868 	bl	8007094 <_lseek_r>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	4628      	mov	r0, r5
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	f000 b817 	b.w	800700c <_write_r>

08006fde <__sseek>:
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe6:	f000 f855 	bl	8007094 <_lseek_r>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	bf15      	itete	ne
 8006ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ffa:	81a3      	strheq	r3, [r4, #12]
 8006ffc:	bf18      	it	ne
 8006ffe:	81a3      	strhne	r3, [r4, #12]
 8007000:	bd10      	pop	{r4, pc}

08007002 <__sclose>:
 8007002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007006:	f000 b813 	b.w	8007030 <_close_r>
	...

0800700c <_write_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	2200      	movs	r2, #0
 8007016:	4d05      	ldr	r5, [pc, #20]	; (800702c <_write_r+0x20>)
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7fa fd6e 	bl	8001afc <_write>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_write_r+0x1e>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_write_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000340 	.word	0x20000340

08007030 <_close_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	2300      	movs	r3, #0
 8007034:	4d05      	ldr	r5, [pc, #20]	; (800704c <_close_r+0x1c>)
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa fd7a 	bl	8001b34 <_close>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_close_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_close_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000340 	.word	0x20000340

08007050 <_fstat_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_fstat_r+0x20>)
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	f7fa fd74 	bl	8001b4a <_fstat>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d102      	bne.n	800706c <_fstat_r+0x1c>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b103      	cbz	r3, 800706c <_fstat_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	20000340 	.word	0x20000340

08007074 <_isatty_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	2300      	movs	r3, #0
 8007078:	4d05      	ldr	r5, [pc, #20]	; (8007090 <_isatty_r+0x1c>)
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fa fd72 	bl	8001b68 <_isatty>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_isatty_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_isatty_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000340 	.word	0x20000340

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	2200      	movs	r2, #0
 800709e:	4d05      	ldr	r5, [pc, #20]	; (80070b4 <_lseek_r+0x20>)
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fa fd6a 	bl	8001b7c <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000340 	.word	0x20000340

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	4d05      	ldr	r5, [pc, #20]	; (80070d8 <_read_r+0x20>)
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fa fcfb 	bl	8001ac2 <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000340 	.word	0x20000340

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr
